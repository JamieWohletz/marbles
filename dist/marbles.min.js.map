{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///marbles.min.js","webpack:///webpack/bootstrap d2c2bc38d598a92eed86","webpack:///./src/marbles.js","webpack:///./src/util.js","webpack:///./src/logic.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/immutable/dist/immutable.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_classCallCheck","instance","Constructor","TypeError","rootSegment","fragment","tokens","tokenData","rule","listWithRoot","_immutable","List","setTokenData","segment","data","util","assign","isObject","stripOuterBraces","dynamicToken","substr","length","arraySwap","i","j","array","tmp","childOf","parentId","segmentId","list","parentIndex","findLastIndex","node","nodeIndex","present","requiredSegmentId","findIndex","regexify","seg","newSegment","replace","TOKEN_REGEX","token","tokenName","regex","Error","source","RegExp","extractData","rawFragment","searchString","tokenKeys","keys","reduce","matches","match","arrayHead","index","canPush","newList","push","routeToList","route","segments","segs","toArray","matchString","leftWall","finished","isString","replaceTokens","string","listToRoute","leadingSlash","trailingSlash","fragments","map","filter","frag","hash","join","validateNodesAfter","slice","chainData","upToNode","emptyObject","stopIndex","lastIndexOf","chainedData","listDiff","from","against","diffData","found","find","_ref","equal","handleActivations","oldList","subscribers","activated","forEach","listNode","handler","setTimeout","handleDeactivations","deactivated","assertValidSegment","isFunction","assertOptionsOk","options","assertValidSegments","isArray","set","normalizeSegment","normalizeSegments","assertValidListenerObject","listener","assertValidSubscription","subscription","k","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","_util","_logic","logic","DIGIT_REGEX","Marbles","segmentsConfig","arguments","undefined","win","window","defaultOptions","concat","freeze","_ref2","value","_this","processRoute","location","hashChangeHandler","addEventListener","removeEventListener","replaceHistory","processList","newRoute","newHash","history","replaceState","_ref3","segmentWithData","foundIndex","_ref4","insertionIndex","size","insert","removalIndex","delete","subs","activators","deactivators","activatorsToRm","deactivatorsToRm","pull","get","DIGITS","create","any","_typeof","Array","_len","args","_key","apply","values","val","indexOf","results","splice","returnArray","subArray","without","newArray","peek","arr","noop","batchAsyncActions","fns","callback","resolvedCount","fn","result","Symbol","iterator","constructor","deepEqual","boolEval","anything","Boolean","not","argument","extraArgs","or","_len2","predicates","_key2","_len3","_key3","and","_len4","_key4","_len5","_key5","isUndefinedOrNull","isBuffer","x","copy","objEquiv","a","b","opts","isArguments","pSlice","ka","objectKeys","kb","e","sort","actual","expected","Date","getTime","strict","supported","object","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","global","createClass","ctor","superClass","Iterable","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","offset","len","Math","max","newArr","ii","ensureSize","iter","__iterate","returnTrue","wrapIndex","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","type","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","_array","ObjectSeq","_object","_keys","IterableSeq","_iterable","IteratorSeq","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","maybeIndexedSeqFromValue","seqIterate","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","getIENodeHash","objHashUID","isExtensible","nodeType","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","canEdit","spliceIn","newLen","after","spliceOut","pop","empty","emptyList","isList","makeList","VNode","setSize","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","left","to","right","DONE","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","singleton","concatSeq","flatten","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","other","possibleIndex","floor","offsetValue","d","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","returnValue","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","removeNum","numArgs","spliced","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,QAAAD,IAEAD,EAAA,QAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,EAASM,GAE/B,YAcA,SAASS,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeX,KAAKK,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOK,QAAUP,EAAYE,EAElQ,QAASM,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCEjEjH,QAASC,KACP,OACEnB,GAAI,OACJoB,SAAU,GACVC,UACAC,aACAC,KAAM,kBAAM,IAIhB,QAASC,KACP,OAAO,EAAAC,EAAAC,OAAMP,MAGf,QAASQ,GAAaC,EAASC,GAC7B,MAAOC,GAAKC,UAAWH,GAAWN,UAAWQ,EAAKE,SAASH,GAAQA,OAGrE,QAASI,GAAiBC,GACxB,MAAOA,GAAaC,OAAO,EAAGD,EAAaE,OAAS,GAGtD,QAASC,GAAUC,EAAGC,EAAGC,GACvB,GAAMC,GAAMD,EAAMF,EAClBE,GAAMF,GAAKE,EAAMD,GACjBC,EAAMD,GAAKE,EAGb,QAASC,GAAQC,GACf,MAAO,UAACC,EAAWC,GACjB,GAAMC,GAAcD,EAAKE,cAAc,SAACC,GACtC,MAAOA,GAAKhD,KAAO2C,IAEfM,EAAYJ,EAAKE,cAAc,SAACC,GACpC,MAAOA,GAAKhD,KAAO4C,GAErB,OAAOE,MAAgB,GAAMG,IAAcH,EAAc,GAI7D,QAASI,GAAQC,GACf,MAAO,UAACP,EAAWC,GACjB,MAAOA,GAAKO,UAAU,SAACJ,GACrB,MAAOA,GAAKhD,KAAOmD,OACd,GAKX,QAASE,GAASC,GAChB,GAAMC,GAAaD,EAAIlC,SAASoC,QAAQC,EAAa,SAACC,GACpD,GAAMC,GAAY1B,EAAiByB,GAC7BE,EAAQN,EAAIjC,OAAOsC,EACzB,KAAKC,EACH,KAAM,IAAIC,OAAJ,kBACGP,EAAItD,GADP,yCACkD0D,EADlD,8CAGYC,EAHZ,+NASR,OAAOC,GAAME,QAEf,OAAO,IAAIC,QAAJ,GAAcR,GAGvB,QAASS,GAAYC,EAAarC,GAChC,GAAMP,GAASO,EAAQP,OACnB6C,EAAeD,EACbE,EAAYrC,EAAKsC,KAAK/C,GACtBC,EAAY6C,EAAUE,OAAO,SAACxC,EAAM8B,GACxC,GAAMW,GAAUJ,EAAaK,MAAMlD,EAAOsC,IACpCY,EAAQzC,EAAK0C,UAAUF,EAG7B,OAFAJ,GAAeA,EAAa/B,OAAOmC,EAAQG,MAAQF,EAAMnC,QACzDP,EAAK8B,GAAaY,EACX1C,MAET,OAAOP,GAGT,QAASoD,GAAQ9C,EAASiB,GACxB,GAAM8B,GAAU9B,EAAK+B,KAAKhD,EAC1B,UAAIA,IAAWA,EAAQL,KAAKK,EAAQ5B,GAAI2E,IAO1C,QAASE,GAAYC,EAAOC,GAM1B,IALA,GAAMC,GAAOD,EAASE,UAClBpC,GAAO,EAAApB,EAAAC,QACPwD,EAAcJ,EACdK,EAAW,EACXC,GAAW,GACPA,GAAU,CAChBA,GAAW,CACX,KAAK,GAAI9C,GAAI6C,EAAU7C,EAAI0C,EAAK5C,OAAQE,IAAK,CAC3C,GAAMgB,GAAM0B,EAAK1C,GACXsB,EAAQP,EAASC,GACjBiB,EAAQzC,EAAK0C,UAAUU,EAAYX,MAAMX,GAC/C,IAAI9B,EAAKuD,SAASd,IAAUG,EAAQpB,EAAKT,GAAO,CAC9C,GAAMhB,GAAOmC,EAAYO,EAAOjB,EAChC4B,GAAcA,EAAY1B,QAAQe,EAAO,IACzClC,EAAUC,EAAG6C,EAAUH,GACvBG,GAAY,EACZC,GAAW,EACXvC,EAAOA,EAAK+B,KAAKjD,EAAa2B,EAAKzB,GACnC,SAIN,MAAOgB,GAGT,QAASyC,GAAcC,EAAQ1D,GAC7B,MAAO0D,GAAO/B,QAAQC,EAAa,SAACc,GAAD,MAAW1C,GAAKI,EAAiBsC,MAItE,QAASiB,GAAY3C,EAAM4C,EAAcC,GACvC,GAAMC,GAAY9C,EAAK+C,IAAI,SAAC5C,GAC1B,MAAOsC,GAActC,EAAK5B,SAAU4B,EAAK1B,aACxCuE,OAAO,SAACC,GAAD,MAAmB,KAATA,IACdC,EAAOJ,EAAUK,KAAK,IAC5B,OAAOD,OAAUN,EAAe,IAAM,IAAKM,GAAOL,EAAgB,IAAM,IAAOK,EAGjF,QAASE,GAAmBxB,EAAO5B,GACjC,MAAOA,GAAKwB,OAAO,SAACM,EAAS3B,EAAMV,GACjC,MAAIA,GAAImC,GAASC,EAAQ1B,EAAM2B,GACtBA,EAAQC,KAAK5B,GAEf2B,GACN9B,EAAKqD,MAAM,EAAGzB,EAAQ,IAG3B,QAAS0B,GAAUtD,EAAMuD,GACvB,GAAMvE,GAAOC,EAAKuE,cACZC,EAAYzD,EAAK0D,YAAYH,EACnC,OAAOvD,GAAKwB,OAAO,SAACmC,EAAaxD,EAAMyB,GACrC,MAAI6B,MAAc,GAAM7B,EAAQ6B,EACvBE,EAEF1E,EAAKC,OAAOyE,EAAaxD,EAAK1B,YACpCO,GAGL,QAAS4E,GAASC,EAAMC,EAASC,GAC/B,MAAOF,GAAKrC,OAAO,SAACM,EAAS3B,GAC3B,GAAM6D,GAAQF,EAAQG,KAAK,SAAAC,GAAA,GAAG/G,GAAH+G,EAAG/G,EAAH,OAAYA,KAAOgD,EAAKhD,IACnD,QAAK6G,GAASD,IAAa9E,EAAKkF,MAAMH,EAAMvF,UAAW0B,EAAK1B,WACnDqD,EAAQC,KAAK5B,GAEf2B,IACN,EAAAlD,EAAAC,SAGL,QAASuF,GAAkBtC,EAASuC,EAASC,GAC3C,GAAMC,GAAYX,EAAS9B,EAASuC,GAAS,EAC7CE,GAAUC,QAAQ,SAACC,GACjBH,EAAYG,EAAStH,IAAIoH,UAAUC,QAAQ,SAACE,GAC1CC,WAAW,WACTD,EAAQpB,EAAUxB,KACjB,OAKT,QAAS8C,GAAoB9C,EAASuC,EAASC,GAC7C,GAAMO,GAAcjB,EAASS,EAASvC,GAAS,EAC/C+C,GAAYL,QAAQ,SAACC,GACnBH,EAAYG,EAAStH,IAAI0H,YAAYL,QAAQ,SAACE,GAC5CC,WAAW,iBAAMD,MAAW,OAKlC,QAASI,GAAmBrE,GAC1B,KAAMxB,EAAKE,SAASsB,IACfxB,EAAKuD,SAAS/B,EAAItD,KAClB8B,EAAKuD,SAAS/B,EAAIlC,WAClBU,EAAK8F,WAAWtE,EAAI/B,QAEC,mBAAf+B,GAAIjC,SACXS,EAAKE,SAASsB,EAAIjC,QAEpB,KAAM,IAAIwC,OAAJ,oUAcV,QAASgE,GAAgBC,GACvB,GAAIA,IAAYhG,EAAKE,SAAS8F,GAC5B,KAAM,IAAIjE,OAAM,sDAIpB,QAASkE,GAAoBhD,GAC3B,IAAKjD,EAAKkG,QAAQjD,GAChB,KAAM,IAAIlB,OAAJ,yMAORkB,GAASsC,QAAQM,GACjB5C,EAASV,OAAO,SAAC4D,EAAK3E,GACpB,GAAI2E,EAAI3E,EAAItD,IACV,KAAM,IAAI6D,OAAJ,mCACoBP,EAAItD,GADxB,8EAMR,OADAiI,GAAI3E,EAAItD,KAAM,EACPiI,OAIX,QAASC,GAAiBtG,GACxB,MAAOE,GAAKC,QAERV,UACAC,cAEFM,GAIJ,QAASuG,GAAkBpD,GACzB,OAAO,EAAAtD,EAAAC,MAAKqD,EAASa,IAAI,SAAChE,GACxB,MAAOsG,GAAiBtG,MAI5B,QAASwG,GAA0BC,GACjC,IACGvG,EAAKE,SAASqG,IAEkB,mBAAvBA,GAASjB,YACdtF,EAAK8F,WAAWS,EAASjB,YACK,mBAAzBiB,GAASX,cACd5F,EAAK8F,WAAWS,EAASX,aAG9B,KAAM,IAAI7D,OAAJ,iMAUV,QAASyE,GAAwBC,GAC/B,IAAKzG,EAAKE,SAASuG,GACjB,KAAM,IAAI1E,OAAJ,4JAOR/B,GAAKsC,KAAKmE,GAAclB,QAAQ,SAACmB,GAAD,MAAOJ,GAA0BG,EAAaC,MFjO/E,GAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAItG,GAAI,EAAGA,EAAIsG,EAAMxG,OAAQE,IAAK,CAAE,GAAIuG,GAAaD,EAAMtG,EAAIuG,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMrI,OAAOsI,eAAeN,EAAQE,EAAWnI,IAAKmI,IAAiB,MAAO,UAAU5H,EAAaiI,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBzH,EAAYL,UAAWsI,GAAiBC,GAAaT,EAAiBzH,EAAakI,GAAqBlI,ME1DjiBmI,EAAAvJ,EAAA,GAAYiC,EF8DAxB,EAAwB8I,GE7DpCC,EAAAxJ,EAAA,GAAYyJ,EFiEChJ,EAAwB+I,GEhErC5H,EAAA5B,EAAA,GAEM4D,EAAc,aACd8F,EAAc,KAyRpB/J,GAAOD,QAAP,WACE,QAAAiK,GAAYC,GAA4C,GAA5B3B,GAA4B4B,UAAAtH,OAAA,GAAAuH,SAAAD,UAAA,GAAAA,UAAA,MAAdE,EAAcF,UAAAtH,OAAA,GAAAuH,SAAAD,UAAA,GAAAA,UAAA,GAARG,MAAQ9I,GAAApB,KAAA6J,EACtD,IAAMM,IACJrE,cAAc,EACdC,eAAe,EAGjBqC,GAAoB0B,GACpB5B,EAAgBC,GAChBnI,KAAKmI,QAAUhG,EAAKC,UAAW+H,EAAgBhC,GAC/CnI,KAAKoF,SAAWoD,GAAmBhH,KAAe4I,OAAON,IACzD9J,KAAKwH,YAAcxG,OAAOqJ,OAAOrK,KAAKoF,SAASV,OAAO,SAAC9D,EAAD0J,GAAiB,GAATjK,GAASiK,EAATjK,EAK5D,OAJAO,GAAIP,IACFoH,aACAM,gBAEKnH,QAETZ,KAAKiK,IAAMA,EACXjK,KAAKkD,KAAOrB,IAnBhB,MAAAiH,GAAAe,IAAA9I,IAAA,QAAAwJ,MAAA,WAgCwB,GAAAC,GAAAxK,KAAhBiK,EAAgBF,UAAAtH,OAAA,GAAAuH,SAAAD,UAAA,GAAAA,UAAA,GAAV/J,KAAKiK,GACfjK,MAAKyK,aAAaR,EAAIS,SAAStE,MAC/BpG,KAAK2K,kBAAoB,WACvBH,EAAKC,aAAaR,EAAIS,SAAStE,MAAM,IAEvC6D,EAAIW,iBAAiB,aAAc5K,KAAK2K,sBArC5C5J,IAAA,OAAAwJ,MAAA,WAuCuB,GAAhBN,GAAgBF,UAAAtH,OAAA,GAAAuH,SAAAD,UAAA,GAAAA,UAAA,GAAV/J,KAAKiK,GACdA,GAAIY,oBAAoB,aAAc7K,KAAK2K,sBAxC/C5J,IAAA,eAAAwJ,MAAA,WA2C8D,GAA/CnE,GAA+C2D,UAAAtH,OAAA,GAAAuH,SAAAD,UAAA,GAAAA,UAAA,GAAxC/J,KAAKiK,IAAIS,SAAStE,KAAM0E,EAAgBf,UAAA,GACpD5E,EAAQiB,EAAKvC,QAAQ,IAAK,IAC1BX,EAAOgC,EAAYC,EAAOnF,KAAKoF,SACrC,OAAOpF,MAAK+K,YAAY7H,EAAM4H,MA9ClC/J,IAAA,cAAAwJ,MAAA,SAgDcrH,EAAM4H,GAChBxD,EAAkBpE,EAAMlD,KAAKkD,KAAMlD,KAAKwH,aACxCM,EAAoB5E,EAAMlD,KAAKkD,KAAMlD,KAAKwH,aAC1CxH,KAAKkD,KAAOA,CACZ,IAAM8H,GAAWnF,EACf7F,KAAKkD,KACLlD,KAAKmI,QAAQrC,aACb9F,KAAKmI,QAAQpC,eAETkF,MAAcD,CAMpB,OALIF,GACF9K,KAAKiK,IAAIiB,QAAQC,aAAahJ,EAAKuE,cAAe,GAAIuE,GAEtDjL,KAAKiK,IAAIS,SAAStE,KAAO6E,EAEpBD,KA/DXjK,IAAA,WAAAwJ,MAAA,SAiEWtH,EAAWf,GAClB,GAAMgB,GAAOlD,KAAKkD,KACZS,EAAM3D,KAAKoF,SAAS+B,KAAK,SAAAiE,GAAA,GAAG/K,GAAH+K,EAAG/K,EAAH,OAAYA,KAAO4C,IAC5CoI,EAAkBrJ,EAAa2B,EAAKzB,GACpCoJ,EAAapI,EAAKO,UAAU,SAAA8H,GAAA,GAAGlL,GAAHkL,EAAGlL,EAAH,OAAYA,KAAO4C,IACjD+B,EAAU9B,EACVsI,EAAiB,CACrB,IAAIF,KAAe,EACjBtG,EAAUA,EAAQsD,IAAIgD,EAAYD,OAElC,KAAKG,EAAgBA,GAAkBtI,EAAKuI,KAAMD,IAChD,GAAIzG,EAAQsG,EAAiBrG,EAAQuB,MAAM,EAAGiF,IAAkB,CAC9DxG,EAAUA,EAAQ0G,OAAOF,EAAgBH,EACzC,OAIN,MAAOrL,MAAK+K,YAAYzE,EAAmBkF,EAAgBxG,OAlF/DjE,IAAA,aAAAwJ,MAAA,SAoFatH,GACT,GAAM0I,GAAe3L,KAAKkD,KAAKE,cAAc,SAACC,GAAD,MAAUA,GAAKhD,KAAO4C,IAC/DC,EAAOlD,KAAKkD,IAIhB,OAHIyI,MAAiB,IACnBzI,EAAOlD,KAAKkD,KAAK0I,OAAOD,IAEnB3L,KAAK+K,YAAY7H,MA1F5BnC,IAAA,YAAAwJ,MAAA,SA4FY3B,GACRD,EAAwBC,EACxB,IAAMiD,GAAO7L,KAAKwH,WAClBrF,GAAKsC,KAAKmE,GAAclB,QAAQ,SAACmB,GAC/B,GAAMiD,GAAalD,EAAaC,GAAGpB,cAC7BsE,EAAenD,EAAaC,GAAGd,eACrC8D,GAAKhD,GAAGpB,UAAYoE,EAAKhD,GAAGpB,UAAU2C,OAAO0B,GAC7CD,EAAKhD,GAAGd,YAAc8D,EAAKhD,GAAGd,YAAYqC,OAAO2B,QAnGvDhL,IAAA,cAAAwJ,MAAA,SAsGc3B,GACVD,EAAwBC,EACxB,IAAMiD,GAAO7L,KAAKwH,WAClBrF,GAAKsC,KAAKmE,GAAclB,QAAQ,SAACmB,GAC/B,GAAMmD,GAAiBpD,EAAaC,GAAGpB,cACjCwE,EAAmBrD,EAAaC,GAAGd,eACzC5F,GAAK+J,KAAKF,EAAgBH,EAAKhD,GAAGpB,WAClCtF,EAAK+J,KAAKD,EAAkBJ,EAAKhD,GAAGd,kBA7G1ChH,IAAA,UAAAwJ,MAAA,WAiHI,MAAO/D,GAAUxG,KAAKkD,WAjH1BnC,IAAA,QAAAoL,IAAA,WAsBI,MAAOhK,GAAKC,QACVmB,UACAR,WACC4G,MAzBP5I,IAAA,QAAAoL,IAAA,WA4BI,OACEC,OAAQxC,OA7BdC,MFmMM,SAAShK,EAAQD,EAASM,GAE/B,YGjeD,SAASwG,KACP,MAAO1F,QAAOqL,OAAO,MAGvB,QAAShK,GAASiK,GAChB,MAAsB,YAAf,mBAAOA,GAAP,YAAAC,EAAOD,KAA4B,OAARA,KAAkBA,YAAeE,QAGrE,QAASnE,GAAQiE,GACf,MAAOA,aAAeE,OAGxB,QAAS9G,GAAS4G,GAChB,MAAsB,gBAARA,GAGhB,QAASrE,GAAWqE,GAClB,MAAsB,kBAARA,GAGhB,QAAS7H,GAAK7D,GACZ,MAAOI,QAAOyD,KAAK7D,GAGrB,QAASwB,KAAgB,OAAAqK,GAAA1C,UAAAtH,OAANiK,EAAMF,MAAAC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,GAAA5C,UAAA4C,EACvB,OAAO3L,QAAOoB,OAAOwK,MAAM5L,OAAQ0L,GAGrC,QAAS7H,GAAUhC,GACjB,GAAqB,mBAAVA,IAA2BA,YAAiB2J,OAGvD,MAAO3J,GAAM,GAGf,QAASqJ,GAAKW,EAAQhK,GACpB,MAAOgK,GAAO5G,IAAI,SAAC6G,GAGjB,IAFA,GAAIhI,GAAQjC,EAAMkK,QAAQD,GACtBE,KACGlI,KAAU,GACfkI,EAAUA,EAAQ5C,OAAOvH,EAAMoK,OAAOnI,EAAO,IAC7CA,EAAQjC,EAAMkK,QAAQD,EAExB,OAAOE,KAENtI,OAAO,SAACwI,EAAaC,GAAd,MAA2BD,GAAY9C,OAAO+C,QACrDzI,OAAO,SAACwI,EAAaJ,GACpB,MAAII,GAAYH,QAAQD,MAAS,EACxBI,EAEFA,EAAY9C,OAAO0C,YAAeN,QAASM,GAAOA,QAI/D,QAASM,GAAQP,EAAQhK,GACvB,GAAMwK,GAAWxK,EAAM0D,OAEvB,OADA2F,GAAKW,EAAQQ,GACNA,EAGT,QAASC,GAAKC,GACZ,MAAKA,IAASA,YAAef,OAGtBe,EAAIA,EAAI9K,OAAS,IAAM,KAFrB,KAKX,QAAS+K,MAET,QAASC,GAAkBC,EAAKC,GAC9B,IAAKtF,EAAQqF,GACX,KAAM,IAAInM,WACR,4EAGJ,IAAIqM,GAAgB,EACdZ,IACNU,GAAIhG,QAAQ,SAACmG,GACXA,EAAG,SAACC,GACFF,GAAiB,EACjBZ,EAAQ/H,KAAK6I,GACTF,IAAkBF,EAAIjL,QACxBkL,EAASX,OHiZhBhM,OAAOsI,eAAe1J,EAAS,cAC7B2K,OAAO,GAGT,IAAIgC,GAA4B,kBAAXwB,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUpN,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXmN,SAAyBnN,EAAIqN,cAAgBF,QAAUnN,IAAQmN,OAAO9M,UAAY,eAAkBL,IGzejQsN,EAAYhO,EAAQ,EHukBzBN,GG5ecyH,MAAb6G,EH6eDtO,EG5eC8G,cH6eD9G,EG5eCyI,UH6eDzI,EG5eCyC,WH6eDzC,EG5eCqI,aH6eDrI,EG5eC8F,WH6eD9F,EG5eC6N,oBH6eD7N,EG5eC4N,OH6eD5N,EG5eC6E,OH6eD7E,EG5eC0N,OH6eD1N,EG5eCwC,SH6eDxC,EG5eCiF,YH6eDjF,EG5eCsM,OH6eDtM,EG5eCwN,WHgfI,SAASvN,EAAQD,EAASM,GAE/B,YAWA,SAASS,GAAwBC,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIE,KAAa,IAAW,MAAPF,EAAe,IAAK,GAAIG,KAAOH,GAAWI,OAAOC,UAAUC,eAAeX,KAAKK,EAAKG,KAAMD,EAAOC,GAAOH,EAAIG,GAAgC,OAAtBD,GAAOK,QAAUP,EAAYE,EInmBnQ,QAASqN,GAASC,EAAU1B,GAC1B,MAAIvK,GAAK8F,WAAWmG,GACXA,EAASxB,MAAM,KAAMF,GAErB2B,QAAQD,GAInB,QAASE,GAAIC,GACX,MAAO,YAAiC,OAAA9B,GAAA1C,UAAAtH,OAAX+L,EAAWhC,MAAAC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAX6B,EAAW7B,GAAA5C,UAAA4C,EACtC,QAAQwB,EAASI,EAAUC,IAI/B,QAASC,KAAkB,OAAAC,GAAA3E,UAAAtH,OAAZkM,EAAYnC,MAAAkC,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAZD,EAAYC,GAAA7E,UAAA6E,EACzB,OAAO,YAAgC,OAAAC,GAAA9E,UAAAtH,OAAX+L,EAAWhC,MAAAqC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXN,EAAWM,GAAA/E,UAAA+E,EACrC,KAAK,GAAInM,GAAI,EAAGA,EAAIgM,EAAWlM,OAAQE,IACrC,GAAIwL,EAASQ,EAAWhM,GAAI6L,GAC1B,OAAO,CAGX,QAAO,GAIX,QAASO,KAAmB,OAAAC,GAAAjF,UAAAtH,OAAZkM,EAAYnC,MAAAwC,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAZN,EAAYM,GAAAlF,UAAAkF,EAC1B,OAAO,YAAiC,OAAAC,GAAAnF,UAAAtH,OAAX+L,EAAWhC,MAAA0C,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXX,EAAWW,GAAApF,UAAAoF,EACtC,KAAK,GAAIxM,GAAI,EAAGA,EAAIgM,EAAWlM,OAAQE,IACrC,IAAKwL,EAASQ,EAAWhM,GAAI6L,GAC3B,OAAO,CAGX,OAAOG,GAAWlM,OAAS,GJ0jB9BzB,OAAOsI,eAAe1J,EAAS,cAC7B2K,OAAO,IAET3K,EAAQmP,IAAMnP,EAAQ6O,GAAK7O,EAAQ0O,IAAMtE,MI/lB1C,IAAAP,GAAAvJ,EAAA,GAAYiC,EJmmBAxB,EAAwB8I,EA4DnC7J,GIxnBC0O,MJynBD1O,EIxnBC6O,KJynBD7O,EIxnBCmP,OJ4nBI,SAASlP,EAAQD,EAASM,GKxoBhC,QAAAkP,GAAA7E,GACA,cAAAA,GAAAP,SAAAO,EAGA,QAAA8E,GAAAC,GACA,SAAAA,GAAA,gBAAAA,IAAA,gBAAAA,GAAA7M,UACA,kBAAA6M,GAAAC,MAAA,kBAAAD,GAAA/I,SAGA+I,EAAA7M,OAAA,mBAAA6M,GAAA,KAIA,QAAAE,GAAAC,EAAAC,EAAAC,GACA,GAAAhN,GAAA5B,CACA,IAAAqO,EAAAK,IAAAL,EAAAM,GACA,QAEA,IAAAD,EAAAxO,YAAAyO,EAAAzO,UAAA,QAGA,IAAA2O,EAAAH,GACA,QAAAG,EAAAF,KAGAD,EAAAI,EAAAtP,KAAAkP,GACAC,EAAAG,EAAAtP,KAAAmP,GACAxB,EAAAuB,EAAAC,EAAAC,GAEA,IAAAN,EAAAI,GAAA,CACA,IAAAJ,EAAAK,GACA,QAEA,IAAAD,EAAAhN,SAAAiN,EAAAjN,OAAA,QACA,KAAAE,EAAA,EAAeA,EAAA8M,EAAAhN,OAAcE,IAC7B,GAAA8M,EAAA9M,KAAA+M,EAAA/M,GAAA,QAEA,UAEA,IACA,GAAAmN,GAAAC,EAAAN,GACAO,EAAAD,EAAAL,GACG,MAAAO,GACH,SAIA,GAAAH,EAAArN,QAAAuN,EAAAvN,OACA,QAKA,KAHAqN,EAAAI,OACAF,EAAAE,OAEAvN,EAAAmN,EAAArN,OAAA,EAAyBE,GAAA,EAAQA,IACjC,GAAAmN,EAAAnN,IAAAqN,EAAArN,GACA,QAIA,KAAAA,EAAAmN,EAAArN,OAAA,EAAyBE,GAAA,EAAQA,IAEjC,GADA5B,EAAA+O,EAAAnN,IACAuL,EAAAuB,EAAA1O,GAAA2O,EAAA3O,GAAA4O,GAAA,QAEA,cAAAF,UAAAC,GA5FA,GAAAG,GAAArD,MAAAvL,UAAAsF,MACAwJ,EAAA7P,EAAA,GACA0P,EAAA1P,EAAA,GAEAgO,EAAArO,EAAAD,QAAA,SAAAuQ,EAAAC,EAAAT,GAGA,MAFAA,WAEAQ,IAAAC,IAGGD,YAAAE,OAAAD,YAAAC,MACHF,EAAAG,YAAAF,EAAAE,WAIGH,IAAAC,GAAA,gBAAAD,IAAA,gBAAAC,GACHT,EAAAY,OAAAJ,IAAAC,EAAAD,GAAAC,EASAZ,EAAAW,EAAAC,EAAAT,MLgvBM,SAAS9P,EAAQD,GMlwBvB,QAAA4Q,GAAAC,GACA,4BAAAzP,OAAAC,UAAAyP,SAAAnQ,KAAAkQ,GAIA,QAAAE,GAAAF,GACA,MAAAA,IACA,gBAAAA,IACA,gBAAAA,GAAAhO,QACAzB,OAAAC,UAAAC,eAAAX,KAAAkQ,EAAA,YACAzP,OAAAC,UAAA2P,qBAAArQ,KAAAkQ,EAAA,YACA,EAlBA,GAAAI,GAEC,sBAFD,WACA,MAAA7P,QAAAC,UAAAyP,SAAAnQ,KAAAwJ,aAGAnK,GAAAC,EAAAD,QAAAiR,EAAAL,EAAAG,EAEA/Q,EAAA4Q,YAKA5Q,EAAA+Q,eNwxBM,SAAS9Q,EAAQD,GO/xBvB,QAAAkR,GAAAlQ,GACA,GAAA6D,KACA,QAAA1D,KAAAH,GAAA6D,EAAAQ,KAAAlE,EACA,OAAA0D,GAPA7E,EAAAC,EAAAD,QAAA,kBAAAoB,QAAAyD,KACAzD,OAAAyD,KAAAqM,EAEAlR,EAAAkR,QP+yBM,SAASjR,EAAQD,EAASM,IQzyBhC,SAAA6Q,EAAApR,GACAE,EAAAD,QAAAD,KAGCK,KAAA,WAAoB,YAErB,SAAAgR,GAAAC,EAAAC,GACAA,IACAD,EAAAhQ,UAAAD,OAAAqL,OAAA6E,EAAAjQ,YAEAgQ,EAAAhQ,UAAAgN,YAAAgD,EAGA,QAAAE,GAAA5G,GACA,MAAA6G,GAAA7G,KAAA8G,EAAA9G,GAKA,QAAA+G,GAAA/G,GACA,MAAAgH,GAAAhH,KAAAiH,EAAAjH,GAKA,QAAAkH,GAAAlH,GACA,MAAAmH,GAAAnH,KAAAoH,EAAApH,GAKA,QAAAqH,GAAArH,GACA,MAAA6G,GAAA7G,KAAAsH,EAAAtH,KAAAuH,EAAAvH,GAKA,QAAA6G,GAAAW,GACA,SAAAA,MAAAC,KAGA,QAAAT,GAAAU,GACA,SAAAA,MAAAC,KAGA,QAAAR,GAAAS,GACA,SAAAA,MAAAC,KAGA,QAAAP,GAAAQ,GACA,MAAAd,GAAAc,IAAAX,EAAAW,GAGA,QAAAC,GAAAC,GACA,SAAAA,MAAAC,KAmCA,QAAAC,GAAAC,GAEA,MADAA,GAAAnI,OAAA,EACAmI,EAGA,QAAAC,GAAAD,GACAA,MAAAnI,OAAA,GAMA,QAAAqI,MAGA,QAAAC,GAAAtF,EAAAuF,GACAA,KAAA,CAGA,QAFAC,GAAAC,KAAAC,IAAA,EAAA1F,EAAA9K,OAAAqQ,GACAI,EAAA,GAAA1G,OAAAuG,GACAI,EAAA,EAAoBA,EAAAJ,EAAUI,IAC9BD,EAAAC,GAAA5F,EAAA4F,EAAAL,EAEA,OAAAI,GAGA,QAAAE,GAAAC,GAIA,MAHArJ,UAAAqJ,EAAA5H,OACA4H,EAAA5H,KAAA4H,EAAAC,UAAAC,IAEAF,EAAA5H,KAGA,QAAA+H,GAAAH,EAAAvO,GAQA,mBAAAA,GAAA,CACA,GAAA2O,GAAA3O,IAAA,CACA,OAAA2O,IAAA3O,GAAA,aAAA2O,EACA,MAAAC,IAEA5O,GAAA2O,EAEA,MAAA3O,GAAA,EAAAsO,EAAAC,GAAAvO,IAGA,QAAAyO,KACA,SAGA,QAAAI,GAAAC,EAAAC,EAAApI,GACA,WAAAmI,GAAA5J,SAAAyB,GAAAmI,IAAAnI,KACAzB,SAAA6J,GAAA7J,SAAAyB,GAAAoI,GAAApI,GAGA,QAAAqI,GAAAF,EAAAnI,GACA,MAAAsI,GAAAH,EAAAnI,EAAA,GAGA,QAAAuI,GAAAH,EAAApI,GACA,MAAAsI,GAAAF,EAAApI,KAGA,QAAAsI,GAAAjP,EAAA2G,EAAAwI,GACA,MAAAjK,UAAAlF,EACAmP,EACAnP,EAAA,EACAkO,KAAAC,IAAA,EAAAxH,EAAA3G,GACAkF,SAAAyB,EACA3G,EACAkO,KAAAkB,IAAAzI,EAAA3G,GAeA,QAAAqP,GAAAC,GACApU,KAAAoU,OAmBA,QAAAC,GAAAC,EAAAzL,EAAA0L,EAAAC,GACA,GAAAjK,GAAA,IAAA+J,EAAAzL,EAAA,IAAAyL,EAAAC,GAAA1L,EAAA0L,EAIA,OAHAC,KAAAjK,QAAAiK,GACAjK,QAAAkK,MAAA,GAEAD,EAGA,QAAAE,KACA,OAAYnK,MAAAP,OAAAyK,MAAA,GAGZ,QAAAE,GAAA5C,GACA,QAAA6C,EAAA7C,GAGA,QAAA8C,GAAAC,GACA,MAAAA,IAAA,kBAAAA,GAAAV,KAGA,QAAAW,GAAAC,GACA,GAAAC,GAAAL,EAAAI,EACA,OAAAC,MAAA1U,KAAAyU,GAGA,QAAAJ,GAAAI,GACA,GAAAC,GAAAD,IACAE,IAAAF,EAAAE,KACAF,EAAAG,IAEA,sBAAAF,GACA,MAAAA,GAIA,QAAAG,GAAA7K,GACA,MAAAA,IAAA,gBAAAA,GAAA9H,OAIA,QAAA4O,GAAA9G,GACA,cAAAA,GAAAP,SAAAO,EAAA8K,IACAjE,EAAA7G,KAAA+K,QAAAC,EAAAhL,GAsCA,QAAAiH,GAAAjH,GACA,cAAAA,GAAAP,SAAAO,EACA8K,IAAAG,aACApE,EAAA7G,GACAgH,EAAAhH,KAAA+K,QAAA/K,EAAAkL,eACAC,EAAAnL,GAUA,QAAAoH,GAAApH,GACA,cAAAA,GAAAP,SAAAO,EAAA8K,IACAjE,EAAA7G,GACAgH,EAAAhH,KAAAoL,WAAApL,EAAAqL,eADAC,EAAAtL,GA2BA,QAAAuH,GAAAvH,GACA,OACA,OAAAA,GAAAP,SAAAO,EAAA8K,IACAjE,EAAA7G,GACAgH,EAAAhH,KAAAoL,WAAApL,EADAsL,EAAAtL,IAEAuL,WAyBA,QAAAC,GAAAlT,GACA7C,KAAAgW,OAAAnT,EACA7C,KAAAyL,KAAA5I,EAAAJ,OAgCA,QAAAwT,GAAAxF,GACA,GAAAhM,GAAAzD,OAAAyD,KAAAgM,EACAzQ,MAAAkW,QAAAzF,EACAzQ,KAAAmW,MAAA1R,EACAzE,KAAAyL,KAAAhH,EAAAhC,OA4CA,QAAA2T,GAAApB,GACAhV,KAAAqW,UAAArB,EACAhV,KAAAyL,KAAAuJ,EAAAvS,QAAAuS,EAAAvJ,KAwCA,QAAA6K,GAAAtI,GACAhO,KAAAuW,UAAAvI,EACAhO,KAAAwW,kBAkDA,QAAAC,GAAAC,GACA,SAAAA,MAAAC,KAKA,QAAAtB,KACA,MAAAuB,SAAA,GAAAb,QAGA,QAAAL,GAAAnL,GACA,GAAAsM,GACArK,MAAAnE,QAAAkC,GAAA,GAAAwL,GAAAxL,GAAAkL,eACAZ,EAAAtK,GAAA,GAAA+L,GAAA/L,GAAAkL,eACAd,EAAApK,GAAA,GAAA6L,GAAA7L,GAAAkL,eACA,gBAAAlL,GAAA,GAAA0L,GAAA1L,GACAP,MACA,KAAA6M,EACA,SAAAtV,WACA,yEACAgJ,EAGA,OAAAsM,GAGA,QAAAhB,GAAAtL,GACA,GAAAsM,GAAAC,EAAAvM,EACA,KAAAsM,EACA,SAAAtV,WACA,gDAAAgJ,EAGA,OAAAsM,GAGA,QAAAtB,GAAAhL,GACA,GAAAsM,GAAAC,EAAAvM,IACA,gBAAAA,IAAA,GAAA0L,GAAA1L,EACA,KAAAsM,EACA,SAAAtV,WACA,iEAAAgJ,EAGA,OAAAsM,GAGA,QAAAC,GAAAvM,GACA,MACA6K,GAAA7K,GAAA,GAAAwL,GAAAxL,GACAsK,EAAAtK,GAAA,GAAA+L,GAAA/L,GACAoK,EAAApK,GAAA,GAAA6L,GAAA7L,GACAP,OAIA,QAAA+M,GAAAF,EAAAhJ,EAAAmJ,EAAAC,GACA,GAAAC,GAAAL,EAAAM,MACA,IAAAD,EAAA,CAEA,OADAE,GAAAF,EAAAzU,OAAA,EACA0Q,EAAA,EAAsBA,GAAAiE,EAAgBjE,IAAA,CACtC,GAAAkE,GAAAH,EAAAF,EAAAI,EAAAjE,IACA,IAAAtF,EAAAwJ,EAAA,GAAAJ,EAAAI,EAAA,GAAAlE,EAAA0D,MAAA,EACA,MAAA1D,GAAA,EAGA,MAAAA,GAEA,MAAA0D,GAAAS,kBAAAzJ,EAAAmJ,GAGA,QAAAO,GAAAV,EAAAvC,EAAA0C,EAAAC,GACA,GAAAC,GAAAL,EAAAM,MACA,IAAAD,EAAA,CACA,GAAAE,GAAAF,EAAAzU,OAAA,EACA0Q,EAAA,CACA,WAAAgB,GAAA,WACA,GAAAkD,GAAAH,EAAAF,EAAAI,EAAAjE,IACA,OAAAA,KAAAiE,EACA1C,IACAL,EAAAC,EAAA2C,EAAAI,EAAA,GAAAlE,EAAA,EAAAkE,EAAA,MAGA,MAAAR,GAAAW,mBAAAlD,EAAA0C,GAGA,QAAAS,GAAAC,EAAAC,GACA,MAAAA,GACAC,EAAAD,EAAAD,EAAA,IAAuCG,GAAAH,IACvCI,EAAAJ,GAGA,QAAAE,GAAAD,EAAAD,EAAA3W,EAAAgX,GACA,MAAAvL,OAAAnE,QAAAqP,GACAC,EAAApX,KAAAwX,EAAAhX,EAAA4Q,EAAA+F,GAAAzR,IAAA,SAAAsO,EAAA1L,GAAmF,MAAA+O,GAAAD,EAAApD,EAAA1L,EAAA6O,MAEnFM,EAAAN,GACAC,EAAApX,KAAAwX,EAAAhX,EAAAyQ,EAAAkG,GAAAzR,IAAA,SAAAsO,EAAA1L,GAAiF,MAAA+O,GAAAD,EAAApD,EAAA1L,EAAA6O,MAEjFA,EAGA,QAAAI,GAAAJ,GACA,MAAAlL,OAAAnE,QAAAqP,GACA/F,EAAA+F,GAAAzR,IAAA6R,GAAAG,SAEAD,EAAAN,GACAlG,EAAAkG,GAAAzR,IAAA6R,GAAAI,QAEAR,EAGA,QAAAM,GAAAzN,GACA,MAAAA,OAAA0D,cAAAjN,QAAAgJ,SAAAO,EAAA0D,aAyDA,QAAAkK,GAAAC,EAAAC,GACA,GAAAD,IAAAC,GAAAD,OAAAC,MACA,QAEA,KAAAD,IAAAC,EACA,QAEA,sBAAAD,GAAAE,SACA,kBAAAD,GAAAC,QAAA,CAGA,GAFAF,IAAAE,UACAD,IAAAC,UACAF,IAAAC,GAAAD,OAAAC,MACA,QAEA,KAAAD,IAAAC,EACA,SAGA,0BAAAD,GAAAG,QACA,kBAAAF,GAAAE,SACAH,EAAAG,OAAAF,IAMA,QAAAnK,GAAAuB,EAAAC,GACA,GAAAD,IAAAC,EACA,QAGA,KACA0B,EAAA1B,IACA1F,SAAAyF,EAAAhE,MAAAzB,SAAA0F,EAAAjE,MAAAgE,EAAAhE,OAAAiE,EAAAjE,MACAzB,SAAAyF,EAAA+I,QAAAxO,SAAA0F,EAAA8I,QAAA/I,EAAA+I,SAAA9I,EAAA8I,QACAjH,EAAA9B,KAAA8B,EAAA7B,IACAgC,EAAAjC,KAAAiC,EAAAhC,IACA4C,EAAA7C,KAAA6C,EAAA5C,GAEA,QAGA,QAAAD,EAAAhE,MAAA,IAAAiE,EAAAjE,KACA,QAGA,IAAAgN,IAAA5G,EAAApC,EAEA,IAAA6C,EAAA7C,GAAA,CACA,GAAAiJ,GAAAjJ,EAAAiJ,SACA,OAAAhJ,GAAAiJ,MAAA,SAAApE,EAAA1L,GACA,GAAAwO,GAAAqB,EAAAtE,OAAA7J,KACA,OAAA8M,IAAAc,EAAAd,EAAA,GAAA9C,KAAAkE,GAAAN,EAAAd,EAAA,GAAAxO,OACO6P,EAAAtE,OAAAK,KAGP,GAAAmE,IAAA,CAEA,IAAA5O,SAAAyF,EAAAhE,KACA,GAAAzB,SAAA0F,EAAAjE,KACA,kBAAAgE,GAAAoJ,aACApJ,EAAAoJ,kBAEO,CACPD,GAAA,CACA,IAAAE,GAAArJ,CACAA,GAAAC,EACAA,EAAAoJ,EAIA,GAAAC,IAAA,EACAC,EAAAtJ,EAAA4D,UAAA,SAAAiB,EAAA1L,GACA,GAAA4P,GAAAhJ,EAAAwJ,IAAA1E,GACAqE,GAAAT,EAAA5D,EAAA9E,EAAAtD,IAAAtD,EAAAqQ,MAAAf,EAAA1I,EAAAtD,IAAAtD,EAAAqQ,IAAA3E,GAEA,MADAwE,IAAA,GACA,GAIA,OAAAA,IAAAtJ,EAAAhE,OAAAuN,EAKA,QAAAG,GAAA5O,EAAA6O,GACA,KAAApZ,eAAAmZ,IACA,UAAAA,GAAA5O,EAAA6O,EAIA,IAFApZ,KAAAqZ,OAAA9O,EACAvK,KAAAyL,KAAAzB,SAAAoP,EAAAE,IAAAtG,KAAAC,IAAA,EAAAmG,GACA,IAAApZ,KAAAyL,KAAA,CACA,GAAA8N,GACA,MAAAA,GAEAA,IAAAvZ,MAoEA,QAAAwZ,GAAAC,EAAAC,GACA,IAAAD,EAAA,SAAAvV,OAAAwV,GAKA,QAAAC,GAAAC,EAAA/F,EAAAgG,GACA,KAAA7Z,eAAA2Z,IACA,UAAAA,GAAAC,EAAA/F,EAAAgG,EAeA,IAbAL,EAAA,IAAAK,EAAA,4BACAD,KAAA,EACA5P,SAAA6J,IACAA,EAAAyF,KAEAO,EAAA7P,SAAA6P,EAAA,EAAA7G,KAAA8G,IAAAD,GACAhG,EAAA+F,IACAC,MAEA7Z,KAAA+Z,OAAAH,EACA5Z,KAAAga,KAAAnG,EACA7T,KAAAia,MAAAJ,EACA7Z,KAAAyL,KAAAuH,KAAAC,IAAA,EAAAD,KAAAkH,MAAArG,EAAA+F,GAAAC,EAAA,MACA,IAAA7Z,KAAAyL,KAAA,CACA,GAAA0O,GACA,MAAAA,GAEAA,IAAAna,MA2FA,QAAAoa,MACA,KAAA7Y,WAAA,YAI2C,QAAA8Y,OAEE,QAAAC,OAEJ,QAAAC,OAuBzC,QAAAC,IAAAC,GACA,MAAAA,KAAA,wBAAAA,EAGA,QAAArU,IAAAsU,GACA,GAAAA,KAAA,UAAAA,GAAA1Q,SAAA0Q,EACA,QAEA,sBAAAA,GAAApC,UACAoC,IAAApC,UACAoC,KAAA,UAAAA,GAAA1Q,SAAA0Q,GACA,QAGA,IAAAA,KAAA,EACA,QAEA,IAAApG,SAAAoG,EACA,eAAApG,EAAA,CACA,GAAAoG,WAAApB,IACA,QAEA,IAAAqB,GAAA,EAAAD,CAIA,KAHAC,IAAAD,IACAC,GAAA,WAAAD,GAEAA,EAAA,YACAA,GAAA,WACAC,GAAAD,CAEA,OAAAF,IAAAG,GAEA,cAAArG,EACA,MAAAoG,GAAAjY,OAAAmY,GAAAC,GAAAH,GAAAI,GAAAJ,EAEA,sBAAAA,GAAAK,SACA,MAAAL,GAAAK,UAEA,eAAAzG,EACA,MAAA0G,IAAAN,EAEA,sBAAAA,GAAAhK,SACA,MAAAoK,IAAAJ,EAAAhK,WAEA,UAAAxM,OAAA,cAAAoQ,EAAA,sBAGA,QAAAuG,IAAAjV,GACA,GAAAQ,GAAA6U,GAAArV,EAUA,OATAoE,UAAA5D,IACAA,EAAA0U,GAAAlV,GACAsV,KAAAC,KACAD,GAAA,EACAD,OAEAC,KACAD,GAAArV,GAAAQ,GAEAA,EAIA,QAAA0U,IAAAlV,GAQA,OADAQ,GAAA,EACA+M,EAAA,EAAoBA,EAAAvN,EAAAnD,OAAoB0Q,IACxC/M,EAAA,GAAAA,EAAAR,EAAAwV,WAAAjI,GAAA,CAEA,OAAAqH,IAAApU,GAGA,QAAA4U,IAAApa,GACA,GAAAwF,EACA,IAAAiV,KACAjV,EAAAkV,GAAAnP,IAAAvL,GACAoJ,SAAA5D,GACA,MAAAA,EAKA,IADAA,EAAAxF,EAAA2a,IACAvR,SAAA5D,EACA,MAAAA,EAGA,KAAAoV,GAAA,CAEA,GADApV,EAAAxF,EAAAgQ,sBAAAhQ,EAAAgQ,qBAAA2K,IACAvR,SAAA5D,EACA,MAAAA,EAIA,IADAA,EAAAqV,GAAA7a,GACAoJ,SAAA5D,EACA,MAAAA,GASA,GALAA,IAAAsV,GACA,WAAAA,KACAA,GAAA,GAGAL,GACAC,GAAAhT,IAAA1H,EAAAwF,OACK,IAAA4D,SAAA2R,OAAA/a,MAAA,EACL,SAAAsD,OAAA,kDACK,IAAAsX,GACLxa,OAAAsI,eAAA1I,EAAA2a,IACApS,YAAA,EACAC,cAAA,EACAC,UAAA,EACAkB,MAAAnE,QAEK,IAAA4D,SAAApJ,EAAAgQ,sBACLhQ,EAAAgQ,uBAAAhQ,EAAAqN,YAAAhN,UAAA2P,qBAKAhQ,EAAAgQ,qBAAA,WACA,MAAA5Q,MAAAiO,YAAAhN,UAAA2P,qBAAAhE,MAAA5M,KAAA+J,YAEAnJ,EAAAgQ,qBAAA2K,IAAAnV,MACK,IAAA4D,SAAApJ,EAAAgb,SAOL,SAAA1X,OAAA,qDAFAtD,GAAA2a,IAAAnV,GAKA,MAAAA,GAkBA,QAAAqV,IAAApY,GACA,GAAAA,KAAAuY,SAAA,EACA,OAAAvY,EAAAuY,UACA,OACA,MAAAvY,GAAAwY,QACA,QACA,MAAAxY,GAAAyY,iBAAAzY,EAAAyY,gBAAAD,UAwBA,QAAAE,IAAAtQ,GACA+N,EACA/N,IAAA6N,IACA,qDAQA,QAAA0C,IAAAzR,GACA,cAAAA,GAAAP,SAAAO,EAAA0R,KACAC,GAAA3R,KAAA+H,EAAA/H,KACA0R,KAAAE,cAAA,SAAAlW,GACA,GAAAoN,GAAA/B,EAAA/G,EACAwR,IAAA1I,EAAA5H,MACA4H,EAAA3L,QAAA,SAAA6M,EAAA1L,GAAwC,MAAA5C,GAAAqC,IAAAO,EAAA0L,OA6KxC,QAAA2H,IAAAE,GACA,SAAAA,MAAAC,KAiBA,QAAAC,IAAAC,EAAA7D,GACA1Y,KAAAuc,UACAvc,KAAA0Y,UAgEA,QAAA8D,IAAAD,EAAAE,EAAAC,GACA1c,KAAAuc,UACAvc,KAAAyc,SACAzc,KAAA0c,QAkEA,QAAAC,IAAAJ,EAAAK,EAAAF,GACA1c,KAAAuc,UACAvc,KAAA4c,QACA5c,KAAA0c,QAuDA,QAAAG,IAAAN,EAAAO,EAAApE,GACA1Y,KAAAuc,UACAvc,KAAA8c,UACA9c,KAAA0Y,UAyEA,QAAAqE,IAAAR,EAAAO,EAAAzF,GACArX,KAAAuc,UACAvc,KAAA8c,UACA9c,KAAAqX,QAgEA,QAAA2F,IAAA/W,EAAAqO,EAAA0C,GACAhX,KAAAid,MAAA3I,EACAtU,KAAAkd,SAAAlG,EACAhX,KAAAmd,OAAAlX,EAAAmX,OAAAC,GAAApX,EAAAmX,OAsCA,QAAAE,IAAAhJ,EAAA+C,GACA,MAAAhD,GAAAC,EAAA+C,EAAA,GAAAA,EAAA,IAGA,QAAAgG,IAAAha,EAAAka,GACA,OACAla,OACAyB,MAAA,EACA0Y,OAAAD,GAIA,QAAAE,IAAAhS,EAAA/L,EAAA6c,EAAAnW,GACA,GAAAH,GAAAjF,OAAAqL,OAAAqR,GAMA,OALAzX,GAAAwF,OACAxF,EAAAmX,MAAA1d,EACAuG,EAAA0X,UAAApB,EACAtW,EAAAuS,OAAApS,EACAH,EAAA2X,WAAA,EACA3X,EAIA,QAAAgW,MACA,MAAA4B,SAAAJ,GAAA,IAGA,QAAAK,IAAA7X,EAAA4C,EAAA0L,GACA,GAAAwJ,GACAC,CACA,IAAA/X,EAAAmX,MAMK,CACL,GAAAa,GAAAxL,EAAAyL,IACAC,EAAA1L,EAAA2L,GAEA,IADAL,EAAAM,GAAApY,EAAAmX,MAAAnX,EAAA0X,UAAA,EAAA3T,OAAAnB,EAAA0L,EAAA0J,EAAAE,IACAA,EAAA5T,MACA,MAAAtE,EAEA+X,GAAA/X,EAAAwF,MAAAwS,EAAA1T,MAAAgK,IAAA2E,IAAA,WAbA,CACA,GAAA3E,IAAA2E,GACA,MAAAjT,EAEA+X,GAAA,EACAD,EAAA,GAAAzB,IAAArW,EAAA0X,YAAA9U,EAAA0L,KAUA,MAAAtO,GAAA0X,WACA1X,EAAAwF,KAAAuS,EACA/X,EAAAmX,MAAAW,EACA9X,EAAAuS,OAAAxO,OACA/D,EAAA2X,WAAA,EACA3X,GAEA8X,EAAAN,GAAAO,EAAAD,GAAA9B,KAGA,QAAAoC,IAAAhb,EAAAkZ,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GACA,MAAA9a,GAQAA,EAAAkb,OAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GAPA5T,IAAA2O,GACA7V,GAEAsP,EAAAwL,GACAxL,EAAAsL,GACA,GAAAlB,IAAAR,EAAAO,GAAA/b,EAAAwJ,KAKA,QAAAiU,IAAAnb,GACA,MAAAA,GAAA4K,cAAA8O,IAAA1Z,EAAA4K,cAAA4O,GAGA,QAAA4B,IAAApb,EAAAkZ,EAAA+B,EAAAxB,EAAAzF,GACA,GAAAhU,EAAAyZ,YACA,UAAAD,IAAAN,EAAAO,GAAAzZ,EAAAgU,SAGA,IAGAqH,GAHAC,GAAA,IAAAL,EAAAjb,EAAAyZ,QAAAzZ,EAAAyZ,UAAAwB,GAAAM,GACAC,GAAA,IAAAP,EAAAxB,MAAAwB,GAAAM,GAGAlC,EAAAiC,IAAAE,GACAJ,GAAApb,EAAAkZ,EAAA+B,EAAAQ,GAAAhC,EAAAzF,KACAqH,EAAA,GAAA3B,IAAAR,EAAAO,EAAAzF,GAAAsH,EAAAE,GAAAxb,EAAAqb,MAAArb,GAEA,WAAAmZ,IAAAD,EAAA,GAAAoC,EAAA,GAAAE,EAAAnC,GAGA,QAAAqC,IAAAxC,EAAA7D,EAAA3X,EAAAwJ,GACAgS,IACAA,EAAA,GAAA3J,GAGA,QADAvP,GAAA,GAAA0Z,IAAAR,EAAAnW,GAAArF,MAAAwJ,IACA4I,EAAA,EAAoBA,EAAAuF,EAAAjW,OAAqB0Q,IAAA,CACzC,GAAAkE,GAAAqB,EAAAvF,EACA9P,KAAAkb,OAAAhC,EAAA,EAAAvS,OAAAqN,EAAA,GAAAA,EAAA,IAEA,MAAAhU,GAGA,QAAA2b,IAAAzC,EAAAG,EAAAE,EAAAqC,GAIA,OAHAxC,GAAA,EACAyC,EAAA,EACAC,EAAA,GAAA3S,OAAAoQ,GACAzJ,EAAA,EAAAiM,EAAA,EAAArM,EAAA2J,EAAAja,OAAiD0Q,EAAAJ,EAAUI,IAAAiM,IAAA,GAC3D,GAAA/b,GAAAqZ,EAAAvJ,EACAnJ,UAAA3G,GAAA8P,IAAA8L,IACAxC,GAAA2C,EACAD,EAAAD,KAAA7b,GAGA,UAAAmZ,IAAAD,EAAAE,EAAA0C,GAGA,QAAAE,IAAA9C,EAAAG,EAAAD,EAAA6C,EAAAjc,GAGA,OAFAuZ,GAAA,EACA2C,EAAA,GAAA/S,OAAAgT,IACArM,EAAA,EAAoB,IAAAsJ,EAActJ,IAAAsJ,KAAA,EAClC8C,EAAApM,GAAA,EAAAsJ,EAAAC,EAAAE,KAAA5S,MAGA,OADAuV,GAAAD,GAAAjc,EACA,GAAAsZ,IAAAJ,EAAAK,EAAA,EAAA2C,GAGA,QAAAE,IAAAxZ,EAAAyZ,EAAAC,GAEA,OADAC,MACAzM,EAAA,EAAoBA,EAAAwM,EAAAld,OAAuB0Q,IAAA,CAC3C,GAAA5I,GAAAoV,EAAAxM,GACAE,EAAA/B,EAAA/G,EACA6G,GAAA7G,KACA8I,IAAApN,IAAA,SAAAsO,GAAsC,MAAAkD,GAAAlD,MAEtCqL,EAAA3a,KAAAoO,GAEA,MAAAwM,IAAA5Z,EAAAyZ,EAAAE,GAGA,QAAAE,IAAAC,EAAAxV,EAAAxJ,GACA,MAAAgf,MAAAC,WAAA5O,EAAA7G,GACAwV,EAAAC,UAAAzV,GACA4N,EAAA4H,EAAAxV,GAAAwV,EAAAxV,EAGA,QAAA0V,IAAAP,GACA,gBAAAK,EAAAxV,EAAAxJ,GACA,GAAAgf,KAAAG,eAAA9O,EAAA7G,GACA,MAAAwV,GAAAG,cAAAR,EAAAnV,EAEA,IAAA4V,GAAAT,EAAAK,EAAAxV,EAAAxJ,EACA,OAAAoX,GAAA4H,EAAAI,GAAAJ,EAAAI,GAIA,QAAAN,IAAAO,EAAAV,EAAAE,GAEA,MADAA,KAAA1Z,OAAA,SAAAoJ,GAAuC,WAAAA,EAAA7D,OACvC,IAAAmU,EAAAnd,OACA2d,EAEA,IAAAA,EAAA3U,MAAA2U,EAAAzC,WAAA,IAAAiC,EAAAnd,OAGA2d,EAAAjE,cAAA,SAAAiE,GAUA,OATAC,GAAAX,EACA,SAAAnV,EAAAxJ,GACAqf,EAAA7B,OAAAxd,EAAAmY,GAAA,SAAA6G,GACa,MAAAA,KAAA7G,GAAA3O,EAAAmV,EAAAK,EAAAxV,EAAAxJ,MAGb,SAAAwJ,EAAAxJ,GACAqf,EAAA9X,IAAAvH,EAAAwJ,IAEA4I,EAAA,EAAsBA,EAAAyM,EAAAnd,OAAmB0Q,IACzCyM,EAAAzM,GAAAzL,QAAA2Y,KAbAD,EAAAnS,YAAA2R,EAAA,IAkBA,QAAAU,IAAAP,EAAAQ,EAAAC,EAAAC,GACA,GAAAC,GAAAX,IAAA7G,GACAW,EAAA0G,EAAAnM,MACA,IAAAyF,EAAApF,KAAA,CACA,GAAAkM,GAAAD,EAAAF,EAAAT,EACAa,EAAAH,EAAAE,EACA,OAAAC,KAAAD,EAAAZ,EAAAa,EAEApH,EACAkH,GAAAX,KAAAzX,IACA,kBAEA,IAAAvH,GAAA8Y,EAAAtP,MACAsW,EAAAH,EAAAxH,GAAA6G,EAAA5T,IAAApL,EAAAmY,IACA4H,EAAAR,GACAO,EACAN,EACAC,EACAC,EAEA,OAAAK,KAAAD,EAAAd,EACAe,IAAA5H,GAAA6G,EAAAgB,OAAAhgB,IACA2f,EAAAzE,KAAA8D,GAAAzX,IAAAvH,EAAA+f,GAGA,QAAAE,IAAA1R,GAMA,MALAA,OAAA,aACAA,GAAA,UAAAA,OAAA,aACAA,QAAA,aACAA,MAAA,EACAA,MAAA,GACA,IAAAA,EAGA,QAAA2R,IAAApe,EAAAqe,EAAApU,EAAAqU,GACA,GAAA9T,GAAA8T,EAAAte,EAAAgQ,EAAAhQ,EAEA,OADAwK,GAAA6T,GAAApU,EACAO,EAGA,QAAA+T,IAAAve,EAAAqe,EAAApU,EAAAqU,GACA,GAAAE,GAAAxe,EAAAJ,OAAA,CACA,IAAA0e,GAAAD,EAAA,IAAAG,EAEA,MADAxe,GAAAqe,GAAApU,EACAjK,CAIA,QAFAwK,GAAA,GAAAb,OAAA6U,GACAC,EAAA,EACAnO,EAAA,EAAoBA,EAAAkO,EAAalO,IACjCA,IAAA+N,GACA7T,EAAA8F,GAAArG,EACAwU,GAAA,GAEAjU,EAAA8F,GAAAtQ,EAAAsQ,EAAAmO,EAGA,OAAAjU,GAGA,QAAAkU,IAAA1e,EAAAqe,EAAAC,GACA,GAAAE,GAAAxe,EAAAJ,OAAA,CACA,IAAA0e,GAAAD,IAAAG,EAEA,MADAxe,GAAA2e,MACA3e,CAIA,QAFAwK,GAAA,GAAAb,OAAA6U,GACAC,EAAA,EACAnO,EAAA,EAAoBA,EAAAkO,EAAalO,IACjCA,IAAA+N,IACAI,EAAA,GAEAjU,EAAA8F,GAAAtQ,EAAAsQ,EAAAmO,EAEA,OAAAjU,GAWA,QAAAtL,IAAAwI,GACA,GAAAkX,GAAAC,IACA,WAAAnX,GAAAP,SAAAO,EACA,MAAAkX,EAEA,IAAAE,GAAApX,GACA,MAAAA,EAEA,IAAA8I,GAAA5B,EAAAlH,GACAkB,EAAA4H,EAAA5H,IACA,YAAAA,EACAgW,GAEA1F,GAAAtQ,GACAA,EAAA,GAAAA,EAAA+T,GACAoC,GAAA,EAAAnW,EAAAqT,GAAA,QAAA+C,IAAAxO,EAAA/N,YAEAmc,EAAAtF,cAAA,SAAAjZ,GACAA,EAAA4e,QAAArW,GACA4H,EAAA3L,QAAA,SAAA6M,EAAA5R,GAAsC,MAAAO,GAAAoF,IAAA3F,EAAA4R,QA4JtC,QAAAoN,IAAAI,GACA,SAAAA,MAAAC,KAwBA,QAAAH,IAAAhf,EAAA0Z,GACAvc,KAAA6C,QACA7C,KAAAuc,UAmEA,QAAA0F,IAAA/e,EAAA8T,GAQA,QAAAkL,GAAA7e,EAAA8e,EAAArP,GACA,WAAAqP,EACAC,EAAA/e,EAAAyP,GACAuP,EAAAhf,EAAA8e,EAAArP,GAGA,QAAAsP,GAAA/e,EAAAyP,GACA,GAAAjQ,GAAAiQ,IAAAwP,EAAAC,KAAA1f,MAAAQ,KAAAR,MACAkE,EAAA+L,EAAA0P,EAAA,EAAAA,EAAA1P,EACA2P,EAAAC,EAAA5P,CAIA,OAHA2P,GAAAjD,KACAiD,EAAAjD,IAEA,WACA,GAAAzY,IAAA0b,EACA,MAAAE,GAEA,IAAAzB,GAAAlK,IAAAyL,EAAA1b,GACA,OAAAlE,MAAAqe,IAIA,QAAAmB,GAAAhf,EAAA8e,EAAArP,GACA,GAAAjG,GACAhK,EAAAQ,KAAAR,MACAkE,EAAA+L,EAAA0P,EAAA,EAAAA,EAAA1P,GAAAqP,EACAM,GAAAC,EAAA5P,GAAAqP,GAAA,CAIA,OAHAM,GAAAjD,KACAiD,EAAAjD,IAEA,WACA,QACA,GAAA3S,EAAA,CACA,GAAAtC,GAAAsC,GACA,IAAAtC,IAAAoY,GACA,MAAApY,EAEAsC,GAAA,KAEA,GAAA9F,IAAA0b,EACA,MAAAE,GAEA,IAAAzB,GAAAlK,IAAAyL,EAAA1b,GACA8F,GAAAqV,EACArf,KAAAqe,GAAAiB,EAAArD,GAAAhM,GAAAoO,GAAAiB,MAnDA,GAAAK,GAAAtf,EAAA0f,QACAF,EAAAxf,EAAA2f,UACAP,EAAAQ,GAAAJ,GACAH,EAAArf,EAAA6f,KAEA,OAAAb,GAAAhf,EAAAka,MAAAla,EAAA8f,OAAA,GAqDA,QAAApB,IAAAqB,EAAAC,EAAAf,EAAAziB,EAAA6iB,EAAAhG,EAAAnW,GACA,GAAAlD,GAAAlC,OAAAqL,OAAA8W,GAUA,OATAjgB,GAAAuI,KAAAyX,EAAAD,EACA/f,EAAA0f,QAAAK,EACA/f,EAAA2f,UAAAK,EACAhgB,EAAA8f,OAAAb,EACAjf,EAAAka,MAAA1d,EACAwD,EAAA6f,MAAAR,EACArf,EAAAya,UAAApB,EACArZ,EAAAsV,OAAApS,EACAlD,EAAA0a,WAAA,EACA1a,EAIA,QAAAwe,MACA,MAAA0B,SAAAxB,GAAA,IAAA9C,KAGA,QAAAuE,IAAAngB,EAAA4B,EAAAyF,GAGA,GAFAzF,EAAA0O,EAAAtQ,EAAA4B,GAEAA,MACA,MAAA5B,EAGA,IAAA4B,GAAA5B,EAAAuI,MAAA3G,EAAA,EACA,MAAA5B,GAAAiZ,cAAA,SAAAjZ,GACA4B,EAAA,EACAwe,GAAApgB,EAAA4B,GAAAwD,IAAA,EAAAiC,GACA+Y,GAAApgB,EAAA,EAAA4B,EAAA,GAAAwD,IAAAxD,EAAAyF,IAIAzF,IAAA5B,EAAA0f,OAEA,IAAAW,GAAArgB,EAAA6f,MACAhF,EAAA7a,EAAAka,MACAe,EAAA1L,EAAA2L,GAOA,OANAtZ,IAAAge,GAAA5f,EAAA2f,WACAU,EAAAC,GAAAD,EAAArgB,EAAAya,UAAA,EAAA7Y,EAAAyF,EAAA4T,GAEAJ,EAAAyF,GAAAzF,EAAA7a,EAAAya,UAAAza,EAAA8f,OAAAle,EAAAyF,EAAA4T,GAGAA,EAAA5T,MAIArH,EAAAya,WACAza,EAAAka,MAAAW,EACA7a,EAAA6f,MAAAQ,EACArgB,EAAAsV,OAAAxO,OACA9G,EAAA0a,WAAA,EACA1a,GAEA0e,GAAA1e,EAAA0f,QAAA1f,EAAA2f,UAAA3f,EAAA8f,OAAAjF,EAAAwF,GAVArgB,EAaA,QAAAsgB,IAAAngB,EAAAkZ,EAAA4F,EAAArd,EAAAyF,EAAA4T,GACA,GAAA+C,GAAApc,IAAAqd,EAAAvD,GACA6E,EAAApgB,GAAA6d,EAAA7d,EAAAR,MAAAJ,MACA,KAAAghB,GAAAzZ,SAAAO,EACA,MAAAlH,EAGA,IAAAqb,EAEA,IAAAyD,EAAA,GACA,GAAAuB,GAAArgB,KAAAR,MAAAqe,GACAyC,EAAAH,GAAAE,EAAAnH,EAAA4F,EAAArD,GAAAha,EAAAyF,EAAA4T,EACA,OAAAwF,KAAAD,EACArgB,GAEAqb,EAAAkF,GAAAvgB,EAAAkZ,GACAmC,EAAA7b,MAAAqe,GAAAyC,EACAjF,GAGA,MAAA+E,IAAApgB,EAAAR,MAAAqe,KAAA3W,EACAlH,GAGAsP,EAAAwL,GAEAO,EAAAkF,GAAAvgB,EAAAkZ,GACAvS,SAAAO,GAAA2W,IAAAxC,EAAA7b,MAAAJ,OAAA,EACAic,EAAA7b,MAAA2e,MAEA9C,EAAA7b,MAAAqe,GAAA3W,EAEAmU,GAGA,QAAAkF,IAAAvgB,EAAAkZ,GACA,MAAAA,IAAAlZ,GAAAkZ,IAAAlZ,EAAAkZ,QACAlZ,EAEA,GAAAwe,IAAAxe,IAAAR,MAAA0D,WAAAgW,GAGA,QAAAsH,IAAA3gB,EAAA4gB,GACA,GAAAA,GAAAhB,GAAA5f,EAAA2f,WACA,MAAA3f,GAAA6f,KAEA,IAAAe,EAAA,GAAA5gB,EAAA8f,OAAAlE,GAAA,CAGA,IAFA,GAAAzb,GAAAH,EAAAka,MACA+E,EAAAjf,EAAA8f,OACA3f,GAAA8e,EAAA,GACA9e,IAAAR,MAAAihB,IAAA3B,EAAAvD,IACAuD,GAAArD,EAEA,OAAAzb,IAIA,QAAAigB,IAAApgB,EAAA0Q,EAAAC,GAGA7J,SAAA4J,IACAA,GAAA,GAEA5J,SAAA6J,IACAA,GAAA,EAEA,IAAAkQ,GAAA7gB,EAAAya,WAAA,GAAA/K,GACAoR,EAAA9gB,EAAA0f,QACAqB,EAAA/gB,EAAA2f,UACAqB,EAAAF,EAAApQ,EACAuQ,EAAAna,SAAA6J,EAAAoQ,EAAApQ,EAAA,EAAAoQ,EAAApQ,EAAAmQ,EAAAnQ,CACA,IAAAqQ,IAAAF,GAAAG,IAAAF,EACA,MAAA/gB,EAIA,IAAAghB,GAAAC,EACA,MAAAjhB,GAAAkhB,OAQA,KALA,GAAAC,GAAAnhB,EAAA8f,OACAjF,EAAA7a,EAAAka,MAGAkH,EAAA,EACAJ,EAAAI,EAAA,GACAvG,EAAA,GAAA8D,IAAA9D,KAAAlb,MAAAJ,QAAAuH,OAAA+T,MAAAgG,GACAM,GAAAvF,GACAwF,GAAA,GAAAD,CAEAC,KACAJ,GAAAI,EACAN,GAAAM,EACAH,GAAAG,EACAL,GAAAK,EAOA,KAJA,GAAAC,GAAAzB,GAAAmB,GACAO,EAAA1B,GAAAqB,GAGAK,GAAA,GAAAH,EAAAvF,IACAf,EAAA,GAAA8D,IAAA9D,KAAAlb,MAAAJ,QAAAsb,MAAAgG,GACAM,GAAAvF,EAIA,IAAA2F,GAAAvhB,EAAA6f,MACAQ,EAAAiB,EAAAD,EACAV,GAAA3gB,EAAAihB,EAAA,GACAK,EAAAD,EAAA,GAAA1C,OAAAkC,GAAAU,CAGA,IAAAA,GAAAD,EAAAD,GAAAL,EAAAD,GAAAQ,EAAA5hB,MAAAJ,OAAA,CACAsb,EAAA6F,GAAA7F,EAAAgG,EAEA,QADA1gB,GAAA0a,EACAoE,EAAAkC,EAAgClC,EAAArD,GAAeqD,GAAArD,GAAA,CAC/C,GAAAoC,GAAAqD,IAAApC,EAAAvD,EACAvb,KAAAR,MAAAqe,GAAA0C,GAAAvgB,EAAAR,MAAAqe,GAAA6C,GAEA1gB,EAAAR,MAAA0hB,IAAAzF,GAAAF,IAAA6F,EASA,GALAN,EAAAF,IACAV,OAAAmB,YAAAX,EAAA,EAAAI,IAIAD,GAAAM,EACAN,GAAAM,EACAL,GAAAK,EACAH,EAAAvF,GACAf,EAAA,KACAwF,OAAAoB,aAAAZ,EAAA,EAAAG,OAGK,IAAAA,EAAAF,GAAAQ,EAAAD,EAAA,CAIL,IAHAD,EAAA,EAGAvG,GAAA,CACA,GAAA6G,GAAAV,IAAAG,EAAAzF,EACA,IAAAgG,IAAAJ,IAAAH,EAAAzF,GACA,KAEAgG,KACAN,IAAA,GAAAD,GAAAO,GAEAP,GAAAvF,GACAf,IAAAlb,MAAA+hB,GAIA7G,GAAAmG,EAAAF,IACAjG,IAAA4G,aAAAZ,EAAAM,EAAAH,EAAAI,IAEAvG,GAAAyG,EAAAD,IACAxG,IAAA2G,YAAAX,EAAAM,EAAAG,EAAAF,IAEAA,IACAJ,GAAAI,EACAH,GAAAG,GAIA,MAAAphB,GAAAya,WACAza,EAAAuI,KAAA0Y,EAAAD,EACAhhB,EAAA0f,QAAAsB,EACAhhB,EAAA2f,UAAAsB,EACAjhB,EAAA8f,OAAAqB,EACAnhB,EAAAka,MAAAW,EACA7a,EAAA6f,MAAAQ,EACArgB,EAAAsV,OAAAxO,OACA9G,EAAA0a,WAAA,EACA1a,GAEA0e,GAAAsC,EAAAC,EAAAE,EAAAtG,EAAAwF,GAGA,QAAAsB,IAAA3hB,EAAAwc,EAAAC,GAGA,OAFAC,MACAkF,EAAA,EACA3R,EAAA,EAAoBA,EAAAwM,EAAAld,OAAuB0Q,IAAA,CAC3C,GAAA5I,GAAAoV,EAAAxM,GACAE,EAAA5B,EAAAlH,EACA8I,GAAA5H,KAAAqZ,IACAA,EAAAzR,EAAA5H,MAEA2F,EAAA7G,KACA8I,IAAApN,IAAA,SAAAsO,GAAsC,MAAAkD,GAAAlD,MAEtCqL,EAAA3a,KAAAoO,GAKA,MAHAyR,GAAA5hB,EAAAuI,OACAvI,IAAA4e,QAAAgD,IAEAjF,GAAA3c,EAAAwc,EAAAE,GAGA,QAAAkD,IAAArX,GACA,MAAAA,GAAA+T,GAAA,EAAA/T,EAAA,IAAAqT,OAOA,QAAAiG,IAAAxa,GACA,cAAAA,GAAAP,SAAAO,EAAAya,KACAC,GAAA1a,KACAya,KAAA7I,cAAA,SAAAlW,GACA,GAAAoN,GAAA/B,EAAA/G,EACAwR,IAAA1I,EAAA5H,MACA4H,EAAA3L,QAAA,SAAA6M,EAAA1L,GAAwC,MAAA5C,GAAAqC,IAAAO,EAAA0L,OAyExC,QAAA0Q,IAAAC,GACA,MAAAhJ,IAAAgJ,IAAA5S,EAAA4S,GAUA,QAAAC,IAAAlf,EAAA/C,EAAAqZ,EAAAnW,GACA,GAAAgf,GAAApkB,OAAAqL,OAAA0Y,GAAA9jB,UAMA,OALAmkB,GAAA3Z,KAAAxF,IAAAwF,KAAA,EACA2Z,EAAAC,KAAApf,EACAmf,EAAAE,MAAApiB,EACAkiB,EAAAzH,UAAApB,EACA6I,EAAA5M,OAAApS,EACAgf,EAIA,QAAAJ,MACA,MAAAO,SAAAJ,GAAAlJ,KAAAyF,OAGA,QAAA8D,IAAAJ,EAAAvc,EAAA0L,GACA,GAIAkR,GACAzgB,EALAiB,EAAAmf,EAAAC,KACAniB,EAAAkiB,EAAAE,MACA3iB,EAAAsD,EAAAkG,IAAAtD,GACAoQ,EAAAjP,SAAArH,CAGA,IAAA4R,IAAA2E,GAAA,CACA,IAAAD,EACA,MAAAmM,EAEAliB,GAAAuI,MAAA+T,IAAAtc,EAAAuI,MAAA,EAAAxF,EAAAwF,MACAzG,EAAA9B,EAAAgD,OAAA,SAAAmR,EAAA6J,GAAqD,MAAAlX,UAAAqN,GAAA1U,IAAAue,IACrDuE,EAAAzgB,EAAAwQ,aAAAvP,IAAA,SAAAoR,GAA4D,MAAAA,GAAA,KAAgBqO,OAAAxN,QAC5EkN,EAAAzH,YACA8H,EAAA9H,UAAA3Y,EAAA2Y,UAAAyH,EAAAzH,aAGA8H,EAAAxf,EAAA8a,OAAAlY,GACA7D,EAAArC,IAAAO,EAAAuI,KAAA,EAAAvI,EAAAse,MAAAte,EAAAoF,IAAA3F,EAAAqH,aAGA,IAAAiP,EAAA,CACA,GAAA1E,IAAArR,EAAAiJ,IAAAxJ,GAAA,GACA,MAAAyiB,EAEAK,GAAAxf,EACAjB,EAAA9B,EAAAoF,IAAA3F,GAAAkG,EAAA0L,QAEAkR,GAAAxf,EAAAqC,IAAAO,EAAA3F,EAAAuI,MACAzG,EAAA9B,EAAAoF,IAAApF,EAAAuI,MAAA5C,EAAA0L,GAGA,OAAA6Q,GAAAzH,WACAyH,EAAA3Z,KAAAga,EAAAha,KACA2Z,EAAAC,KAAAI,EACAL,EAAAE,MAAAtgB,EACAogB,EAAA5M,OAAAxO,OACAob,GAEAD,GAAAM,EAAAzgB,GAIA,QAAA2gB,IAAAC,EAAA3O,GACAjX,KAAA6lB,MAAAD,EACA5lB,KAAA8lB,SAAA7O,EACAjX,KAAAyL,KAAAma,EAAAna,KA2DA,QAAAsa,IAAA1S,GACArT,KAAA6lB,MAAAxS,EACArT,KAAAyL,KAAA4H,EAAA5H,KAyBA,QAAAua,IAAA3S,GACArT,KAAA6lB,MAAAxS,EACArT,KAAAyL,KAAA4H,EAAA5H,KAuBA,QAAAwa,IAAAvN,GACA1Y,KAAA6lB,MAAAnN,EACA1Y,KAAAyL,KAAAiN,EAAAjN,KAwDA,QAAAya,IAAAlR,GACA,GAAAmR,GAAAC,GAAApR,EAiCA,OAhCAmR,GAAAN,MAAA7Q,EACAmR,EAAA1a,KAAAuJ,EAAAvJ,KACA0a,EAAAT,KAAA,WAAqC,MAAA1Q,IACrCmR,EAAAnP,QAAA,WACA,GAAAqP,GAAArR,EAAAgC,QAAApK,MAAA5M,KAEA,OADAqmB,GAAAX,KAAA,WAA2C,MAAA1Q,GAAAgC,WAC3CqP,GAEAF,EAAAlN,IAAA,SAAAlY,GAAuC,MAAAiU,GAAAsR,SAAAvlB,IACvColB,EAAAG,SAAA,SAAAvlB,GAA4C,MAAAiU,GAAAiE,IAAAlY,IAC5ColB,EAAAtN,YAAA0N,GACAJ,EAAA7O,kBAAA,SAAAzJ,EAAAmJ,GAA6D,GAAAwP,GAAAxmB,IAC7D,OAAAgV,GAAA1B,UAAA,SAAAiB,EAAA1L,GAAiD,MAAAgF,GAAAhF,EAAA0L,EAAAiS,MAAA,GAAkCxP,IAEnFmP,EAAA3O,mBAAA,SAAAlD,EAAA0C,GACA,GAAA1C,IAAAmS,GAAA,CACA,GAAAzY,GAAAgH,EAAA0R,WAAApS,EAAA0C,EACA,WAAA7C,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,KAAAyF,EAAApF,KAAA,CACA,GAAA5L,GAAAgR,EAAAtP,MAAA,EACAsP,GAAAtP,MAAA,GAAAsP,EAAAtP,MAAA,GACAsP,EAAAtP,MAAA,GAAA1B,EAEA,MAAAgR,KAGA,MAAA7E,GAAA0R,WACApS,IAAAqS,GAAAC,GAAAD,GACA3P,IAGAmP,EAIA,QAAAU,IAAA7R,EAAA8R,EAAAC,GACA,GAAAC,GAAAZ,GAAApR,EAgCA,OA/BAgS,GAAAvb,KAAAuJ,EAAAvJ,KACAub,EAAA/N,IAAA,SAAAlY,GAAyC,MAAAiU,GAAAiE,IAAAlY,IACzCimB,EAAA7a,IAAA,SAAApL,EAAAyf,GACA,GAAAjM,GAAAS,EAAA7I,IAAApL,EAAAmY,GACA,OAAA3E,KAAA2E,GACAsH,EACAsG,EAAAvmB,KAAAwmB,EAAAxS,EAAAxT,EAAAiU,IAEAgS,EAAA1P,kBAAA,SAAAzJ,EAAAmJ,GAA+D,GAAAwP,GAAAxmB,IAC/D,OAAAgV,GAAA1B,UACA,SAAAiB,EAAA1L,EAAApI,GAA4B,MAAAoN,GAAAiZ,EAAAvmB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,GAAAoI,EAAA2d,MAAA,GAC5BxP,IAGAgQ,EAAAxP,mBAAA,SAAAlD,EAAA0C,GACA,GAAAhJ,GAAAgH,EAAA0R,WAAAD,GAAAzP,EACA,WAAA7C,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,KACA,MAAAoF,EAEA,IAAAxC,GAAAwC,EAAAtP,MACAxJ,EAAAsW,EAAA,EACA,OAAAhD,GACAC,EACAvT,EACA+lB,EAAAvmB,KAAAwmB,EAAA1P,EAAA,GAAAtW,EAAAiU,GACA6E,MAIAmN,EAIA,QAAAC,IAAAjS,EAAAiC,GACA,GAAAoP,GAAAD,GAAApR,EAsBA,OArBAqR,GAAAR,MAAA7Q,EACAqR,EAAA5a,KAAAuJ,EAAAvJ,KACA4a,EAAArP,QAAA,WAA4C,MAAAhC,IAC5CA,EAAA0Q,OACAW,EAAAX,KAAA,WACA,GAAAS,GAAAD,GAAAlR,EAEA,OADAmR,GAAAnP,QAAA,WAA4C,MAAAhC,GAAA0Q,QAC5CS,IAGAE,EAAAla,IAAA,SAAApL,EAAAyf,GACO,MAAAxL,GAAA7I,IAAA8K,EAAAlW,GAAA,EAAAA,EAAAyf,IACP6F,EAAApN,IAAA,SAAAlY,GACO,MAAAiU,GAAAiE,IAAAhC,EAAAlW,GAAA,EAAAA,IACPslB,EAAAC,SAAA,SAAA/b,GAAkD,MAAAyK,GAAAsR,SAAA/b,IAClD8b,EAAAxN,YAAA0N,GACAF,EAAA/S,UAAA,SAAAzF,EAAAmJ,GAAyD,GAAAwP,GAAAxmB,IACzD,OAAAgV,GAAA1B,UAAA,SAAAiB,EAAA1L,GAAiD,MAAAgF,GAAA0G,EAAA1L,EAAA2d,KAAwBxP,IAEzEqP,EAAAK,WACA,SAAApS,EAAA0C,GAAgC,MAAAhC,GAAA0R,WAAApS,GAAA0C,IAChCqP,EAIA,QAAAa,IAAAlS,EAAAmS,EAAAJ,EAAA9P,GACA,GAAAmQ,GAAAhB,GAAApR,EAwCA,OAvCAiC,KACAmQ,EAAAnO,IAAA,SAAAlY,GACA,GAAAwT,GAAAS,EAAA7I,IAAApL,EAAAmY,GACA,OAAA3E,KAAA2E,MAAAiO,EAAA5mB,KAAAwmB,EAAAxS,EAAAxT,EAAAiU,IAEAoS,EAAAjb,IAAA,SAAApL,EAAAyf,GACA,GAAAjM,GAAAS,EAAA7I,IAAApL,EAAAmY,GACA,OAAA3E,KAAA2E,IAAAiO,EAAA5mB,KAAAwmB,EAAAxS,EAAAxT,EAAAiU,GACAT,EAAAiM,IAGA4G,EAAA9P,kBAAA,SAAAzJ,EAAAmJ,GAA+D,GAAAwP,GAAAxmB,KAC/DqnB,EAAA,CAOA,OANArS,GAAA1B,UAAA,SAAAiB,EAAA1L,EAAApI,GACA,GAAA0mB,EAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,GAEA,MADA4mB,KACAxZ,EAAA0G,EAAA0C,EAAApO,EAAAwe,EAAA,EAAAb,IAEOxP,GACPqQ,GAEAD,EAAA5P,mBAAA,SAAAlD,EAAA0C,GACA,GAAAhJ,GAAAgH,EAAA0R,WAAAD,GAAAzP,GACAqQ,EAAA,CACA,WAAAlT,GAAA,WACA,QACA,GAAA0F,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,KACA,MAAAoF,EAEA,IAAAxC,GAAAwC,EAAAtP,MACAxJ,EAAAsW,EAAA,GACA9M,EAAA8M,EAAA,EACA,IAAA8P,EAAA5mB,KAAAwmB,EAAAxc,EAAAxJ,EAAAiU,GACA,MAAAX,GAAAC,EAAA2C,EAAAlW,EAAAsmB,IAAA9c,EAAAsP,OAKAuN,EAIA,QAAAE,IAAAtS,EAAAuS,EAAAR,GACA,GAAAS,GAAAxL,KAAAyL,WAQA,OAPAzS,GAAA1B,UAAA,SAAAiB,EAAA1L,GACA2e,EAAAjJ,OACAgJ,EAAAhnB,KAAAwmB,EAAAxS,EAAA1L,EAAAmM,GACA,EACA,SAAAvF,GAAsB,MAAAA,GAAA,MAGtB+X,EAAAE,cAIA,QAAAC,IAAA3S,EAAAuS,EAAAR,GACA,GAAAa,GAAArW,EAAAyD,GACAwS,GAAAlV,EAAA0C,GAAA+P,KAAA/I,MAAAyL,WACAzS,GAAA1B,UAAA,SAAAiB,EAAA1L,GACA2e,EAAAjJ,OACAgJ,EAAAhnB,KAAAwmB,EAAAxS,EAAA1L,EAAAmM,GACA,SAAAvF,GAAsB,MAAAA,WAAAxK,KAAA2iB,GAAA/e,EAAA0L,MAAA9E,KAGtB,IAAAoY,GAAAC,GAAA9S,EACA,OAAAwS,GAAAvhB,IAAA,SAAAsH,GAAsC,MAAAwa,IAAA/S,EAAA6S,EAAAta,MAItC,QAAAya,IAAAhT,EAAApB,EAAAC,EAAAoD,GACA,GAAAgR,GAAAjT,EAAAvJ,IAeA,IAXAzB,SAAA4J,IACAA,GAAA,GAEA5J,SAAA6J,IACAA,IAAAyF,IACAzF,EAAAoU,EAEApU,GAAA,GAIAF,EAAAC,EAAAC,EAAAoU,GACA,MAAAjT,EAGA,IAAAkT,GAAApU,EAAAF,EAAAqU,GACAE,EAAAnU,EAAAH,EAAAoU,EAKA,IAAAC,OAAAC,MACA,MAAAH,IAAAhT,EAAAM,QAAAuD,cAAAjF,EAAAC,EAAAoD,EAOA,IACAmR,GADAC,EAAAF,EAAAD,CAEAG,SACAD,EAAAC,EAAA,IAAAA,EAGA,IAAAC,GAAAlC,GAAApR,EA6DA,OAzDAsT,GAAA7c,KAAA,IAAA2c,IAAApT,EAAAvJ,MAAA2c,GAAApe,QAEAiN,GAAAR,EAAAzB,IAAAoT,GAAA,IACAE,EAAAnc,IAAA,SAAArH,EAAA0b,GAEA,MADA1b,GAAA0O,EAAAxT,KAAA8E,GACAA,GAAA,GAAAA,EAAAsjB,EACApT,EAAA7I,IAAArH,EAAAojB,EAAA1H,GACAA,IAIA8H,EAAAhR,kBAAA,SAAAzJ,EAAAmJ,GAAwD,GAAAwP,GAAAxmB,IACxD,QAAAooB,EACA,QAEA,IAAApR,EACA,MAAAhX,MAAA6Y,cAAAvF,UAAAzF,EAAAmJ,EAEA,IAAAuR,GAAA,EACAC,GAAA,EACAnB,EAAA,CAQA,OAPArS,GAAA1B,UAAA,SAAAiB,EAAA1L,GACA,IAAA2f,OAAAD,IAAAL,GAEA,MADAb,KACAxZ,EAAA0G,EAAA0C,EAAApO,EAAAwe,EAAA,EAAAb,MAAA,GACAa,IAAAe,IAGAf,GAGAiB,EAAA9Q,mBAAA,SAAAlD,EAAA0C,GACA,OAAAoR,GAAApR,EACA,MAAAhX,MAAA6Y,cAAA6N,WAAApS,EAAA0C,EAGA,IAAAhJ,GAAA,IAAAoa,GAAApT,EAAA0R,WAAApS,EAAA0C,GACAuR,EAAA,EACAlB,EAAA,CACA,WAAAlT,GAAA,WACA,KAAAoU,IAAAL,GACAla,EAAAoG,MAEA,MAAAiT,EAAAe,EACA,MAAA1T,IAEA,IAAAmF,GAAA7L,EAAAoG,MACA,OAAA6C,IAAA3C,IAAAqS,GACA9M,EACSvF,IAAAsS,GACTvS,EAAAC,EAAA+S,EAAA,EAAArd,OAAA6P,GAEAxF,EAAAC,EAAA+S,EAAA,EAAAxN,EAAAtP,MAAA,GAAAsP,MAKAyO,EAIA,QAAAG,IAAAzT,EAAAmS,EAAAJ,GACA,GAAA2B,GAAAtC,GAAApR,EAoCA,OAnCA0T,GAAApR,kBAAA,SAAAzJ,EAAAmJ,GAA4D,GAAAwP,GAAAxmB,IAC5D,IAAAgX,EACA,MAAAhX,MAAA6Y,cAAAvF,UAAAzF,EAAAmJ,EAEA,IAAAqQ,GAAA,CAIA,OAHArS,GAAA1B,UAAA,SAAAiB,EAAA1L,EAAApI,GACS,MAAA0mB,GAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,MAAA4mB,GAAAxZ,EAAA0G,EAAA1L,EAAA2d,KAETa,GAEAqB,EAAAlR,mBAAA,SAAAlD,EAAA0C,GAA+D,GAAAwP,GAAAxmB,IAC/D,IAAAgX,EACA,MAAAhX,MAAA6Y,cAAA6N,WAAApS,EAAA0C,EAEA,IAAAhJ,GAAAgH,EAAA0R,WAAAD,GAAAzP,GACA2R,GAAA,CACA,WAAAxU,GAAA,WACA,IAAAwU,EACA,MAAAjU,IAEA,IAAAmF,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,KACA,MAAAoF,EAEA,IAAAxC,GAAAwC,EAAAtP,MACA1B,EAAAwO,EAAA,GACA9C,EAAA8C,EAAA,EACA,OAAA8P,GAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAA2d,GAIAlS,IAAAmS,GAAA5M,EACAxF,EAAAC,EAAAzL,EAAA0L,EAAAsF,IAJA8O,GAAA,EACAjU,QAMAgU,EAIA,QAAAE,IAAA5T,EAAAmS,EAAAJ,EAAA9P,GACA,GAAA4R,GAAAzC,GAAApR,EA4CA,OA3CA6T,GAAAvR,kBAAA,SAAAzJ,EAAAmJ,GAA6D,GAAAwP,GAAAxmB,IAC7D,IAAAgX,EACA,MAAAhX,MAAA6Y,cAAAvF,UAAAzF,EAAAmJ,EAEA,IAAAwR,IAAA,EACAnB,EAAA,CAOA,OANArS,GAAA1B,UAAA,SAAAiB,EAAA1L,EAAApI,GACA,IAAA+nB,OAAArB,EAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,IAEA,MADA4mB,KACAxZ,EAAA0G,EAAA0C,EAAApO,EAAAwe,EAAA,EAAAb,KAGAa,GAEAwB,EAAArR,mBAAA,SAAAlD,EAAA0C,GAA+D,GAAAwP,GAAAxmB,IAC/D,IAAAgX,EACA,MAAAhX,MAAA6Y,cAAA6N,WAAApS,EAAA0C,EAEA,IAAAhJ,GAAAgH,EAAA0R,WAAAD,GAAAzP,GACA8R,GAAA,EACAzB,EAAA,CACA,WAAAlT,GAAA,WACA,GAAA0F,GAAAhR,EAAA0L,CACA,IAEA,GADAsF,EAAA7L,EAAAoG,OACAyF,EAAApF,KACA,MAAAwC,IAAA3C,IAAAqS,GACA9M,EACavF,IAAAsS,GACbvS,EAAAC,EAAA+S,IAAArd,OAAA6P,GAEAxF,EAAAC,EAAA+S,IAAAxN,EAAAtP,MAAA,GAAAsP,EAGA,IAAAxC,GAAAwC,EAAAtP,KACA1B,GAAAwO,EAAA,GACA9C,EAAA8C,EAAA,GACAyR,MAAA3B,EAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAA2d,UACSsC,EACT,OAAAxU,KAAAmS,GAAA5M,EACAxF,EAAAC,EAAAzL,EAAA0L,EAAAsF,MAGAgP,EAIA,QAAAE,IAAA/T,EAAAnI,GACA,GAAAmc,GAAAzX,EAAAyD,GACA4K,GAAA5K,GAAA5K,OAAAyC,GAAA5G,IAAA,SAAAsO,GAQA,MAPAnD,GAAAmD,GAIOyU,IACPzU,EAAAjD,EAAAiD,IAJAA,EAAAyU,EACAtT,EAAAnB,GACAsB,EAAArJ,MAAAnE,QAAAkM,UAIAA,IACKrO,OAAA,SAAAqO,GAAuB,WAAAA,EAAA9I,MAE5B,QAAAmU,EAAAnd,OACA,MAAAuS,EAGA,QAAA4K,EAAAnd,OAAA,CACA,GAAAwmB,GAAArJ,EAAA,EACA,IAAAqJ,IAAAjU,GACAgU,GAAAzX,EAAA0X,IACAvX,EAAAsD,IAAAtD,EAAAuX,GACA,MAAAA,GAIA,GAAAC,GAAA,GAAAnT,GAAA6J,EAkBA,OAjBAoJ,GACAE,IAAA1T,aACK9D,EAAAsD,KACLkU,IAAApT,YAEAoT,IAAAC,SAAA,GACAD,EAAAzd,KAAAmU,EAAAlb,OACA,SAAA0kB,EAAAvS,GACA,GAAA7M,SAAAof,EAAA,CACA,GAAA3d,GAAAoL,EAAApL,IACA,IAAAzB,SAAAyB,EACA,MAAA2d,GAAA3d,IAIA,GAEAyd,EAIA,QAAAG,IAAArU,EAAAsU,EAAArS,GACA,GAAAsS,GAAAnD,GAAApR,EA0CA,OAzCAuU,GAAAjS,kBAAA,SAAAzJ,EAAAmJ,GAGA,QAAAwS,GAAAnW,EAAAoW,GAA6C,GAAAjD,GAAAxmB,IAC7CqT,GAAAC,UAAA,SAAAiB,EAAA1L,GAMA,QALAygB,GAAAG,EAAAH,IAAAlY,EAAAmD,GACAiV,EAAAjV,EAAAkV,EAAA,GACW5b,EAAA0G,EAAA0C,EAAApO,EAAAwe,IAAAb,MAAA,IACXkD,GAAA,IAEAA,GACS1S,GAVT,GAAAqQ,GAAA,EACAqC,GAAA,CAYA,OADAF,GAAAxU,EAAA,GACAqS,GAEAkC,EAAA/R,mBAAA,SAAAlD,EAAA0C,GACA,GAAAhJ,GAAAgH,EAAA0R,WAAApS,EAAA0C,GACA2S,KACAtC,EAAA,CACA,WAAAlT,GAAA,WACA,KAAAnG,GAAA,CACA,GAAA6L,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,QAAA,GAIA,GAAAF,GAAAsF,EAAAtP,KAIA,IAHA+J,IAAAmS,KACAlS,IAAA,IAEA+U,KAAAK,EAAAlnB,OAAA6mB,KAAAlY,EAAAmD,GAIA,MAAA0C,GAAA4C,EAAAxF,EAAAC,EAAA+S,IAAA9S,EAAAsF,EAHA8P,GAAA1kB,KAAA+I,GACAA,EAAAuG,EAAAmS,WAAApS,EAAA0C,OATAhJ,GAAA2b,EAAAnI,MAcA,MAAA9M,QAGA6U,EAIA,QAAAK,IAAA5U,EAAA8R,EAAAC,GACA,GAAAc,GAAAC,GAAA9S,EACA,OAAAA,GAAAM,QAAArP,IACA,SAAAsO,EAAA1L,GAAuB,MAAAgf,GAAAf,EAAAvmB,KAAAwmB,EAAAxS,EAAA1L,EAAAmM,MACvBmU,SAAA,GAIA,QAAAU,IAAA7U,EAAA8U,GACA,GAAAC,GAAA3D,GAAApR,EA2BA,OA1BA+U,GAAAte,KAAAuJ,EAAAvJ,MAAA,EAAAuJ,EAAAvJ,KAAA,EACAse,EAAAzS,kBAAA,SAAAzJ,EAAAmJ,GAAkE,GAAAwP,GAAAxmB,KAClEqnB,EAAA,CAMA,OALArS,GAAA1B,UAAA,SAAAiB,EAAA1L,GACS,QAAAwe,GAAAxZ,EAAAic,EAAAzC,IAAAb,MAAA,IACT3Y,EAAA0G,EAAA8S,IAAAb,MAAA,GACAxP,GAEAqQ,GAEA0C,EAAAvS,mBAAA,SAAAlD,EAAA0C,GACA,GAEA6C,GAFA7L,EAAAgH,EAAA0R,WAAAC,GAAA3P,GACAqQ,EAAA,CAEA,WAAAlT,GAAA,WACA,QAAA0F,GAAAwN,EAAA,KACAxN,EAAA7L,EAAAoG,OACAyF,EAAApF,MACAoF,EAGAwN,EAAA,EACAhT,EAAAC,EAAA+S,IAAAyC,GACAzV,EAAAC,EAAA+S,IAAAxN,EAAAtP,MAAAsP,MAGAkQ,EAIA,QAAAC,IAAAhV,EAAAiV,EAAAnD,GACAmD,IACAA,EAAAC,GAEA,IAAAlB,GAAAzX,EAAAyD,GACAlQ,EAAA,EACA4T,EAAA1D,EAAAM,QAAArP,IACA,SAAAsO,EAAA1L,GAAuB,OAAAA,EAAA0L,EAAAzP,IAAAgiB,IAAAvS,EAAA1L,EAAAmM,GAAAT,KACvBjP,SAMA,OALAoT,GAAAxI,KAAA,SAAAT,EAAAC,GAAkC,MAAAua,GAAAxa,EAAA,GAAAC,EAAA,KAAAD,EAAA,GAAAC,EAAA,KAA6ChI,QAC/EshB,EACA,SAAAzU,EAAA5R,GAAuB+V,EAAA/V,GAAAF,OAAA,GACvB,SAAA8R,EAAA5R,GAAuB+V,EAAA/V,GAAA4R,EAAA,KAEvByU,EAAAxX,EAAAkH,GACAhH,EAAAsD,GAAArD,EAAA+G,GACA5G,EAAA4G,GAIA,QAAAyR,IAAAnV,EAAAiV,EAAAnD,GAIA,GAHAmD,IACAA,EAAAC,IAEApD,EAAA,CACA,GAAAzP,GAAArC,EAAAM,QACArP,IAAA,SAAAsO,EAAA1L;AAA8B,OAAA0L,EAAAuS,EAAAvS,EAAA1L,EAAAmM,MAC9BtQ,OAAA,SAAA+K,EAAAC,GAAiC,MAAA0a,IAAAH,EAAAxa,EAAA,GAAAC,EAAA,IAAAA,EAAAD,GACjC,OAAA4H,MAAA,GAEA,MAAArC,GAAAtQ,OAAA,SAAA+K,EAAAC,GAA8C,MAAA0a,IAAAH,EAAAxa,EAAAC,KAAAD,IAI9C,QAAA2a,IAAAH,EAAAxa,EAAAC,GACA,GAAA2a,GAAAJ,EAAAva,EAAAD,EAGA,YAAA4a,GAAA3a,IAAAD,IAAAzF,SAAA0F,GAAA,OAAAA,WAAA2a,EAAA,EAIA,QAAAC,IAAAC,EAAAC,EAAA5K,GACA,GAAA6K,GAAArE,GAAAmE,EAkDA,OAjDAE,GAAAhf,KAAA,GAAAsK,GAAA6J,GAAA3Z,IAAA,SAAAtD,GAA6D,MAAAA,GAAA8I,OAAcyI,MAG3EuW,EAAAnX,UAAA,SAAAzF,EAAAmJ,GAiBA,IAHA,GACA6C,GADA7L,EAAAhO,KAAA0mB,WAAAC,GAAA3P,GAEAqQ,EAAA,IACAxN,EAAA7L,EAAAoG,QAAAK,MACA5G,EAAAgM,EAAAtP,MAAA8c,IAAArnB,SAAA,IAIA,MAAAqnB,IAEAoD,EAAAjT,mBAAA,SAAAlD,EAAA0C,GACA,GAAA0T,GAAA9K,EAAA3Z,IAAA,SAAAtD,GACS,MAAAA,GAAAwO,EAAAxO,GAAAoS,EAAAiC,EAAArU,EAAAqU,UAAArU,KAET0kB,EAAA,EACAsD,GAAA,CACA,WAAAxW,GAAA,WACA,GAAAyW,EAKA,OAJAD,KACAC,EAAAF,EAAAzkB,IAAA,SAAAtD,GAA8C,MAAAA,GAAAyR,SAC9CuW,EAAAC,EAAAC,KAAA,SAAAC,GAA4C,MAAAA,GAAArW,QAE5CkW,EACAjW,IAEAL,EACAC,EACA+S,IACAmD,EAAA5d,MAAA,KAAAge,EAAA3kB,IAAA,SAAA6kB,GAAqD,MAAAA,GAAAvgB,aAIrDkgB,EAMA,QAAA1C,IAAA1U,EAAAwD,GACA,MAAAJ,GAAApD,GAAAwD,EAAAxD,EAAApF,YAAA4I,GAGA,QAAAkU,IAAA1T,GACA,GAAAA,IAAArW,OAAAqW,GACA,SAAA9V,WAAA,0BAAA8V,GAIA,QAAA2T,IAAA3X,GAEA,MADA0I,IAAA1I,EAAA5H,MACA2H,EAAAC,GAGA,QAAAyU,IAAA9S,GACA,MAAAzD,GAAAyD,GAAA1D,EACAI,EAAAsD,GAAAvD,EACAG,EAGA,QAAAwU,IAAApR,GACA,MAAAhU,QAAAqL,QAEAkF,EAAAyD,GAAAxD,EACAE,EAAAsD,GAAArD,EACAG,GACA7Q,WAIA,QAAAslB,MACA,MAAAvmB,MAAA6lB,MAAAhN,aACA7Y,KAAA6lB,MAAAhN,cACA7Y,KAAAyL,KAAAzL,KAAA6lB,MAAApa,KACAzL,MAEAqR,EAAApQ,UAAA4X,YAAAtY,KAAAP,MAIA,QAAAkqB,IAAAza,EAAAC,GACA,MAAAD,GAAAC,EAAA,EAAAD,EAAAC,GAAA,IAGA,QAAAub,IAAAC,GACA,GAAA7X,GAAA0B,EAAAmW,EACA,KAAA7X,EAAA,CAGA,IAAA+B,EAAA8V,GACA,SAAA3pB,WAAA,oCAAA2pB,EAEA7X,GAAA0B,EAAA5D,EAAA+Z,IAEA,MAAA7X,GAKA,QAAA8X,IAAAC,EAAAC,GACA,GAAAC,GAEAC,EAAA,SAAA1e,GACA,GAAAA,YAAA0e,GACA,MAAA1e,EAEA,MAAA7M,eAAAurB,IACA,UAAAA,GAAA1e,EAEA,KAAAye,EAAA,CACAA,GAAA,CACA,IAAA7mB,GAAAzD,OAAAyD,KAAA2mB,EACAI,IAAAC,EAAAhnB,GACAgnB,EAAAhgB,KAAAhH,EAAAhC,OACAgpB,EAAAC,MAAAL,EACAI,EAAAtV,MAAA1R,EACAgnB,EAAAE,eAAAP,EAEAprB,KAAAqlB,KAAArJ,GAAAnP,IAGA4e,EAAAF,EAAAtqB,UAAAD,OAAAqL,OAAAuf,GAGA,OAFAH,GAAAxd,YAAAsd,EAEAA,EAwGA,QAAAM,IAAAC,EAAA7lB,EAAAsW,GACA,GAAAwP,GAAA/qB,OAAAqL,OAAArL,OAAAgrB,eAAAF,GAGA,OAFAC,GAAA1G,KAAApf,EACA8lB,EAAApO,UAAApB,EACAwP,EAGA,QAAAE,IAAAF,GACA,MAAAA,GAAAL,OAAAK,EAAA9d,YAAAod,MAAA,SAGA,QAAAG,IAAAvqB,EAAAirB,GACA,IACAA,EAAAxkB,QAAAykB,GAAAC,KAAApiB,OAAA/I,IACK,MAAAyY,KAKL,QAAAyS,IAAAlrB,EAAAoqB,GACArqB,OAAAsI,eAAArI,EAAAoqB,GACAlf,IAAA,WACA,MAAAnM,MAAAmM,IAAAkf,IAEA/iB,IAAA,SAAAiC,GACAiP,EAAAxZ,KAAA2d,UAAA,sCACA3d,KAAAsI,IAAA+iB,EAAA9gB,MASA,QAAA8hB,IAAA9hB,GACA,cAAAA,GAAAP,SAAAO,EAAA+hB,KACAC,GAAAhiB,KAAA+H,EAAA/H,KACA+hB,KAAAnQ,cAAA,SAAA7T,GACA,GAAA+K,GAAAzB,EAAArH,EACAwR,IAAA1I,EAAA5H,MACA4H,EAAA3L,QAAA,SAAA6M,GAAqC,MAAAjM,GAAAkkB,IAAAjY,OA+HrC,QAAAgY,IAAAE,GACA,SAAAA,MAAAC,KAmBA,QAAAC,IAAArkB,EAAAmd,GACA,MAAAnd,GAAAqV,WACArV,EAAAmD,KAAAga,EAAAha,KACAnD,EAAA+c,KAAAI,EACAnd,GAEAmd,IAAAnd,EAAA+c,KAAA/c,EACA,IAAAmd,EAAAha,KAAAnD,EAAAskB,UACAtkB,EAAAukB,OAAApH,GAGA,QAAAqH,IAAA7mB,EAAAsW,GACA,GAAAjU,GAAAtH,OAAAqL,OAAA0gB,GAIA,OAHAzkB,GAAAmD,KAAAxF,IAAAwF,KAAA,EACAnD,EAAA+c,KAAApf,EACAqC,EAAAqV,UAAApB,EACAjU,EAIA,QAAAgkB,MACA,MAAAU,SAAAF,GAAA7Q,OAOA,QAAAgR,IAAA1iB,GACA,cAAAA,GAAAP,SAAAO,EAAA2iB,KACAC,GAAA5iB,KACA2iB,KAAA/Q,cAAA,SAAA7T,GACA,GAAA+K,GAAAzB,EAAArH,EACAwR,IAAA1I,EAAA5H,MACA4H,EAAA3L,QAAA,SAAA6M,GAAqC,MAAAjM,GAAAkkB,IAAAjY,OAiBrC,QAAA4Y,IAAAC,GACA,MAAAb,IAAAa,IAAA9a,EAAA8a,GAWA,QAAAC,IAAApnB,EAAAsW,GACA,GAAAjU,GAAAtH,OAAAqL,OAAAihB,GAIA,OAHAhlB,GAAAmD,KAAAxF,IAAAwF,KAAA,EACAnD,EAAA+c,KAAApf,EACAqC,EAAAqV,UAAApB,EACAjU,EAIA,QAAA4kB,MACA,MAAAK,SAAAF,GAAArI,OAOA,QAAAwI,IAAAjjB,GACA,cAAAA,GAAAP,SAAAO,EAAAkjB,KACAC,GAAAnjB,KACAkjB,KAAAE,WAAApjB,GAkLA,QAAAmjB,IAAAE,GACA,SAAAA,MAAAC,KAeA,QAAAC,IAAAriB,EAAAsiB,EAAAxR,EAAAnW,GACA,GAAAH,GAAAjF,OAAAqL,OAAA2hB,GAMA,OALA/nB,GAAAwF,OACAxF,EAAAgoB,MAAAF,EACA9nB,EAAA0X,UAAApB,EACAtW,EAAAuS,OAAApS,EACAH,EAAA2X,WAAA,EACA3X,EAIA,QAAAwnB,MACA,MAAAS,SAAAJ,GAAA,IAMA,QAAAK,IAAAld,EAAAmd,GACA,GAAAC,GAAA,SAAAttB,GAAoCkQ,EAAAhQ,UAAAF,GAAAqtB,EAAArtB,GAIpC,OAHAC,QAAAyD,KAAA2pB,GAAA1mB,QAAA2mB,GACArtB,OAAAstB,uBACAttB,OAAAstB,sBAAAF,GAAA1mB,QAAA2mB,GACApd,EAioBA,QAAAsd,IAAAha,EAAA1L,GACA,MAAAA,GAGA,QAAA2lB,IAAAja,EAAA1L,GACA,OAAAA,EAAA0L,GAGA,QAAAjG,IAAA6Y,GACA,kBACA,OAAAA,EAAAva,MAAA5M,KAAA+J,YAIA,QAAA0kB,IAAAtH,GACA,kBACA,OAAAA,EAAAva,MAAA5M,KAAA+J,YAIA,QAAA2kB,IAAAnkB,GACA,sBAAAA,GAAAokB,KAAAC,UAAArkB,GAAAskB,OAAAtkB,GAGA,QAAAukB,MACA,MAAAjc,GAAA9I,WAGA,QAAAglB,IAAAtf,EAAAC,GACA,MAAAD,GAAAC,EAAA,EAAAD,EAAAC,GAAA,IAGA,QAAAsf,IAAAha,GACA,GAAAA,EAAAvJ,OAAA6N,IACA,QAEA,IAAA2V,GAAA3c,EAAA0C,GACAka,EAAA3d,EAAAyD,GACA2F,EAAAsU,EAAA,IACAxjB,EAAAuJ,EAAA1B,UACA4b,EACAD,EACA,SAAA1a,EAAA1L,GAA2B8R,EAAA,GAAAA,EAAAwU,GAAA/oB,GAAAmO,GAAAnO,GAAAyC,IAAA,GAC3B,SAAA0L,EAAA1L,GAA2B8R,IAAAwU,GAAA/oB,GAAAmO,GAAAnO,GAAAyC,IAAA,GAC3BomB,EACA,SAAA1a,GAAwBoG,EAAA,GAAAA,EAAAvU,GAAAmO,GAAA,GACxB,SAAAA,GAAwBoG,IAAAvU,GAAAmO,GAAA,GAExB,OAAA6a,IAAA3jB,EAAAkP,GAGA,QAAAyU,IAAA3jB,EAAAkP,GAQA,MAPAA,GAAA0U,GAAA1U,EAAA,YACAA,EAAA0U,GAAA1U,GAAA,GAAAA,KAAA,cACAA,EAAA0U,GAAA1U,GAAA,GAAAA,KAAA,MACAA,KAAA,cAAAlP,EACAkP,EAAA0U,GAAA1U,MAAA,eACAA,EAAA0U,GAAA1U,MAAA,eACAA,EAAAH,GAAAG,MAAA,IAIA,QAAAwU,IAAA1f,EAAAC,GACA,MAAAD,GAAAC,EAAA,YAAAD,GAAA,IAAAA,GAAA,KA10JmC,GAAA6f,IAAA9iB,MAAAvL,UAAAsF,KAcnCyK,GAAAM,EAAAH,GAMAH,EAAAS,EAAAN,GAMAH,EAAAY,EAAAT,GA2BAA,EAAAC,aACAD,EAAAI,UACAJ,EAAAO,YACAP,EAAAU,gBACAV,EAAAmB,YAEAnB,EAAAoe,MAAAje,EACAH,EAAAqe,QAAA/d,EACAN,EAAAkb,IAAAza,CAGA,IAAAI,IAAA,6BACAE,GAAA,0BACAE,GAAA,4BACAI,GAAA,4BAGAid,GAAA,SAGA3Q,GAAA,EACAU,GAAA,GAAAV,GACAF,GAAAY,GAAA,EAIAtG,MAGAgF,IAAuB3T,OAAA,GACvB6T,IAAmB7T,OAAA,GAiFnBqc,GAAA,EACAD,GAAA,EACAF,GAAA,EAEAvR,GAAA,kBAAAnH,gBAAAC,SACAmH,GAAA,aAEAua,GAAAxa,IAAAC,EAOAhB,GAAAlT,UAAAyP,SAAA,WACA,oBAIAyD,EAAAwb,KAAA/I,GACAzS,EAAAyb,OAAAjJ,GACAxS,EAAA0b,QAAApJ,GAEAtS,EAAAlT,UAAA6uB,QACA3b,EAAAlT,UAAA8uB,SAAA,WAA6C,MAAA/vB,MAAA0Q,YAC7CyD,EAAAlT,UAAAyuB,IAAA,WACA,MAAA1vB,OA2CAgR,EAAAK,EAAAF,GAMAE,EAAA2e,GAAA,WACA,MAAA3e,GAAAtH,YAGAsH,EAAApQ,UAAAqU,MAAA,WACA,MAAAtV,OAGAqR,EAAApQ,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,QAAmC,MAGnC5e,EAAApQ,UAAA4X,YAAA,WAKA,OAJA7Y,KAAAmX,QAAAnX,KAAAsX,oBACAtX,KAAAmX,OAAAnX,KAAA2V,WAAArQ,UACAtF,KAAAyL,KAAAzL,KAAAmX,OAAA1U,QAEAzC,MAKAqR,EAAApQ,UAAAqS,UAAA,SAAAzF,EAAAmJ,GACA,MAAAD,GAAA/W,KAAA6N,EAAAmJ,GAAA,IAKA3F,EAAApQ,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,MAAAO,GAAAvX,KAAAsU,EAAA0C,GAAA,IAKAhG,EAAAQ,EAAAH,GASAG,EAAAvQ,UAAAuU,WAAA,WACA,MAAAxV,OAKAgR,EAAAW,EAAAN,GAOAM,EAAAqe,GAAA,WACA,MAAAre,GAAA5H,YAGA4H,EAAA1Q,UAAA2U,aAAA,WACA,MAAA5V,OAGA2R,EAAA1Q,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,cAGAte,EAAA1Q,UAAAqS,UAAA,SAAAzF,EAAAmJ,GACA,MAAAD,GAAA/W,KAAA6N,EAAAmJ,GAAA,IAGArF,EAAA1Q,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,MAAAO,GAAAvX,KAAAsU,EAAA0C,GAAA,IAKAhG,EAAAc,EAAAT,GASAS,EAAAke,GAAA,WACA,MAAAle,GAAA/H,YAGA+H,EAAA7Q,UAAA6U,SAAA,WACA,MAAA9V,OAKAqR,EAAAoF,QACApF,EAAAke,MAAA/d,EACAH,EAAAgb,IAAAva,EACAT,EAAAme,QAAA7d,CAEA,IAAAgF,IAAA,uBAEAtF,GAAApQ,UAAA0V,KAAA,EAIA3F,EAAA+E,EAAApE,GAMAoE,EAAA9U,UAAAkL,IAAA,SAAArH,EAAA0b,GACA,MAAAxgB,MAAAiZ,IAAAnU,GAAA9E,KAAAgW,OAAAxC,EAAAxT,KAAA8E,IAAA0b,GAGAzK,EAAA9U,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAGA,OAFAnU,GAAA7C,KAAAgW,OACAoB,EAAAvU,EAAAJ,OAAA,EACA0Q,EAAA,EAAsBA,GAAAiE,EAAgBjE,IACtC,GAAAtF,EAAAhL,EAAAmU,EAAAI,EAAAjE,OAAAnT,SAAA,EACA,MAAAmT,GAAA,CAGA,OAAAA,IAGA4C,EAAA9U,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAnU,GAAA7C,KAAAgW,OACAoB,EAAAvU,EAAAJ,OAAA,EACA0Q,EAAA,CACA,WAAAgB,GAAA,WACS,MAAAhB,GAAAiE,EACT1C,IACAL,EAAAC,EAAAnB,EAAAtQ,EAAAmU,EAAAI,EAAAjE,aAMAnC,EAAAiF,EAAAzE,GAQAyE,EAAAhV,UAAAkL,IAAA,SAAApL,EAAAyf,GACA,MAAAxW,UAAAwW,GAAAxgB,KAAAiZ,IAAAlY,GAGAf,KAAAkW,QAAAnV,GAFAyf,GAKAvK,EAAAhV,UAAAgY,IAAA,SAAAlY,GACA,MAAAf,MAAAkW,QAAAhV,eAAAH,IAGAkV,EAAAhV,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAIA,OAHAvG,GAAAzQ,KAAAkW,QACAzR,EAAAzE,KAAAmW,MACAiB,EAAA3S,EAAAhC,OAAA,EACA0Q,EAAA,EAAsBA,GAAAiE,EAAgBjE,IAAA,CACtC,GAAApS,GAAA0D,EAAAuS,EAAAI,EAAAjE,IACA,IAAAtF,EAAA4C,EAAA1P,KAAAf,SAAA,EACA,MAAAmT,GAAA,EAGA,MAAAA,IAGA8C,EAAAhV,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAvG,GAAAzQ,KAAAkW,QACAzR,EAAAzE,KAAAmW,MACAiB,EAAA3S,EAAAhC,OAAA,EACA0Q,EAAA,CACA,WAAAgB,GAAA,WACA,GAAApT,GAAA0D,EAAAuS,EAAAI,EAAAjE,IACA,OAAAA,KAAAiE,EACA1C,IACAL,EAAAC,EAAAvT,EAAA0P,EAAA1P,OAIAkV,EAAAhV,UAAAuR,KAAA,EAGAxB,EAAAoF,EAAAzE,GAMAyE,EAAAnV,UAAAqW,kBAAA,SAAAzJ,EAAAmJ,GACA,GAAAA,EACA,MAAAhX,MAAA6Y,cAAAvF,UAAAzF,EAAAmJ,EAEA,IAAAhC,GAAAhV,KAAAqW,UACArI,EAAA+G,EAAAC,GACAqS,EAAA,CACA,IAAAxS,EAAA7G,GAEA,IADA,GAAA6L,KACAA,EAAA7L,EAAAoG,QAAAK,MACA5G,EAAAgM,EAAAtP,MAAA8c,IAAArnB,SAAA,IAKA,MAAAqnB,IAGAjR,EAAAnV,UAAAuW,mBAAA,SAAAlD,EAAA0C,GACA,GAAAA,EACA,MAAAhX,MAAA6Y,cAAA6N,WAAApS,EAAA0C,EAEA,IAAAhC,GAAAhV,KAAAqW,UACArI,EAAA+G,EAAAC,EACA,KAAAH,EAAA7G,GACA,UAAAmG,GAAAO,EAEA,IAAA2S,GAAA,CACA,WAAAlT,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,OAAAyF,GAAApF,KAAAoF,EAAAxF,EAAAC,EAAA+S,IAAAxN,EAAAtP,UAMAyG,EAAAsF,EAAA3E,GAMA2E,EAAArV,UAAAqW,kBAAA,SAAAzJ,EAAAmJ,GACA,GAAAA,EACA,MAAAhX,MAAA6Y,cAAAvF,UAAAzF,EAAAmJ,EAKA,KAHA,GAAAhJ,GAAAhO,KAAAuW,UACAW,EAAAlX,KAAAwW,eACA6Q,EAAA,EACAA,EAAAnQ,EAAAzU,QACA,GAAAoL,EAAAqJ,EAAAmQ,OAAArnB,SAAA,EACA,MAAAqnB,EAIA,KADA,GAAAxN,KACAA,EAAA7L,EAAAoG,QAAAK,MAAA,CACA,GAAA3H,GAAA+M,EAAAtP,KAEA,IADA2M,EAAAmQ,GAAAva,EACAe,EAAAf,EAAAua,IAAArnB,SAAA,EACA,MAGA,MAAAqnB,IAGA/Q,EAAArV,UAAAuW,mBAAA,SAAAlD,EAAA0C,GACA,GAAAA,EACA,MAAAhX,MAAA6Y,cAAA6N,WAAApS,EAAA0C,EAEA,IAAAhJ,GAAAhO,KAAAuW,UACAW,EAAAlX,KAAAwW,eACA6Q,EAAA,CACA,WAAAlT,GAAA,WACA,GAAAkT,GAAAnQ,EAAAzU,OAAA,CACA,GAAAoX,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,KACA,MAAAoF,EAEA3C,GAAAmQ,GAAAxN,EAAAtP,MAEA,MAAA8J,GAAAC,EAAA+S,EAAAnQ,EAAAmQ,QAaA,IAAAzQ,GAyPA5F,GAAAmI,EAAAxH,GAgBAwH,EAAAlY,UAAAyP,SAAA,WACA,WAAA1Q,KAAAyL,KACA,YAEA,YAAAzL,KAAAqZ,OAAA,IAAArZ,KAAAyL,KAAA,YAGA0N,EAAAlY,UAAAkL,IAAA,SAAArH,EAAA0b,GACA,MAAAxgB,MAAAiZ,IAAAnU,GAAA9E,KAAAqZ,OAAAmH,GAGArH,EAAAlY,UAAAqlB,SAAA,SAAA4J,GACA,MAAA/X,GAAAnY,KAAAqZ,OAAA6W,IAGA/W,EAAAlY,UAAAsF,MAAA,SAAAqN,EAAAC,GACA,GAAApI,GAAAzL,KAAAyL,IACA,OAAAkI,GAAAC,EAAAC,EAAApI,GAAAzL,KACA,GAAAmZ,GAAAnZ,KAAAqZ,OAAArF,EAAAH,EAAApI,GAAAqI,EAAAF,EAAAnI,KAGA0N,EAAAlY,UAAA+V,QAAA,WACA,MAAAhX,OAGAmZ,EAAAlY,UAAA8L,QAAA,SAAAmjB,GACA,MAAA/X,GAAAnY,KAAAqZ,OAAA6W,GACA,GAEA,GAGA/W,EAAAlY,UAAA2F,YAAA,SAAAspB,GACA,MAAA/X,GAAAnY,KAAAqZ,OAAA6W,GACAlwB,KAAAyL,MAEA,GAGA0N,EAAAlY,UAAAqS,UAAA,SAAAzF,EAAAmJ,GACA,OAAA7D,GAAA,EAAsBA,EAAAnT,KAAAyL,KAAgB0H,IACtC,GAAAtF,EAAA7N,KAAAqZ,OAAAlG,EAAAnT,SAAA,EACA,MAAAmT,GAAA,CAGA,OAAAA,IAGAgG,EAAAlY,UAAAylB,WAAA,SAAApS,EAAA0C,GAA2D,GAAAwP,GAAAxmB,KAC3DmT,EAAA,CACA,WAAAgB,GAAA,WACS,MAAAhB,GAAAqT,EAAA/a,KAAA4I,EAAAC,EAAAnB,IAAAqT,EAAAnN,QAAA3E,OAITyE,EAAAlY,UAAAsX,OAAA,SAAA4X,GACA,MAAAA,aAAAhX,GACAhB,EAAAnY,KAAAqZ,OAAA8W,EAAA9W,QACAnL,EAAAiiB,GAIA,IAAA5W,GAMAvI,GAAA2I,EAAAhI,GA2BAgI,EAAA1Y,UAAAyP,SAAA,WACA,WAAA1Q,KAAAyL,KACA,WAEA,WACAzL,KAAA+Z,OAAA,MAAA/Z,KAAAga,MACA,IAAAha,KAAAia,MAAA,OAAAja,KAAAia,MAAA,IACA,MAGAN,EAAA1Y,UAAAkL,IAAA,SAAArH,EAAA0b,GACA,MAAAxgB,MAAAiZ,IAAAnU,GACA9E,KAAA+Z,OAAAvG,EAAAxT,KAAA8E,GAAA9E,KAAAia,MACAuG,GAGA7G,EAAA1Y,UAAAqlB,SAAA,SAAA4J,GACA,GAAAE,IAAAF,EAAAlwB,KAAA+Z,QAAA/Z,KAAAia,KACA,OAAAmW,IAAA,GACAA,EAAApwB,KAAAyL,MACA2kB,IAAApd,KAAAqd,MAAAD,IAGAzW,EAAA1Y,UAAAsF,MAAA,SAAAqN,EAAAC,GACA,MAAAF,GAAAC,EAAAC,EAAA7T,KAAAyL,MACAzL,MAEA4T,EAAAE,EAAAF,EAAA5T,KAAAyL,MACAoI,EAAAG,EAAAH,EAAA7T,KAAAyL,MACAoI,GAAAD,EACA,GAAA+F,GAAA,KAEA,GAAAA,GAAA3Z,KAAAmM,IAAAyH,EAAA5T,KAAAga,MAAAha,KAAAmM,IAAA0H,EAAA7T,KAAAga,MAAAha,KAAAia,SAGAN,EAAA1Y,UAAA8L,QAAA,SAAAmjB,GACA,GAAAI,GAAAJ,EAAAlwB,KAAA+Z,MACA,IAAAuW,EAAAtwB,KAAAia,QAAA,GACA,GAAAnV,GAAAwrB,EAAAtwB,KAAAia,KACA,IAAAnV,GAAA,GAAAA,EAAA9E,KAAAyL,KACA,MAAA3G,GAGA,UAGA6U,EAAA1Y,UAAA2F,YAAA,SAAAspB,GACA,MAAAlwB,MAAA+M,QAAAmjB,IAGAvW,EAAA1Y,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAIA,OAHAI,GAAApX,KAAAyL,KAAA,EACAoO,EAAA7Z,KAAAia,MACA1P,EAAAyM,EAAAhX,KAAA+Z,OAAA3C,EAAAyC,EAAA7Z,KAAA+Z,OACA5G,EAAA,EAAsBA,GAAAiE,EAAgBjE,IAAA,CACtC,GAAAtF,EAAAtD,EAAA4I,EAAAnT,SAAA,EACA,MAAAmT,GAAA,CAEA5I,IAAAyM,GAAA6C,IAEA,MAAA1G,IAGAwG,EAAA1Y,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAI,GAAApX,KAAAyL,KAAA,EACAoO,EAAA7Z,KAAAia,MACA1P,EAAAyM,EAAAhX,KAAA+Z,OAAA3C,EAAAyC,EAAA7Z,KAAA+Z,OACA5G,EAAA,CACA,WAAAgB,GAAA,WACA,GAAAI,GAAAhK,CAEA,OADAA,IAAAyM,GAAA6C,IACA1G,EAAAiE,EAAA1C,IAAAL,EAAAC,EAAAnB,IAAAoB,MAIAoF,EAAA1Y,UAAAsX,OAAA,SAAA4X,GACA,MAAAA,aAAAxW,GACA3Z,KAAA+Z,SAAAoW,EAAApW,QACA/Z,KAAAga,OAAAmW,EAAAnW,MACAha,KAAAia,QAAAkW,EAAAlW,MACA/L,EAAAlO,KAAAmwB,GAIA,IAAAhW,GAEAnJ,GAAAoJ,GAAAjJ,GAMAH,EAAAqJ,GAAAD,IAEApJ,EAAAsJ,GAAAF,IAEApJ,EAAAuJ,GAAAH,IAGAA,GAAAmV,MAAAlV,GACAD,GAAAoV,QAAAlV,GACAF,GAAAiS,IAAA9R,EAEA,IAyLAe,IAzLA+T,GACA,kBAAArc,MAAAqc,MAAArc,KAAAqc,KAAA,mBACArc,KAAAqc,KACA,SAAA5f,EAAAC,GACAD,GAAA,EACAC,GAAA,CACA,IAAAjP,GAAA,MAAAgP,EACA8gB,EAAA,MAAA7gB,CAEA,OAAAjP,GAAA8vB,IAAA9gB,IAAA,IAAA8gB,EAAA9vB,GAAAiP,IAAA,gBAqJAiM,GAAA3a,OAAA2a,aAGAH,GAAA,WACA,IAEA,MADAxa,QAAAsI,kBAA8B,SAC9B,EACK,MAAA2G,GACL,aAkBAoL,GAAA,kBAAAmV,QAEAnV,MACAC,GAAA,GAAAkV,SAGA,IAAA9U,IAAA,EAEAH,GAAA,mBACA,mBAAAxN,UACAwN,GAAAxN,OAAAwN,IAGA,IAAAX,IAAA,GACAO,GAAA,IACAD,GAAA,EACAD,KASAjK,GAAAgL,GAAA3B,IAcA2B,GAAAgU,GAAA,WAAyB,GAAAS,GAAAnB,GAAA/uB,KAAAwJ,UAAA,EACzB,OAAAkS,MAAAE,cAAA,SAAAlW,GACA,OAAAtD,GAAA,EAAuBA,EAAA8tB,EAAAhuB,OAAsBE,GAAA,GAC7C,GAAAA,EAAA,GAAA8tB,EAAAhuB,OACA,SAAAyB,OAAA,0BAAAusB,EAAA9tB,GAEAsD,GAAAqC,IAAAmoB,EAAA9tB,GAAA8tB,EAAA9tB,EAAA,QAKAqZ,GAAA/a,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,QAAmC,MAKnCjU,GAAA/a,UAAAkL,IAAA,SAAAtD,EAAA2X,GACA,MAAAxgB,MAAAod,MACApd,KAAAod,MAAAjR,IAAA,EAAAnC,OAAAnB,EAAA2X,GACAA,GAKAxE,GAAA/a,UAAAqH,IAAA,SAAAO,EAAA0L,GACA,MAAAuJ,IAAA9d,KAAA6I,EAAA0L,IAGAyH,GAAA/a,UAAAggB,MAAA,SAAAiK,EAAA3W,GACA,MAAAvU,MAAA0wB,SAAAxF,EAAAhS,GAAA,WAA0D,MAAA3E,MAG1DyH,GAAA/a,UAAA8f,OAAA,SAAAlY,GACA,MAAAiV,IAAA9d,KAAA6I,EAAAqQ,KAGA8C,GAAA/a,UAAA0vB,SAAA,SAAAzF,GACA,MAAAlrB,MAAA0wB,SAAAxF,EAAA,WAAiD,MAAAhS,OAGjD8C,GAAA/a,UAAAsd,OAAA,SAAA1V,EAAA2X,EAAAC,GACA,WAAA1W,UAAAtH,OACAoG,EAAA7I,MACAA,KAAA0wB,UAAA7nB,GAAA2X,EAAAC,IAGAzE,GAAA/a,UAAAyvB,SAAA,SAAAxF,EAAA1K,EAAAC,GACAA,IACAA,EAAAD,EACAA,EAAAxW,OAEA,IAAA4mB,GAAAtQ,GACAtgB,KACAirB,GAAAC,GACA1K,EACAC,EAEA,OAAAmQ,KAAA1X,GAAAlP,OAAA4mB,GAGA5U,GAAA/a,UAAAmjB,MAAA,WACA,WAAApkB,KAAAyL,KACAzL,KAEAA,KAAA2d,WACA3d,KAAAyL,KAAA,EACAzL,KAAAod,MAAA,KACApd,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEAic,MAKAD,GAAA/a,UAAA4vB,MAAA,WACA,MAAApR,IAAAzf,KAAAgK,OAAAD,YAGAiS,GAAA/a,UAAA6vB,UAAA,SAAApR,GAAgD,GAAAE,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EAChD,OAAA0V,IAAAzf,KAAA0f,EAAAE,IAGA5D,GAAA/a,UAAA8vB,QAAA,SAAA7F,GAA+C,GAAAtL,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EAC/C,OAAA/J,MAAA0wB,SACAxF,EACAjP,KACA,SAAAzb,GAAsB,wBAAAA,GAAAqwB,MACtBrwB,EAAAqwB,MAAAjkB,MAAApM,EAAAof,GACAA,IAAAnd,OAAA,MAIAuZ,GAAA/a,UAAA+e,UAAA,WACA,MAAAP,IAAAzf,KAAA8f,GAAA/V,YAGAiS,GAAA/a,UAAAif,cAAA,SAAAR,GAAoD,GAAAE,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EACpD,OAAA0V,IAAAzf,KAAAigB,GAAAP,GAAAE,IAGA5D,GAAA/a,UAAA+vB,YAAA,SAAA9F,GAAmD,GAAAtL,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EACnD,OAAA/J,MAAA0wB,SACAxF,EACAjP,KACA,SAAAzb,GAAsB,wBAAAA,GAAAwf,UACtBxf,EAAAwf,UAAApT,MAAApM,EAAAof,GACAA,IAAAnd,OAAA,MAIAuZ,GAAA/a,UAAAiP,KAAA,SAAA+Z,GAEA,MAAAlF,IAAAiF,GAAAhqB,KAAAiqB,KAGAjO,GAAA/a,UAAAgwB,OAAA,SAAAnK,EAAAmD,GAEA,MAAAlF,IAAAiF,GAAAhqB,KAAAiqB,EAAAnD,KAKA9K,GAAA/a,UAAAkb,cAAA,SAAAtO,GACA,GAAAqjB,GAAAlxB,KAAAynB,WAEA,OADA5Z,GAAAqjB,GACAA,EAAAC,aAAAD,EAAAE,cAAApxB,KAAA2d,WAAA3d,MAGAgc,GAAA/a,UAAAwmB,UAAA,WACA,MAAAznB,MAAA2d,UAAA3d,UAAAoxB,cAAA,GAAAxe,KAGAoJ,GAAA/a,UAAAymB,YAAA,WACA,MAAA1nB,MAAAoxB,iBAGApV,GAAA/a,UAAAkwB,WAAA,WACA,MAAAnxB,MAAA4d,WAGA5B,GAAA/a,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,UAAAgG,IAAAhd,KAAAsU,EAAA0C,IAGAgF,GAAA/a,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAqD,GAAAwP,GAAAxmB,KACrDqnB,EAAA,CAKA,OAJArnB,MAAAod,OAAApd,KAAAod,MAAAiU,QAAA,SAAAha,GAEA,MADAgQ,KACAxZ,EAAAwJ,EAAA,GAAAA,EAAA,GAAAmP,IACOxP,GACPqQ,GAGArL,GAAA/a,UAAAmwB,cAAA,SAAA7U,GACA,MAAAA,KAAAvc,KAAA2d,UACA3d,KAEAuc,EAKAkB,GAAAzd,KAAAyL,KAAAzL,KAAAod,MAAAb,EAAAvc,KAAAwY,SAJAxY,KAAA2d,UAAApB,EACAvc,KAAA4d,WAAA,EACA5d,OAUAgc,GAAAE,QAEA,IAAAG,IAAA,wBAEAqB,GAAA1B,GAAA/a,SACAyc,IAAArB,KAAA,EACAqB,GAAA+R,IAAA/R,GAAAqD,OACArD,GAAA4T,SAAA5T,GAAAiT,SAYArU,GAAArb,UAAAkL,IAAA,SAAAmS,EAAAxB,EAAA/b,EAAAyf,GAEA,OADA9H,GAAA1Y,KAAA0Y,QACAvF,EAAA,EAAAJ,EAAA2F,EAAAjW,OAA4C0Q,EAAAJ,EAAUI,IACtD,GAAAgF,EAAApX,EAAA2X,EAAAvF,GAAA,IACA,MAAAuF,GAAAvF,GAAA,EAGA,OAAAqN,IAGAlE,GAAArb,UAAAsd,OAAA,SAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GAKA,OAJAoT,GAAAhnB,IAAA2O,GAEAR,EAAA1Y,KAAA0Y,QACAwI,EAAA,EACAnO,EAAA2F,EAAAjW,OAAoCye,EAAAnO,IACpCoF,EAAApX,EAAA2X,EAAAwI,GAAA,IAD+CA,KAK/C,GAAAsQ,GAAAtQ,EAAAnO,CAEA,IAAAye,EAAA9Y,EAAAwI,GAAA,KAAA3W,EAAAgnB,EACA,MAAAvxB,KAMA,IAHA2S,EAAAwL,IACAoT,IAAAC,IAAA7e,EAAAsL,IAEAsT,GAAA,IAAA7Y,EAAAjW,OAAA,CAIA,IAAA+uB,IAAAD,GAAA7Y,EAAAjW,QAAAgvB,GACA,MAAA1S,IAAAxC,EAAA7D,EAAA3X,EAAAwJ,EAGA,IAAAmnB,GAAAnV,OAAAvc,KAAAuc,QACAoV,EAAAD,EAAAhZ,EAAA7F,EAAA6F,EAYA,OAVA8Y,GACAD,EACArQ,IAAAnO,EAAA,EAAA4e,EAAAnQ,MAAAmQ,EAAAzQ,GAAAyQ,EAAAnQ,MAEAmQ,EAAAzQ,IAAAngB,EAAAwJ,GAGAonB,EAAA1sB,MAAAlE,EAAAwJ,IAGAmnB,GACA1xB,KAAA0Y,QAAAiZ,EACA3xB,MAGA,GAAAsc,IAAAC,EAAAoV,KAYAnV,GAAAvb,UAAAkL,IAAA,SAAAmS,EAAAxB,EAAA/b,EAAAyf,GACAxW,SAAA8S,IACAA,EAAA1W,GAAArF,GAEA,IAAAqe,GAAA,SAAAd,EAAAxB,MAAAwB,GAAAM,IACAnC,EAAAzc,KAAAyc,MACA,aAAAA,EAAA2C,GAAAoB,EACAxgB,KAAA0c,MAAAsE,GAAAvE,EAAA2C,EAAA,IAAAjT,IAAAmS,EAAAQ,GAAAhC,EAAA/b,EAAAyf,IAGAhE,GAAAvb,UAAAsd,OAAA,SAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GACAnU,SAAA8S,IACAA,EAAA1W,GAAArF,GAEA,IAAA6wB,IAAA,IAAAtT,EAAAxB,MAAAwB,GAAAM,GACAQ,EAAA,GAAAwS,EACAnV,EAAAzc,KAAAyc,OACA+U,EAAA,KAAA/U,EAAA2C,EAEA,KAAAoS,GAAAjnB,IAAA2O,GACA,MAAAlZ,KAGA,IAAAkhB,GAAAF,GAAAvE,EAAA2C,EAAA,GACA1C,EAAA1c,KAAA0c,MACArZ,EAAAmuB,EAAA9U,EAAAwE,GAAAlX,OACA0U,EAAAL,GAAAhb,EAAAkZ,EAAA+B,EAAAQ,GAAAhC,EAAA/b,EAAAwJ,EAAA0T,EAAAE,EAEA,IAAAO,IAAArb,EACA,MAAArD,KAGA,KAAAwxB,GAAA9S,GAAAhC,EAAAja,QAAAovB,GACA,MAAAxS,IAAA9C,EAAAG,EAAAD,EAAAmV,EAAAlT,EAGA,IAAA8S,IAAA9S,GAAA,IAAAhC,EAAAja,QAAA+b,GAAA9B,EAAA,EAAAwE,IACA,MAAAxE,GAAA,EAAAwE,EAGA,IAAAsQ,GAAA9S,GAAA,IAAAhC,EAAAja,QAAA+b,GAAAE,GACA,MAAAA,EAGA,IAAAgT,GAAAnV,OAAAvc,KAAAuc,QACAuV,EAAAN,EAAA9S,EAAAjC,IAAA2C,EAAA3C,EAAA2C,EACA2S,EAAAP,EAAA9S,EACAuC,GAAAvE,EAAAwE,EAAAxC,EAAAgT,GACAnQ,GAAA7E,EAAAwE,EAAAwQ,GACAtQ,GAAA1E,EAAAwE,EAAAxC,EAAAgT,EAEA,OAAAA,IACA1xB,KAAAyc,OAAAqV,EACA9xB,KAAA0c,MAAAqV,EACA/xB,MAGA,GAAAwc,IAAAD,EAAAuV,EAAAC,IAYApV,GAAA1b,UAAAkL,IAAA,SAAAmS,EAAAxB,EAAA/b,EAAAyf,GACAxW,SAAA8S,IACAA,EAAA1W,GAAArF,GAEA,IAAAmgB,IAAA,IAAA5C,EAAAxB,MAAAwB,GAAAM,GACAvb,EAAArD,KAAA0c,MAAAwE,EACA,OAAA7d,KAAA8I,IAAAmS,EAAAQ,GAAAhC,EAAA/b,EAAAyf,MAGA7D,GAAA1b,UAAAsd,OAAA,SAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GACAnU,SAAA8S,IACAA,EAAA1W,GAAArF,GAEA,IAAAmgB,IAAA,IAAA5C,EAAAxB,MAAAwB,GAAAM,GACA2S,EAAAhnB,IAAA2O,GACAwD,EAAA1c,KAAA0c,MACArZ,EAAAqZ,EAAAwE,EAEA,IAAAqQ,IAAAluB,EACA,MAAArD,KAGA,IAAA0e,GAAAL,GAAAhb,EAAAkZ,EAAA+B,EAAAQ,GAAAhC,EAAA/b,EAAAwJ,EAAA0T,EAAAE,EACA,IAAAO,IAAArb,EACA,MAAArD,KAGA,IAAAgyB,GAAAhyB,KAAA4c,KACA,IAAAvZ,GAEO,IAAAqb,IACPsT,IACAA,EAAAC,IACA,MAAAjT,IAAAzC,EAAAG,EAAAsV,EAAA9Q,OAJA8Q,IAQA,IAAAN,GAAAnV,OAAAvc,KAAAuc,QACAwV,EAAA9Q,GAAAvE,EAAAwE,EAAAxC,EAAAgT,EAEA,OAAAA,IACA1xB,KAAA4c,MAAAoV,EACAhyB,KAAA0c,MAAAqV,EACA/xB,MAGA,GAAA2c,IAAAJ,EAAAyV,EAAAD,IAYAlV,GAAA5b,UAAAkL,IAAA,SAAAmS,EAAAxB,EAAA/b,EAAAyf,GAEA,OADA9H,GAAA1Y,KAAA0Y,QACAvF,EAAA,EAAAJ,EAAA2F,EAAAjW,OAA4C0Q,EAAAJ,EAAUI,IACtD,GAAAgF,EAAApX,EAAA2X,EAAAvF,GAAA,IACA,MAAAuF,GAAAvF,GAAA,EAGA,OAAAqN,IAGA3D,GAAA5b,UAAAsd,OAAA,SAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GACAnU,SAAA8S,IACAA,EAAA1W,GAAArF,GAGA,IAAAwwB,GAAAhnB,IAAA2O,EAEA,IAAA4D,IAAA9c,KAAA8c,QACA,MAAAyU,GACAvxB,MAEA2S,EAAAwL,GACAxL,EAAAsL,GACAQ,GAAAze,KAAAuc,EAAA+B,EAAAxB,GAAA/b,EAAAwJ,IAKA,QAFAmO,GAAA1Y,KAAA0Y,QACAwI,EAAA,EACAnO,EAAA2F,EAAAjW,OAAoCye,EAAAnO,IACpCoF,EAAApX,EAAA2X,EAAAwI,GAAA,IAD+CA,KAK/C,GAAAsQ,GAAAtQ,EAAAnO,CAEA,IAAAye,EAAA9Y,EAAAwI,GAAA,KAAA3W,EAAAgnB,EACA,MAAAvxB,KAMA,IAHA2S,EAAAwL,IACAoT,IAAAC,IAAA7e,EAAAsL,GAEAsT,GAAA,IAAAxe,EACA,UAAAgK,IAAAR,EAAAvc,KAAA8c,QAAApE,EAAA,EAAAwI,GAGA,IAAAwQ,GAAAnV,OAAAvc,KAAAuc,QACAoV,EAAAD,EAAAhZ,EAAA7F,EAAA6F,EAYA,OAVA8Y,GACAD,EACArQ,IAAAnO,EAAA,EAAA4e,EAAAnQ,MAAAmQ,EAAAzQ,GAAAyQ,EAAAnQ,MAEAmQ,EAAAzQ,IAAAngB,EAAAwJ,GAGAonB,EAAA1sB,MAAAlE,EAAAwJ,IAGAmnB,GACA1xB,KAAA0Y,QAAAiZ,EACA3xB,MAGA,GAAA6c,IAAAN,EAAAvc,KAAA8c,QAAA6U,IAYA5U,GAAA9b,UAAAkL,IAAA,SAAAmS,EAAAxB,EAAA/b,EAAAyf,GACA,MAAArI,GAAApX,EAAAf,KAAAqX,MAAA,IAAArX,KAAAqX,MAAA,GAAAmJ,GAGAzD,GAAA9b,UAAAsd,OAAA,SAAAhC,EAAA+B,EAAAxB,EAAA/b,EAAAwJ,EAAA0T,EAAAE,GACA,GAAAoT,GAAAhnB,IAAA2O,GACAgZ,EAAA/Z,EAAApX,EAAAf,KAAAqX,MAAA,GACA,QAAA6a,EAAA3nB,IAAAvK,KAAAqX,MAAA,GAAAka,GACAvxB,MAGA2S,EAAAwL,GAEAoT,MACA5e,GAAAsL,GAIAiU,EACA3V,OAAAvc,KAAAuc,SACAvc,KAAAqX,MAAA,GAAA9M,EACAvK,MAEA,GAAA+c,IAAAR,EAAAvc,KAAA8c,SAAA/b,EAAAwJ,KAGAoI,EAAAsL,GACAQ,GAAAze,KAAAuc,EAAA+B,EAAAlY,GAAArF,MAAAwJ,OAOA+R,GAAArb,UAAAowB,QACAxU,GAAA5b,UAAAowB,QAAA,SAAAxjB,EAAAmJ,GAEA,OADA0B,GAAA1Y,KAAA0Y,QACAvF,EAAA,EAAAiE,EAAAsB,EAAAjW,OAAA,EAAmD0Q,GAAAiE,EAAgBjE,IACnE,GAAAtF,EAAA6K,EAAA1B,EAAAI,EAAAjE,SAAA,EACA,UAKAqJ,GAAAvb,UAAAowB,QACA1U,GAAA1b,UAAAowB,QAAA,SAAAxjB,EAAAmJ,GAEA,OADA0F,GAAA1c,KAAA0c,MACAvJ,EAAA,EAAAiE,EAAAsF,EAAAja,OAAA,EAAiD0Q,GAAAiE,EAAgBjE,IAAA,CACjE,GAAA9P,GAAAqZ,EAAA1F,EAAAI,EAAAjE,IACA,IAAA9P,KAAAguB,QAAAxjB,EAAAmJ,MAAA,EACA,WAKA+F,GAAA9b,UAAAowB,QAAA,SAAAxjB,EAAAmJ,GACA,MAAAnJ,GAAA7N,KAAAqX,QAGArG,EAAAgM,GAAA7I,GAQA6I,GAAA/b,UAAAmT,KAAA,WAGA,IAFA,GAAAE,GAAAtU,KAAAid,MACA0M,EAAA3pB,KAAAmd,OACAwM,GAAA,CACA,GAEAvS,GAFA/T,EAAAsmB,EAAAtmB,KACAyB,EAAA6kB,EAAA7kB,OAEA,IAAAzB,EAAAgU,OACA,OAAAvS,EACA,MAAAwY,IAAAhJ,EAAAjR,EAAAgU,WAES,IAAAhU,EAAAqV,SAET,GADAtB,EAAA/T,EAAAqV,QAAAjW,OAAA,EACAqC,GAAAsS,EACA,MAAAkG,IAAAhJ,EAAAjR,EAAAqV,QAAA1Y,KAAAkd,SAAA9F,EAAAtS,UAIA,IADAsS,EAAA/T,EAAAqZ,MAAAja,OAAA,EACAqC,GAAAsS,EAAA,CACA,GAAA+a,GAAA9uB,EAAAqZ,MAAA1c,KAAAkd,SAAA9F,EAAAtS,IACA,IAAAqtB,EAAA,CACA,GAAAA,EAAA9a,MACA,MAAAiG,IAAAhJ,EAAA6d,EAAA9a,MAEAsS,GAAA3pB,KAAAmd,OAAAE,GAAA8U,EAAAxI,GAEA,SAGAA,EAAA3pB,KAAAmd,OAAAnd,KAAAmd,OAAAK,OAEA,MAAA9I,KA0BA,IAAAmJ,IAsOA4T,GAAAjS,GAAA,EACAqS,GAAArS,GAAA,EACAyS,GAAAzS,GAAA,CAEAxO,GAAAjP,GAAAuY,IA2BAvY,GAAAiuB,GAAA,WACA,MAAAhwB,MAAA+J,YAGAhI,GAAAd,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,eAKAluB,GAAAd,UAAAkL,IAAA,SAAArH,EAAA0b,GAEA,GADA1b,EAAA0O,EAAAxT,KAAA8E,GACAA,GAAA,GAAAA,EAAA9E,KAAAyL,KAAA,CACA3G,GAAA9E,KAAA4iB,OACA,IAAAvf,GAAAwgB,GAAA7jB,KAAA8E,EACA,OAAAzB,MAAAR,MAAAiC,EAAA8Z,IAEA,MAAA4B,IAKAze,GAAAd,UAAAqH,IAAA,SAAAxD,EAAAyF,GACA,MAAA8Y,IAAArjB,KAAA8E,EAAAyF,IAGAxI,GAAAd,UAAA8f,OAAA,SAAAjc,GACA,MAAA9E,MAAAiZ,IAAAnU,GACA,IAAAA,EAAA9E,KAAAse,QACAxZ,IAAA9E,KAAAyL,KAAA,EAAAzL,KAAAwhB,MACAxhB,KAAAiN,OAAAnI,EAAA,GAHA9E,MAMA+B,GAAAd,UAAAyK,OAAA,SAAA5G,EAAAyF,GACA,MAAAvK,MAAAiN,OAAAnI,EAAA,EAAAyF,IAGAxI,GAAAd,UAAAmjB,MAAA,WACA,WAAApkB,KAAAyL,KACAzL,KAEAA,KAAA2d,WACA3d,KAAAyL,KAAAzL,KAAA4iB,QAAA5iB,KAAA6iB,UAAA,EACA7iB,KAAAgjB,OAAAlE,GACA9e,KAAAod,MAAApd,KAAA+iB,MAAA,KACA/iB,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEA0hB,MAGA3f,GAAAd,UAAAgE,KAAA,WACA,GAAA4H,GAAA9C,UACAqoB,EAAApyB,KAAAyL,IACA,OAAAzL,MAAAmc,cAAA,SAAAjZ,GACAogB,GAAApgB,EAAA,EAAAkvB,EAAAvlB,EAAApK,OACA,QAAA0Q,GAAA,EAAwBA,EAAAtG,EAAApK,OAAoB0Q,IAC5CjQ,EAAAoF,IAAA8pB,EAAAjf,EAAAtG,EAAAsG,OAKApR,GAAAd,UAAAugB,IAAA,WACA,MAAA8B,IAAAtjB,KAAA,OAGA+B,GAAAd,UAAAoxB,QAAA,WACA,GAAAxlB,GAAA9C,SACA,OAAA/J,MAAAmc,cAAA,SAAAjZ,GACAogB,GAAApgB,GAAA2J,EAAApK,OACA,QAAA0Q,GAAA,EAAwBA,EAAAtG,EAAApK,OAAoB0Q,IAC5CjQ,EAAAoF,IAAA6K,EAAAtG,EAAAsG,OAKApR,GAAAd,UAAAqd,MAAA,WACA,MAAAgF,IAAAtjB,KAAA,IAKA+B,GAAAd,UAAA4vB,MAAA,WACA,MAAAhM,IAAA7kB,KAAAgK,OAAAD,YAGAhI,GAAAd,UAAA6vB,UAAA,SAAApR,GAAiD,GAAAE,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EACjD,OAAA8a,IAAA7kB,KAAA0f,EAAAE,IAGA7d,GAAAd,UAAA+e,UAAA,WACA,MAAA6E,IAAA7kB,KAAA8f,GAAA/V,YAGAhI,GAAAd,UAAAif,cAAA,SAAAR,GAAqD,GAAAE,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EACrD,OAAA8a,IAAA7kB,KAAAigB,GAAAP,GAAAE,IAGA7d,GAAAd,UAAA6gB,QAAA,SAAArW,GACA,MAAA6X,IAAAtjB,KAAA,EAAAyL,IAKA1J,GAAAd,UAAAsF,MAAA,SAAAqN,EAAAC,GACA,GAAApI,GAAAzL,KAAAyL,IACA,OAAAkI,GAAAC,EAAAC,EAAApI,GACAzL,KAEAsjB,GACAtjB,KACA8T,EAAAF,EAAAnI,GACAuI,EAAAH,EAAApI,KAIA1J,GAAAd,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAlS,GAAA,EACA+H,EAAAoV,GAAAjiB,KAAAgX,EACA,WAAA7C,GAAA,WACA,GAAA5J,GAAAsC,GACA,OAAAtC,KAAAoY,GACAjO,IACAL,EAAAC,EAAAxP,IAAAyF,MAIAxI,GAAAd,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAIA,IAHA,GAEAzM,GAFAzF,EAAA,EACA+H,EAAAoV,GAAAjiB,KAAAgX,IAEAzM,EAAAsC,OAAA8V,IACA9U,EAAAtD,EAAAzF,IAAA9E,SAAA,IAIA,MAAA8E,IAGA/C,GAAAd,UAAAmwB,cAAA,SAAA7U,GACA,MAAAA,KAAAvc,KAAA2d,UACA3d,KAEAuc,EAIAqF,GAAA5hB,KAAA4iB,QAAA5iB,KAAA6iB,UAAA7iB,KAAAgjB,OAAAhjB,KAAAod,MAAApd,KAAA+iB,MAAAxG,EAAAvc,KAAAwY,SAHAxY,KAAA2d,UAAApB,EACAvc,OAUA+B,GAAA4f,SAEA,IAAAK,IAAA,yBAEAmB,GAAAphB,GAAAd,SACAkiB,IAAAnB,KAAA,EACAmB,GAAAsM,IAAAtM,GAAApC,OACAoC,GAAAlC,MAAAvD,GAAAuD,MACAkC,GAAAwN,SACAxN,GAAAmO,SAAA5T,GAAA4T,SACAnO,GAAA5E,OAAAb,GAAAa,OACA4E,GAAAuN,SAAAhT,GAAAgT,SACAvN,GAAA4N,QAAArT,GAAAqT,QACA5N,GAAA6N,YAAAtT,GAAAsT,YACA7N,GAAAhH,cAAAuB,GAAAvB,cACAgH,GAAAsE,UAAA/J,GAAA+J,UACAtE,GAAAuE,YAAAhK,GAAAgK,YACAvE,GAAAgO,WAAAzT,GAAAyT,WAWAtP,GAAA5gB,UAAA0jB,aAAA,SAAApI,EAAA4F,EAAArd,GACA,GAAAA,IAAAqd,EAAA,GAAAA,EAAA,IAAAniB,KAAA6C,MAAAJ,OACA,MAAAzC,KAEA,IAAAsyB,GAAAxtB,IAAAqd,EAAAvD,EACA,IAAA0T,GAAAtyB,KAAA6C,MAAAJ,OACA,UAAAof,OAAAtF,EAEA,IACAgW,GADAC,EAAA,IAAAF,CAEA,IAAAnQ,EAAA,GACA,GAAAsQ,GAAAzyB,KAAA6C,MAAAyvB,EAEA,IADAC,EAAAE,KAAA9N,aAAApI,EAAA4F,EAAArD,GAAAha,GACAytB,IAAAE,GAAAD,EACA,MAAAxyB,MAGA,GAAAwyB,IAAAD,EACA,MAAAvyB,KAEA,IAAA0yB,GAAA9O,GAAA5jB,KAAAuc,EACA,KAAAiW,EACA,OAAArf,GAAA,EAAwBA,EAAAmf,EAAkBnf,IAC1Cuf,EAAA7vB,MAAAsQ,GAAAnJ,MAMA,OAHAuoB,KACAG,EAAA7vB,MAAAyvB,GAAAC,GAEAG,GAGA7Q,GAAA5gB,UAAAyjB,YAAA,SAAAnI,EAAA4F,EAAArd,GACA,GAAAA,KAAAqd,EAAA,GAAAA,EAAA,QAAAniB,KAAA6C,MAAAJ,OACA,MAAAzC,KAEA,IAAA2yB,GAAA7tB,EAAA,IAAAqd,EAAAvD,EACA,IAAA+T,GAAA3yB,KAAA6C,MAAAJ,OACA,MAAAzC,KAGA,IAAAuyB,EACA,IAAApQ,EAAA,GACA,GAAAsQ,GAAAzyB,KAAA6C,MAAA8vB,EAEA,IADAJ,EAAAE,KAAA/N,YAAAnI,EAAA4F,EAAArD,GAAAha,GACAytB,IAAAE,GAAAE,IAAA3yB,KAAA6C,MAAAJ,OAAA,EACA,MAAAzC,MAIA,GAAA0yB,GAAA9O,GAAA5jB,KAAAuc,EAKA,OAJAmW,GAAA7vB,MAAAoK,OAAA0lB,EAAA,GACAJ,IACAG,EAAA7vB,MAAA8vB,GAAAJ,GAEAG,EAKA,IA2EAtP,IA3EAT,KAoUA3R,GAAA+T,GAAA/I,IAcA+I,GAAAiL,GAAA,WACA,MAAAhwB,MAAA+J,YAGAgb,GAAA9jB,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,eAA0C,MAK1ClL,GAAA9jB,UAAAkL,IAAA,SAAAtD,EAAA2X,GACA,GAAA1b,GAAA9E,KAAAqlB,KAAAlZ,IAAAtD,EACA,OAAAmB,UAAAlF,EAAA9E,KAAAslB,MAAAnZ,IAAArH,GAAA,GAAA0b,GAKAuE,GAAA9jB,UAAAmjB,MAAA,WACA,WAAApkB,KAAAyL,KACAzL,KAEAA,KAAA2d,WACA3d,KAAAyL,KAAA,EACAzL,KAAAqlB,KAAAjB,QACApkB,KAAAslB,MAAAlB,QACApkB,MAEAglB,MAGAD,GAAA9jB,UAAAqH,IAAA,SAAAO,EAAA0L,GACA,MAAAiR,IAAAxlB,KAAA6I,EAAA0L,IAGAwQ,GAAA9jB,UAAA8f,OAAA,SAAAlY,GACA,MAAA2c,IAAAxlB,KAAA6I,EAAAqQ,KAGA6L,GAAA9jB,UAAAkwB,WAAA,WACA,MAAAnxB,MAAAqlB,KAAA8L,cAAAnxB,KAAAslB,MAAA6L,cAGApM,GAAA9jB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAA4D,GAAAwP,GAAAxmB,IAC5D,OAAAA,MAAAslB,MAAAhS,UACA,SAAA+D,GAA0B,MAAAA,IAAAxJ,EAAAwJ,EAAA,GAAAA,EAAA,GAAAmP,IAC1BxP,IAIA+N,GAAA9jB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,MAAAhX,MAAAslB,MAAA7P,eAAAiR,WAAApS,EAAA0C,IAGA+N,GAAA9jB,UAAAmwB,cAAA,SAAA7U,GACA,GAAAA,IAAAvc,KAAA2d,UACA,MAAA3d,KAEA,IAAAylB,GAAAzlB,KAAAqlB,KAAA+L,cAAA7U,GACAvX,EAAAhF,KAAAslB,MAAA8L,cAAA7U,EACA,OAAAA,GAMA4I,GAAAM,EAAAzgB,EAAAuX,EAAAvc,KAAAwY,SALAxY,KAAA2d,UAAApB,EACAvc,KAAAqlB,KAAAI,EACAzlB,KAAAslB,MAAAtgB,EACAhF,OAUA+kB,GAAAE,gBAEAF,GAAA9jB,UAAAuR,KAAA,EACAuS,GAAA9jB,UAAAwuB,IAAA1K,GAAA9jB,UAAA8f,MAcA,IAAAwE,GAgDAvU,GAAA2U,GAAAnU,GAOAmU,GAAA1kB,UAAAkL,IAAA,SAAApL,EAAAyf,GACA,MAAAxgB,MAAA6lB,MAAA1Z,IAAApL,EAAAyf,IAGAmF,GAAA1kB,UAAAgY,IAAA,SAAAlY,GACA,MAAAf,MAAA6lB,MAAA5M,IAAAlY,IAGA4kB,GAAA1kB,UAAA2xB,SAAA,WACA,MAAA5yB,MAAA6lB,MAAA+M,YAGAjN,GAAA1kB,UAAA+V,QAAA,WAAoD,GAAAwP,GAAAxmB,KACpDqmB,EAAAY,GAAAjnB,MAAA,EAIA,OAHAA,MAAA8lB,WACAO,EAAAuM,SAAA,WAAiD,MAAApM,GAAAX,MAAAvQ,QAAA0B,YAEjDqP,GAGAV,GAAA1kB,UAAAgF,IAAA,SAAA6gB,EAAAC,GAA+D,GAAAP,GAAAxmB,KAC/DgnB,EAAAH,GAAA7mB,KAAA8mB,EAAAC,EAIA,OAHA/mB,MAAA8lB,WACAkB,EAAA4L,SAAA,WAA+C,MAAApM,GAAAX,MAAAvQ,QAAArP,IAAA6gB,EAAAC,KAE/CC,GAGArB,GAAA1kB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAiE,GACjE7D,GADiEqT,EAAAxmB,IAEjE,OAAAA,MAAA6lB,MAAAvS,UACAtT,KAAA8lB,SACA,SAAAvR,EAAA1L,GAA2B,MAAAgF,GAAA0G,EAAA1L,EAAA2d,KAC3BrT,EAAA6D,EAAAgU,GAAAhrB,MAAA,EACA,SAAAuU,GAA0B,MAAA1G,GAAA0G,EAAAyC,IAAA7D,MAAAqT,KAC1BxP,IAIA2O,GAAA1kB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAhX,KAAA8lB,SACA,MAAA9lB,MAAA6lB,MAAAa,WAAApS,EAAA0C,EAEA,IAAAhJ,GAAAhO,KAAA6lB,MAAAa,WAAAC,GAAA3P,GACA7D,EAAA6D,EAAAgU,GAAAhrB,MAAA,CACA,WAAAmU,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,OAAAyF,GAAApF,KAAAoF,EACAxF,EAAAC,EAAA0C,IAAA7D,MAAA0G,EAAAtP,MAAAsP,MAIA8L,GAAA1kB,UAAAuR,KAAA,EAGAxB,EAAA+U,GAAApU,GAMAoU,GAAA9kB,UAAAqlB,SAAA,SAAA/b,GACA,MAAAvK,MAAA6lB,MAAAS,SAAA/b,IAGAwb,GAAA9kB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAmE,GAAAwP,GAAAxmB,KACnEqnB,EAAA,CACA,OAAArnB,MAAA6lB,MAAAvS,UAAA,SAAAiB,GAAgD,MAAA1G,GAAA0G,EAAA8S,IAAAb,IAAmCxP,IAGnF+O,GAAA9kB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAhJ,GAAAhO,KAAA6lB,MAAAa,WAAAC,GAAA3P,GACAqQ,EAAA,CACA,WAAAlT,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,OAAAyF,GAAApF,KAAAoF,EACAxF,EAAAC,EAAA+S,IAAAxN,EAAAtP,MAAAsP,MAMA7I,EAAAgV,GAAAlU,GAMAkU,GAAA/kB,UAAAgY,IAAA,SAAAlY,GACA,MAAAf,MAAA6lB,MAAAS,SAAAvlB,IAGAilB,GAAA/kB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAA+D,GAAAwP,GAAAxmB,IAC/D,OAAAA,MAAA6lB,MAAAvS,UAAA,SAAAiB,GAAgD,MAAA1G,GAAA0G,IAAAiS,IAAwBxP,IAGxEgP,GAAA/kB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAhJ,GAAAhO,KAAA6lB,MAAAa,WAAAC,GAAA3P,EACA,WAAA7C,GAAA,WACA,GAAA0F,GAAA7L,EAAAoG,MACA,OAAAyF,GAAApF,KAAAoF,EACAxF,EAAAC,EAAAuF,EAAAtP,MAAAsP,EAAAtP,MAAAsP,MAMA7I,EAAAiV,GAAAzU,GAMAyU,GAAAhlB,UAAA0U,SAAA,WACA,MAAA3V,MAAA6lB,MAAAvQ,SAGA2Q,GAAAhlB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAqE,GAAAwP,GAAAxmB,IACrE,OAAAA,MAAA6lB,MAAAvS,UAAA,SAAA+D,GAGA,GAAAA,EAAA,CACA0T,GAAA1T,EACA,IAAAwb,GAAAzhB,EAAAiG,EACA,OAAAxJ,GACAglB,EAAAxb,EAAAlL,IAAA,GAAAkL,EAAA,GACAwb,EAAAxb,EAAAlL,IAAA,GAAAkL,EAAA,GACAmP,KAGOxP,IAGPiP,GAAAhlB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAhJ,GAAAhO,KAAA6lB,MAAAa,WAAAC,GAAA3P,EACA,WAAA7C,GAAA,WACA,QACA,GAAA0F,GAAA7L,EAAAoG,MACA,IAAAyF,EAAApF,KACA,MAAAoF,EAEA,IAAAxC,GAAAwC,EAAAtP,KAGA,IAAA8M,EAAA,CACA0T,GAAA1T,EACA,IAAAwb,GAAAzhB,EAAAiG,EACA,OAAAhD,GACAC,EACAue,EAAAxb,EAAAlL,IAAA,GAAAkL,EAAA,GACAwb,EAAAxb,EAAAlL,IAAA,GAAAkL,EAAA,GACAwC,QAQAkM,GAAA9kB,UAAA4X,YACA8M,GAAA1kB,UAAA4X,YACAmN,GAAA/kB,UAAA4X,YACAoN,GAAAhlB,UAAA4X,YACA0N,GAwpBAvV,EAAAma,GAAA9Q,IA8BA8Q,GAAAlqB,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAAhE,GAAAjsB,MAAA,KAAmD,MAKnDmrB,GAAAlqB,UAAAgY,IAAA,SAAApQ,GACA,MAAA7I,MAAA2rB,eAAAzqB,eAAA2H,IAGAsiB,GAAAlqB,UAAAkL,IAAA,SAAAtD,EAAA2X,GACA,IAAAxgB,KAAAiZ,IAAApQ,GACA,MAAA2X,EAEA,IAAAsS,GAAA9yB,KAAA2rB,eAAA9iB,EACA,OAAA7I,MAAAqlB,KAAArlB,KAAAqlB,KAAAlZ,IAAAtD,EAAAiqB,MAKA3H,GAAAlqB,UAAAmjB,MAAA,WACA,GAAApkB,KAAA2d,UAEA,MADA3d,MAAAqlB,MAAArlB,KAAAqlB,KAAAjB,QACApkB,IAEA,IAAAurB,GAAAvrB,KAAAiO,WACA,OAAAsd,GAAAwH,SAAAxH,EAAAwH,OAAAlH,GAAA7rB,KAAAic,QAGAkP,GAAAlqB,UAAAqH,IAAA,SAAAO,EAAA0L,GACA,IAAAvU,KAAAiZ,IAAApQ,GACA,SAAA3E,OAAA,2BAAA2E,EAAA,QAAAojB,GAAAjsB,MAEA,IAAAA,KAAAqlB,OAAArlB,KAAAqlB,KAAApM,IAAApQ,GAAA,CACA,GAAAiqB,GAAA9yB,KAAA2rB,eAAA9iB,EACA,IAAA0L,IAAAue,EACA,MAAA9yB,MAGA,GAAAylB,GAAAzlB,KAAAqlB,MAAArlB,KAAAqlB,KAAA/c,IAAAO,EAAA0L,EACA,OAAAvU,MAAA2d,WAAA8H,IAAAzlB,KAAAqlB,KACArlB,KAEA6rB,GAAA7rB,KAAAylB,IAGA0F,GAAAlqB,UAAA8f,OAAA,SAAAlY,GACA,IAAA7I,KAAAiZ,IAAApQ,GACA,MAAA7I,KAEA,IAAAylB,GAAAzlB,KAAAqlB,MAAArlB,KAAAqlB,KAAAtE,OAAAlY,EACA,OAAA7I,MAAA2d,WAAA8H,IAAAzlB,KAAAqlB,KACArlB,KAEA6rB,GAAA7rB,KAAAylB,IAGA0F,GAAAlqB,UAAAkwB,WAAA,WACA,MAAAnxB,MAAAqlB,KAAA8L,cAGAhG,GAAAlqB,UAAAylB,WAAA,SAAApS,EAAA0C,GAA2D,GAAAwP,GAAAxmB,IAC3D,OAAAsR,GAAAtR,KAAA2rB,gBAAA1lB,IAAA,SAAA6S,EAAAjQ,GAAqE,MAAA2d,GAAAra,IAAAtD,KAAqB6d,WAAApS,EAAA0C,IAG1FmU,GAAAlqB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAwD,GAAAwP,GAAAxmB,IACxD,OAAAsR,GAAAtR,KAAA2rB,gBAAA1lB,IAAA,SAAA6S,EAAAjQ,GAAqE,MAAA2d,GAAAra,IAAAtD,KAAqByK,UAAAzF,EAAAmJ,IAG1FmU,GAAAlqB,UAAAmwB,cAAA,SAAA7U,GACA,GAAAA,IAAAvc,KAAA2d,UACA,MAAA3d,KAEA,IAAAylB,GAAAzlB,KAAAqlB,MAAArlB,KAAAqlB,KAAA+L,cAAA7U,EACA,OAAAA,GAKAsP,GAAA7rB,KAAAylB,EAAAlJ,IAJAvc,KAAA2d,UAAApB,EACAvc,KAAAqlB,KAAAI,EACAzlB,MAMA,IAAA4rB,IAAAT,GAAAlqB,SACA2qB,IAAA6D,IAAA7D,GAAA7K,OACA6K,GAAA+E,SACA/E,GAAA0F,SAAA5T,GAAA4T,SACA1F,GAAAiF,MAAAnT,GAAAmT,MACAjF,GAAAkF,UAAApT,GAAAoT,UACAlF,GAAAmF,QAAArT,GAAAqT,QACAnF,GAAA5L,UAAAtC,GAAAsC,UACA4L,GAAA1L,cAAAxC,GAAAwC,cACA0L,GAAAoF,YAAAtT,GAAAsT,YACApF,GAAA3K,MAAAvD,GAAAuD,MACA2K,GAAArN,OAAAb,GAAAa,OACAqN,GAAA8E,SAAAhT,GAAAgT,SACA9E,GAAAzP,cAAAuB,GAAAvB,cACAyP,GAAAnE,UAAA/J,GAAA+J,UACAmE,GAAAlE,YAAAhK,GAAAgK,YAkCA1W,EAAAqb,GAAA9R,IAcA8R,GAAA2D,GAAA,WACA,MAAAhwB,MAAA+J,YAGAsiB,GAAA2G,SAAA,SAAAzoB,GACA,MAAAvK,MAAAsR,EAAA/G,GAAA0oB,WAGA5G,GAAAprB,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,QAAmC,MAKnC5D,GAAAprB,UAAAgY,IAAA,SAAA1O,GACA,MAAAvK,MAAAqlB,KAAApM,IAAA1O,IAKA8hB,GAAAprB,UAAAurB,IAAA,SAAAjiB,GACA,MAAAoiB,IAAA3sB,UAAAqlB,KAAA/c,IAAAiC,GAAA,KAGA8hB,GAAAprB,UAAA8f,OAAA,SAAAxW,GACA,MAAAoiB,IAAA3sB,UAAAqlB,KAAAtE,OAAAxW,KAGA8hB,GAAAprB,UAAAmjB,MAAA,WACA,MAAAuI,IAAA3sB,UAAAqlB,KAAAjB,UAKAiI,GAAAprB,UAAAiyB,MAAA,WAAsC,GAAAtT,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EAEtC,OADA6V,KAAA1Z,OAAA,SAAAoJ,GAAyC,WAAAA,EAAA7D,OACzC,IAAAmU,EAAAnd,OACAzC,KAEA,IAAAA,KAAAyL,MAAAzL,KAAA2d,WAAA,IAAAiC,EAAAnd,OAGAzC,KAAAmc,cAAA,SAAA7T,GACA,OAAA6K,GAAA,EAAwBA,EAAAyM,EAAAnd,OAAmB0Q,IAC3CvB,EAAAgO,EAAAzM,IAAAzL,QAAA,SAAA6C,GAA2D,MAAAjC,GAAAkkB,IAAAjiB,OAJ3DvK,KAAAiO,YAAA2R,EAAA,KASAyM,GAAAprB,UAAAkyB,UAAA,WAA0C,GAAAvT,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EAC1C,QAAA6V,EAAAnd,OACA,MAAAzC,KAEA4f,KAAA3Z,IAAA,SAAAoN,GAAyC,MAAAzB,GAAAyB,IACzC,IAAA+f,GAAApzB,IACA,OAAAA,MAAAmc,cAAA,SAAA7T,GACA8qB,EAAA1rB,QAAA,SAAA6C,GACAqV,EAAAjH,MAAA,SAAAtF,GAA4C,MAAAA,GAAAiT,SAAA/b,MAC5CjC,EAAAyY,OAAAxW,QAMA8hB,GAAAprB,UAAAoyB,SAAA,WAAyC,GAAAzT,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EACzC,QAAA6V,EAAAnd,OACA,MAAAzC,KAEA4f,KAAA3Z,IAAA,SAAAoN,GAAyC,MAAAzB,GAAAyB,IACzC,IAAA+f,GAAApzB,IACA,OAAAA,MAAAmc,cAAA,SAAA7T,GACA8qB,EAAA1rB,QAAA,SAAA6C,GACAqV,EAAAiL,KAAA,SAAAxX,GAA0C,MAAAA,GAAAiT,SAAA/b,MAC1CjC,EAAAyY,OAAAxW,QAMA8hB,GAAAprB,UAAA4vB,MAAA,WACA,MAAA7wB,MAAAkzB,MAAAtmB,MAAA5M,KAAA+J,YAGAsiB,GAAAprB,UAAA6vB,UAAA,SAAApR,GAAgD,GAAAE,GAAA0P,GAAA/uB,KAAAwJ,UAAA,EAChD,OAAA/J,MAAAkzB,MAAAtmB,MAAA5M,KAAA4f,IAGAyM,GAAAprB,UAAAiP,KAAA,SAAA+Z,GAEA,MAAAgD,IAAAjD,GAAAhqB,KAAAiqB,KAGAoC,GAAAprB,UAAAgwB,OAAA,SAAAnK,EAAAmD,GAEA,MAAAgD,IAAAjD,GAAAhqB,KAAAiqB,EAAAnD,KAGAuF,GAAAprB,UAAAkwB,WAAA,WACA,MAAAnxB,MAAAqlB,KAAA8L,cAGA9E,GAAAprB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GAAqD,GAAAwP,GAAAxmB,IACrD,OAAAA,MAAAqlB,KAAA/R,UAAA,SAAAwF,EAAAjQ,GAAkD,MAAAgF,GAAAhF,IAAA2d,IAAwBxP,IAG1EqV,GAAAprB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,MAAAhX,MAAAqlB,KAAApf,IAAA,SAAA6S,EAAAjQ,GAA4C,MAAAA,KAAS6d,WAAApS,EAAA0C,IAGrDqV,GAAAprB,UAAAmwB,cAAA,SAAA7U,GACA,GAAAA,IAAAvc,KAAA2d,UACA,MAAA3d,KAEA,IAAAylB,GAAAzlB,KAAAqlB,KAAA+L,cAAA7U,EACA,OAAAA,GAKAvc,KAAA6sB,OAAApH,EAAAlJ,IAJAvc,KAAA2d,UAAApB,EACAvc,KAAAqlB,KAAAI,EACAzlB,OAUAqsB,GAAAE,QAEA,IAAAG,IAAA,wBAEAK,GAAAV,GAAAprB,SACA8rB,IAAAL,KAAA,EACAK,GAAA0C,IAAA1C,GAAAhM,OACAgM,GAAA/M,UAAA+M,GAAA8D,MACA9D,GAAA7M,cAAA6M,GAAA+D,UACA/D,GAAA5Q,cAAAuB,GAAAvB,cACA4Q,GAAAtF,UAAA/J,GAAA+J,UACAsF,GAAArF,YAAAhK,GAAAgK,YAEAqF,GAAAH,QAAAN,GACAS,GAAAF,OAAAC,EAqBA,IAAAE,GAKAhc,GAAAic,GAAAZ,IAcAY,GAAA+C,GAAA,WACA,MAAAhwB,MAAA+J,YAGAkjB,GAAA+F,SAAA,SAAAzoB,GACA,MAAAvK,MAAAsR,EAAA/G,GAAA0oB,WAGAhG,GAAAhsB,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,eAA0C,MAQ1ChD,GAAAE,eAEA,IAAAG,IAAAL,GAAAhsB,SACAqsB,IAAA9a,KAAA,EAEA8a,GAAAV,QAAAM,GACAI,GAAAT,OAAAQ,EAUA,IAAAE,GAKAvc,GAAAwc,GAAAlT,IAUAkT,GAAAwC,GAAA,WACA,MAAAhwB,MAAA+J,YAGAyjB,GAAAvsB,UAAAyP,SAAA,WACA,MAAA1Q,MAAAiwB,WAAA,gBAKAzC,GAAAvsB,UAAAkL,IAAA,SAAArH,EAAA0b,GACA,GAAAuN,GAAA/tB,KAAAiuB,KAEA,KADAnpB,EAAA0O,EAAAxT,KAAA8E,GACAipB,GAAAjpB,KACAipB,IAAA3Z,IAEA,OAAA2Z,KAAAxjB,MAAAiW,GAGAgN,GAAAvsB,UAAAqM,KAAA,WACA,MAAAtN,MAAAiuB,OAAAjuB,KAAAiuB,MAAA1jB,OAKAijB,GAAAvsB,UAAAgE,KAAA,WACA,OAAA8E,UAAAtH,OACA,MAAAzC,KAIA,QAFAge,GAAAhe,KAAAyL,KAAA1B,UAAAtH,OACAsrB,EAAA/tB,KAAAiuB,MACA9a,EAAApJ,UAAAtH,OAAA,EAAyC0Q,GAAA,EAASA,IAClD4a,GACAxjB,MAAAR,UAAAoJ,GACAiB,KAAA2Z,EAGA,OAAA/tB,MAAA2d,WACA3d,KAAAyL,KAAAuS,EACAhe,KAAAiuB,MAAAF,EACA/tB,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEA8tB,GAAA9P,EAAA+P,IAGAP,GAAAvsB,UAAAqyB,QAAA,SAAAjgB,GAEA,GADAA,EAAA5B,EAAA4B,GACA,IAAAA,EAAA5H,KACA,MAAAzL,KAEA+b,IAAA1I,EAAA5H,KACA,IAAAuS,GAAAhe,KAAAyL,KACAsiB,EAAA/tB,KAAAiuB,KAQA,OAPA5a,GAAA2D,UAAAtP,QAAA,SAAA6C,GACAyT,IACA+P,GACAxjB,QACA6J,KAAA2Z,KAGA/tB,KAAA2d,WACA3d,KAAAyL,KAAAuS,EACAhe,KAAAiuB,MAAAF,EACA/tB,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEA8tB,GAAA9P,EAAA+P,IAGAP,GAAAvsB,UAAAugB,IAAA,WACA,MAAAxhB,MAAAuG,MAAA,IAGAinB,GAAAvsB,UAAAoxB,QAAA,WACA,MAAAryB,MAAAiF,KAAA2H,MAAA5M,KAAA+J,YAGAyjB,GAAAvsB,UAAA0sB,WAAA,SAAAta,GACA,MAAArT,MAAAszB,QAAAjgB,IAGAma,GAAAvsB,UAAAqd,MAAA,WACA,MAAAte,MAAAwhB,IAAA5U,MAAA5M,KAAA+J,YAGAyjB,GAAAvsB,UAAAmjB,MAAA,WACA,WAAApkB,KAAAyL,KACAzL,KAEAA,KAAA2d,WACA3d,KAAAyL,KAAA,EACAzL,KAAAiuB,MAAAjkB,OACAhK,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEAytB,MAGAD,GAAAvsB,UAAAsF,MAAA,SAAAqN,EAAAC,GACA,GAAAF,EAAAC,EAAAC,EAAA7T,KAAAyL,MACA,MAAAzL,KAEA,IAAAkoB,GAAApU,EAAAF,EAAA5T,KAAAyL,MACA0c,EAAAnU,EAAAH,EAAA7T,KAAAyL,KACA,IAAA0c,IAAAnoB,KAAAyL,KAEA,MAAA6O,IAAArZ,UAAAsF,MAAAhG,KAAAP,KAAA4T,EAAAC,EAIA,KAFA,GAAAmK,GAAAhe,KAAAyL,KAAAyc,EACA6F,EAAA/tB,KAAAiuB,MACA/F,KACA6F,IAAA3Z,IAEA,OAAApU,MAAA2d,WACA3d,KAAAyL,KAAAuS,EACAhe,KAAAiuB,MAAAF,EACA/tB,KAAAwY,OAAAxO,OACAhK,KAAA4d,WAAA,EACA5d,MAEA8tB,GAAA9P,EAAA+P,IAKAP,GAAAvsB,UAAAmwB,cAAA,SAAA7U,GACA,MAAAA,KAAAvc,KAAA2d,UACA3d,KAEAuc,EAKAuR,GAAA9tB,KAAAyL,KAAAzL,KAAAiuB,MAAA1R,EAAAvc,KAAAwY,SAJAxY,KAAA2d,UAAApB,EACAvc,KAAA4d,WAAA,EACA5d,OAOAwtB,GAAAvsB,UAAAqS,UAAA,SAAAzF,EAAAmJ,GACA,GAAAA,EACA,MAAAhX,MAAAgX,UAAA1D,UAAAzF,EAIA,KAFA,GAAAwZ,GAAA,EACAhkB,EAAArD,KAAAiuB,MACA5qB,GACAwK,EAAAxK,EAAAkH,MAAA8c,IAAArnB,SAAA,GAGAqD,IAAA+Q,IAEA,OAAAiT,IAGAmG,GAAAvsB,UAAAylB,WAAA,SAAApS,EAAA0C,GACA,GAAAA,EACA,MAAAhX,MAAAgX,UAAA0P,WAAApS,EAEA,IAAA+S,GAAA,EACAhkB,EAAArD,KAAAiuB,KACA,WAAA9Z,GAAA,WACA,GAAA9Q,EAAA,CACA,GAAAkH,GAAAlH,EAAAkH,KAEA,OADAlH,KAAA+Q,KACAC,EAAAC,EAAA+S,IAAA9c,GAEA,MAAAmK,QASA8Y,GAAAE,UAEA,IAAAG,IAAA,0BAEAG,GAAAR,GAAAvsB,SACA+sB,IAAAH,KAAA,EACAG,GAAA7R,cAAAuB,GAAAvB,cACA6R,GAAAvG,UAAA/J,GAAA+J,UACAuG,GAAAtG,YAAAhK,GAAAgK,YACAsG,GAAAmD,WAAAzT,GAAAyT,UAaA,IAAAjD,GAgBA/c,GAAAgD,WAEAga,GAAAhd,GAIA7L,QAAA,WACAyW,GAAA/b,KAAAyL,KACA,IAAA5I,GAAA,GAAA2J,OAAAxM,KAAAyL,MAAA,EAEA,OADAzL,MAAA4yB,WAAAtf,UAAA,SAAAiB,EAAA5R,GAAiDE,EAAAF,GAAA4R,IACjD1R,GAGA+S,aAAA,WACA,UAAAmQ,IAAA/lB,OAGAuzB,KAAA,WACA,MAAAvzB,MAAAsV,QAAArP,IACA,SAAAsE,GAA0B,MAAAA,IAAA,kBAAAA,GAAAgpB,KAAAhpB,EAAAgpB,OAAAhpB,IAC1BipB,UAGAC,OAAA,WACA,MAAAzzB,MAAAsV,QAAArP,IACA,SAAAsE,GAA0B,MAAAA,IAAA,kBAAAA,GAAAkpB,OAAAlpB,EAAAkpB,SAAAlpB,IAC1BipB,UAGAhe,WAAA,WACA,UAAAmQ,IAAA3lB,MAAA,IAGAkY,MAAA,WAEA,MAAA8D,IAAAhc,KAAAwV,eAGAke,SAAA,WACA3X,GAAA/b,KAAAyL,KACA,IAAAgF,KAEA,OADAzQ,MAAAsT,UAAA,SAAAiB,EAAA1L,GAAsC4H,EAAA5H,GAAA0L,IACtC9D,GAGAkjB,aAAA,WAEA,MAAA5O,IAAA/kB,KAAAwV,eAGAoe,aAAA,WAEA,MAAA3G,IAAA1b,EAAAvR,WAAA4yB,WAAA5yB,OAGA6zB,MAAA,WAEA,MAAAxH,IAAA9a,EAAAvR,WAAA4yB,WAAA5yB,OAGA8V,SAAA,WACA,UAAAkQ,IAAAhmB,OAGAsV,MAAA,WACA,MAAA5D,GAAA1R,WAAA4V,eACArE,EAAAvR,WAAAwV,aACAxV,KAAA8V,YAGAge,QAAA,WAEA,MAAAtG,IAAAjc,EAAAvR,WAAA4yB,WAAA5yB,OAGAiY,OAAA,WAEA,MAAAlW,IAAAwP,EAAAvR,WAAA4yB,WAAA5yB,OAMA0Q,SAAA,WACA,oBAGAuf,WAAA,SAAAlC,EAAAxL,GACA,WAAAviB,KAAAyL,KACAsiB,EAAAxL,EAEAwL,EAAA,IAAA/tB,KAAAsV,QAAArP,IAAAjG,KAAA+zB,kBAAA1tB,KAAA,UAAAkc,GAMAnY,OAAA,WAAwB,GAAAyC,GAAAyiB,GAAA/uB,KAAAwJ,UAAA,EACxB,OAAAge,IAAA/nB,KAAA+oB,GAAA/oB,KAAA6M,KAGAyZ,SAAA,SAAA4J,GACA,MAAAlwB,MAAA6qB,KAAA,SAAAtgB,GAAyC,MAAA4N,GAAA5N,EAAA2lB,MAGzCxX,QAAA,WACA,MAAA1Y,MAAA0mB,WAAAD,KAGA9N,MAAA,SAAAwO,EAAAJ,GACAhL,GAAA/b,KAAAyL,KACA,IAAAuoB,IAAA,CAOA,OANAh0B,MAAAsT,UAAA,SAAAiB,EAAA1L,EAAApI,GACA,IAAA0mB,EAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,GAEA,MADAuzB,IAAA,GACA,IAGAA,GAGA9tB,OAAA,SAAAihB,EAAAJ,GACA,MAAAgB,IAAA/nB,KAAAknB,GAAAlnB,KAAAmnB,EAAAJ,GAAA,KAGA5f,KAAA,SAAAggB,EAAAJ,EAAAvG,GACA,GAAAnJ,GAAArX,KAAAi0B,UAAA9M,EAAAJ,EACA,OAAA1P,KAAA,GAAAmJ,GAGA9Y,QAAA,SAAAwsB,EAAAnN,GAEA,MADAhL,IAAA/b,KAAAyL,MACAzL,KAAAsT,UAAAyT,EAAAmN,EAAA9H,KAAArF,GAAAmN,IAGA7tB,KAAA,SAAAyjB,GACA/N,GAAA/b,KAAAyL,MACAqe,EAAA9f,SAAA8f,EAAA,GAAAA,EAAA,GACA,IAAAqK,GAAA,GACAC,GAAA,CAKA,OAJAp0B,MAAAsT,UAAA,SAAAiB,GACA6f,KAAA,EAAAD,GAAArK,EACAqK,GAAA,OAAA5f,GAAAvK,SAAAuK,IAAA7D,WAAA,KAEAyjB,GAGA1vB,KAAA,WACA,MAAAzE,MAAA0mB,WAAAE,KAGA3gB,IAAA,SAAA6gB,EAAAC,GACA,MAAAgB,IAAA/nB,KAAA6mB,GAAA7mB,KAAA8mB,EAAAC,KAGAriB,OAAA,SAAA2vB,EAAAC,EAAAvN,GACAhL,GAAA/b,KAAAyL,KACA,IAAA8oB,GACAC,CAcA,OAbAzqB,WAAAtH,OAAA,EACA+xB,GAAA,EAEAD,EAAAD,EAEAt0B,KAAAsT,UAAA,SAAAiB,EAAA1L,EAAApI,GACA+zB,GACAA,GAAA,EACAD,EAAAhgB,GAEAggB,EAAAF,EAAA9zB,KAAAwmB,EAAAwN,EAAAhgB,EAAA1L,EAAApI,KAGA8zB,GAGAE,YAAA,SAAAJ,EAAAC,EAAAvN,GACA,GAAA2N,GAAA10B,KAAAwV,aAAAwB,SACA,OAAA0d,GAAAhwB,OAAAkI,MAAA8nB,EAAA3qB,YAGAiN,QAAA,WACA,MAAA+Q,IAAA/nB,KAAAinB,GAAAjnB,MAAA,KAGAuG,MAAA,SAAAqN,EAAAC,GACA,MAAAkU,IAAA/nB,KAAAgoB,GAAAhoB,KAAA4T,EAAAC,GAAA,KAGAgX,KAAA,SAAA1D,EAAAJ,GACA,OAAA/mB,KAAA2Y,MAAArK,GAAA6Y,GAAAJ,IAGA7W,KAAA,SAAA+Z,GACA,MAAAlC,IAAA/nB,KAAAgqB,GAAAhqB,KAAAiqB,KAGApd,OAAA,WACA,MAAA7M,MAAA0mB,WAAAC,KAMAgO,QAAA,WACA,MAAA30B,MAAAuG,MAAA,OAGAquB,QAAA,WACA,MAAA5qB,UAAAhK,KAAAyL,KAAA,IAAAzL,KAAAyL,MAAAzL,KAAA6qB,KAAA,WAAiF,YAGjFjO,MAAA,SAAAuK,EAAAJ,GACA,MAAA3T,GACA+T,EAAAnnB,KAAAsV,QAAApP,OAAAihB,EAAAJ,GAAA/mB,OAIA60B,QAAA,SAAAtN,EAAAR,GACA,MAAAO,IAAAtnB,KAAAunB,EAAAR,IAGAxO,OAAA,SAAA4X,GACA,MAAAjiB,GAAAlO,KAAAmwB,IAGAxa,SAAA,WACA,GAAAX,GAAAhV,IACA,IAAAgV,EAAAmC,OAEA,UAAApB,GAAAf,EAAAmC,OAEA,IAAA2d,GAAA9f,EAAAM,QAAArP,IAAAuoB,IAAA5Y,cAEA,OADAkf,GAAArf,aAAA,WAAkD,MAAAT,GAAAM,SAClDwf,GAGAC,UAAA,SAAA5N,EAAAJ,GACA,MAAA/mB,MAAAkG,OAAAoI,GAAA6Y,GAAAJ,IAGAkN,UAAA,SAAA9M,EAAAJ,EAAAvG,GACA,GAAAtZ,GAAAsZ,CAOA,OANAxgB,MAAAsT,UAAA,SAAAiB,EAAA1L,EAAApI,GACA,GAAA0mB,EAAA5mB,KAAAwmB,EAAAxS,EAAA1L,EAAApI,GAEA,MADAyG,IAAA2B,EAAA0L,IACA,IAGArN,GAGA8tB,QAAA,SAAA7N,EAAAJ,GACA,GAAA1P,GAAArX,KAAAi0B,UAAA9M,EAAAJ,EACA,OAAA1P,MAAA,IAGA4d,SAAA,SAAA9N,EAAAJ,EAAAvG,GACA,MAAAxgB,MAAAwV,aAAAwB,UAAA7P,KAAAggB,EAAAJ,EAAAvG,IAGA0U,cAAA,SAAA/N,EAAAJ,EAAAvG,GACA,MAAAxgB,MAAAwV,aAAAwB,UAAAid,UAAA9M,EAAAJ,EAAAvG,IAGA2U,YAAA,SAAAhO,EAAAJ,GACA,MAAA/mB,MAAAwV,aAAAwB,UAAAge,QAAA7N,EAAAJ,IAGAqO,MAAA,WACA,MAAAp1B,MAAAmH,KAAAoM,IAGA8hB,QAAA,SAAAvO,EAAAC,GACA,MAAAgB,IAAA/nB,KAAA4pB,GAAA5pB,KAAA8mB,EAAAC,KAGAoC,QAAA,SAAAG,GACA,MAAAvB,IAAA/nB,KAAAqpB,GAAArpB,KAAAspB,GAAA,KAGA7T,aAAA,WACA,UAAAwQ,IAAAjmB,OAGAmM,IAAA,SAAAmpB,EAAA9U,GACA,MAAAxgB,MAAAmH,KAAA,SAAA2R,EAAA/X,GAA0C,MAAAoX,GAAApX,EAAAu0B,IAA0BtrB,OAAAwW,IAGpE+U,MAAA,SAAAC,EAAAhV;AAMA,IALA,GAIA3G,GAJA4b,EAAAz1B,KAGAqT,EAAA4X,GAAAuK,KAEA3b,EAAAxG,EAAAe,QAAAK,MAAA,CACA,GAAA1T,GAAA8Y,EAAAtP,KAEA,IADAkrB,OAAAtpB,IAAAspB,EAAAtpB,IAAApL,EAAAmY,OACAuc,IAAAvc,GACA,MAAAsH,GAGA,MAAAiV,IAGAC,QAAA,SAAAnO,EAAAR,GACA,MAAAY,IAAA3nB,KAAAunB,EAAAR,IAGA9N,IAAA,SAAAqc,GACA,MAAAt1B,MAAAmM,IAAAmpB,EAAApc,UAGAyc,MAAA,SAAAH,GACA,MAAAx1B,MAAAu1B,MAAAC,EAAAtc,UAGA0c,SAAA,SAAAviB,GAEA,MADAA,GAAA,kBAAAA,GAAAiT,SAAAjT,EAAAlC,EAAAkC,GACArT,KAAA2Y,MAAA,SAAApO,GAA0C,MAAA8I,GAAAiT,SAAA/b,MAG1CsrB,WAAA,SAAAxiB,GAEA,MADAA,GAAA,kBAAAA,GAAAuiB,SAAAviB,EAAAlC,EAAAkC,GACAA,EAAAuiB,SAAA51B,OAGA81B,MAAA,SAAA5F,GACA,MAAAlwB,MAAAg1B,QAAA,SAAAzqB,GAA4C,MAAA4N,GAAA5N,EAAA2lB,MAG5C+C,OAAA,WACA,MAAAjzB,MAAAsV,QAAArP,IAAAsoB,IAAA3Y,gBAGAmgB,KAAA,WACA,MAAA/1B,MAAAsV,QAAA0B,UAAAoe,SAGAY,UAAA,SAAA9F,GACA,MAAAlwB,MAAAwV,aAAAwB,UAAA8e,MAAA5F,IAGAjd,IAAA,SAAAgX,GACA,MAAAE,IAAAnqB,KAAAiqB,IAGAgM,MAAA,SAAAnP,EAAAmD,GACA,MAAAE,IAAAnqB,KAAAiqB,EAAAnD,IAGA5S,IAAA,SAAA+V,GACA,MAAAE,IAAAnqB,KAAAiqB,EAAAwE,GAAAxE,GAAA8E,KAGAmH,MAAA,SAAApP,EAAAmD,GACA,MAAAE,IAAAnqB,KAAAiqB,EAAAwE,GAAAxE,GAAA8E,GAAAjI,IAGAqP,KAAA,WACA,MAAAn2B,MAAAuG,MAAA,IAGA6vB,KAAA,SAAAC,GACA,MAAAr2B,MAAAuG,MAAAyM,KAAAC,IAAA,EAAAojB,KAGAC,SAAA,SAAAD,GACA,MAAAtO,IAAA/nB,UAAAsV,QAAA0B,UAAAof,KAAAC,GAAArf,YAGAuf,UAAA,SAAApP,EAAAJ,GACA,MAAAgB,IAAA/nB,KAAA4oB,GAAA5oB,KAAAmnB,EAAAJ,GAAA,KAGAyP,UAAA,SAAArP,EAAAJ,GACA,MAAA/mB,MAAAu2B,UAAAjoB,GAAA6Y,GAAAJ,IAGAkK,OAAA,SAAAnK,EAAAmD,GACA,MAAAlC,IAAA/nB,KAAAgqB,GAAAhqB,KAAAiqB,EAAAnD,KAGA2P,KAAA,SAAAJ,GACA,MAAAr2B,MAAAuG,MAAA,EAAAyM,KAAAC,IAAA,EAAAojB,KAGAK,SAAA,SAAAL,GACA,MAAAtO,IAAA/nB,UAAAsV,QAAA0B,UAAAyf,KAAAJ,GAAArf,YAGA2f,UAAA,SAAAxP,EAAAJ,GACA,MAAAgB,IAAA/nB,KAAAyoB,GAAAzoB,KAAAmnB,EAAAJ,KAGA6P,UAAA,SAAAzP,EAAAJ,GACA,MAAA/mB,MAAA22B,UAAAroB,GAAA6Y,GAAAJ,IAGA6L,SAAA,WACA,MAAA5yB,MAAA4V,gBAMAmF,SAAA,WACA,MAAA/a,MAAAwY,SAAAxY,KAAAwY,OAAAwW,GAAAhvB,SAgBA,IAAA62B,IAAA1lB,EAAAlQ,SACA41B,IAAA7kB,KAAA,EACA6kB,GAAAnH,IAAAmH,GAAAhqB,OACAgqB,GAAArD,OAAAqD,GAAAvxB,QACAuxB,GAAA9C,iBAAArF,GACAmI,GAAA/G,QACA+G,GAAA9G,SAAA,WAA2C,MAAA/vB,MAAA0Q,YAC3CmmB,GAAAC,MAAAD,GAAAxB,QACAwB,GAAAE,SAAAF,GAAAvQ,SAEA6H,GAAA7c,GAIAoU,KAAA,WACA,MAAAqC,IAAA/nB,KAAAkmB,GAAAlmB,QAGAg3B,WAAA,SAAAlQ,EAAAC,GAA2C,GAAAP,GAAAxmB,KAC3CqnB,EAAA,CACA,OAAAU,IAAA/nB,KACAA,KAAAsV,QAAArP,IACA,SAAAsO,EAAA1L,GAA2B,MAAAie,GAAAvmB,KAAAwmB,GAAAle,EAAA0L,GAAA8S,IAAAb,KAC3B/Q,iBAIAwhB,QAAA,SAAAnQ,EAAAC,GAAwC,GAAAP,GAAAxmB,IACxC,OAAA+nB,IAAA/nB,KACAA,KAAAsV,QAAAoQ,OAAAzf,IACA,SAAA4C,EAAA0L,GAA2B,MAAAuS,GAAAvmB,KAAAwmB,EAAAle,EAAA0L,EAAAiS,KAC3Bd,UAMA,IAAAwR,IAAA5lB,EAAArQ,SACAi2B,IAAAhlB,KAAA,EACAglB,GAAAxH,IAAAmH,GAAAne,QACAwe,GAAA1D,OAAAqD,GAAAnD,SACAwD,GAAAnD,iBAAA,SAAAxf,EAAA1L,GAA6D,MAAA8lB,MAAAC,UAAA/lB,GAAA,KAAA6lB,GAAAna,IAI7D4Z,GAAA1c,GAIA+D,WAAA,WACA,UAAAmQ,IAAA3lB,MAAA,IAMAkG,OAAA,SAAAihB,EAAAJ,GACA,MAAAgB,IAAA/nB,KAAAknB,GAAAlnB,KAAAmnB,EAAAJ,GAAA,KAGAtjB,UAAA,SAAA0jB,EAAAJ,GACA,GAAA1P,GAAArX,KAAAi0B,UAAA9M,EAAAJ,EACA,OAAA1P,KAAA,OAGAtK,QAAA,SAAAmjB,GACA,GAAAnvB,GAAAf,KAAA81B,MAAA5F,EACA,OAAAlmB,UAAAjJ,GAAA,EAAAA,GAGA6F,YAAA,SAAAspB,GACA,GAAAnvB,GAAAf,KAAAg2B,UAAA9F,EACA,OAAAlmB,UAAAjJ,GAAA,EAAAA,GAGAiW,QAAA,WACA,MAAA+Q,IAAA/nB,KAAAinB,GAAAjnB,MAAA,KAGAuG,MAAA,SAAAqN,EAAAC,GACA,MAAAkU,IAAA/nB,KAAAgoB,GAAAhoB,KAAA4T,EAAAC,GAAA,KAGA5G,OAAA,SAAAnI,EAAAqyB,GACA,GAAAC,GAAArtB,UAAAtH,MAEA,IADA00B,EAAAnkB,KAAAC,IAAA,EAAAkkB,EAAA,GACA,IAAAC,GAAA,IAAAA,IAAAD,EACA,MAAAn3B,KAKA8E,GAAAgP,EAAAhP,IAAA,EAAA9E,KAAA4c,QAAA5c,KAAAyL,KACA,IAAA4rB,GAAAr3B,KAAAuG,MAAA,EAAAzB,EACA,OAAAijB,IACA/nB,KACA,IAAAo3B,EACAC,EACAA,EAAAjtB,OAAAyI,EAAA9I,UAAA,GAAA/J,KAAAuG,MAAAzB,EAAAqyB,MAOA/zB,cAAA,SAAA+jB,EAAAJ,GACA,GAAA1P,GAAArX,KAAAk1B,cAAA/N,EAAAJ,EACA,OAAA1P,KAAA,OAGA+d,MAAA,WACA,MAAAp1B,MAAAmM,IAAA,IAGAgd,QAAA,SAAAG,GACA,MAAAvB,IAAA/nB,KAAAqpB,GAAArpB,KAAAspB,GAAA,KAGAnd,IAAA,SAAArH,EAAA0b,GAEA,MADA1b,GAAA0O,EAAAxT,KAAA8E,GACAA,EAAA,GAAA9E,KAAAyL,OAAA6N,KACAtP,SAAAhK,KAAAyL,MAAA3G,EAAA9E,KAAAyL,KACA+U,EACAxgB,KAAAmH,KAAA,SAAA2R,EAAA/X,GAAqC,MAAAA,KAAA+D,GAAqBkF,OAAAwW,IAG1DvH,IAAA,SAAAnU,GAEA,MADAA,GAAA0O,EAAAxT,KAAA8E,GACAA,GAAA,IAAAkF,SAAAhK,KAAAyL,KACAzL,KAAAyL,OAAA6N,KAAAxU,EAAA9E,KAAAyL,KACAzL,KAAA+M,QAAAjI,MAAA,IAIAwyB,UAAA,SAAAxN,GACA,MAAA/B,IAAA/nB,KAAA6pB,GAAA7pB,KAAA8pB,KAGAyN,WAAA,WACA,GAAA5X,IAAA3f,MAAAoK,OAAAyI,EAAA9I,YACAytB,EAAAlN,GAAAtqB,KAAAsV,QAAA3D,EAAAqe,GAAArQ,GACA8X,EAAAD,EAAArO,SAAA,EAIA,OAHAqO,GAAA/rB,OACAgsB,EAAAhsB,KAAA+rB,EAAA/rB,KAAAkU,EAAAld,QAEAslB,GAAA/nB,KAAAy3B,IAGAxE,OAAA,WACA,MAAAtZ,GAAA,EAAA3Z,KAAAyL,OAGAsqB,KAAA,WACA,MAAA/1B,MAAAmM,KAAA,IAGAoqB,UAAA,SAAApP,EAAAJ,GACA,MAAAgB,IAAA/nB,KAAA4oB,GAAA5oB,KAAAmnB,EAAAJ,GAAA,KAGA2Q,IAAA,WACA,GAAA/X,IAAA3f,MAAAoK,OAAAyI,EAAA9I,WACA,OAAAge,IAAA/nB,KAAAsqB,GAAAtqB,KAAA8uB,GAAAnP,KAGAgY,QAAA,SAAAnN,GACA,GAAA7K,GAAA9M,EAAA9I,UAEA,OADA4V,GAAA,GAAA3f,KACA+nB,GAAA/nB,KAAAsqB,GAAAtqB,KAAAwqB,EAAA7K,OAKAlO,EAAAxQ,UAAAmR,KAAA,EACAX,EAAAxQ,UAAAuR,KAAA,EAIA2b,GAAAvc,GAIAzF,IAAA,SAAA5B,EAAAiW,GACA,MAAAxgB,MAAAiZ,IAAA1O,KAAAiW,GAGA8F,SAAA,SAAA/b,GACA,MAAAvK,MAAAiZ,IAAA1O,IAMA0oB,OAAA,WACA,MAAAjzB,MAAA4yB,cAKAhhB,EAAA3Q,UAAAgY,IAAA4d,GAAAvQ,SACA1U,EAAA3Q,UAAA81B,SAAAnlB,EAAA3Q,UAAAqlB,SAKA6H,GAAA3c,EAAAF,EAAArQ,WACAktB,GAAAxc,EAAAF,EAAAxQ,WACAktB,GAAArc,EAAAF,EAAA3Q,WAEAktB,GAAA9T,GAAA/I,EAAArQ,WACAktB,GAAA7T,GAAA7I,EAAAxQ,WACAktB,GAAA5T,GAAA3I,EAAA3Q,UAuEA,IAAA22B,KAEAzmB,WAEAE,MACA+I,cACA4B,OACA+I,cACAhjB,QACAyrB,SACAnB,OACAY,cAEA9B,UACAxR,QACAR,SAEAhB,KACAV,SAIA,OAAAmgB","file":"marbles.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marbles\"] = factory();\n\telse\n\t\troot[\"Marbles\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marbles\"] = factory();\n\telse\n\t\troot[\"Marbles\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _util = __webpack_require__(1);\n\t\n\tvar util = _interopRequireWildcard(_util);\n\t\n\tvar _logic = __webpack_require__(2);\n\t\n\tvar logic = _interopRequireWildcard(_logic);\n\t\n\tvar _immutable = __webpack_require__(6);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar TOKEN_REGEX = /{([^}]+)}/g;\n\tvar DIGIT_REGEX = /\\d+/;\n\t\n\tfunction rootSegment() {\n\t  return {\n\t    id: 'root',\n\t    fragment: '',\n\t    tokens: {},\n\t    tokenData: {},\n\t    rule: function rule() {\n\t      return true;\n\t    }\n\t  };\n\t}\n\t\n\tfunction listWithRoot() {\n\t  return (0, _immutable.List)([rootSegment()]);\n\t}\n\t\n\tfunction setTokenData(segment, data) {\n\t  return util.assign({}, segment, { tokenData: util.isObject(data) ? data : {} });\n\t}\n\t\n\tfunction stripOuterBraces(dynamicToken) {\n\t  return dynamicToken.substr(1, dynamicToken.length - 2);\n\t}\n\t\n\tfunction arraySwap(i, j, array) {\n\t  var tmp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = tmp;\n\t}\n\t\n\tfunction childOf(parentId) {\n\t  return function (segmentId, list) {\n\t    var parentIndex = list.findLastIndex(function (node) {\n\t      return node.id === parentId;\n\t    });\n\t    var nodeIndex = list.findLastIndex(function (node) {\n\t      return node.id === segmentId;\n\t    });\n\t    return parentIndex !== -1 && nodeIndex === parentIndex + 1;\n\t  };\n\t}\n\t\n\tfunction present(requiredSegmentId) {\n\t  return function (segmentId, list) {\n\t    return list.findIndex(function (node) {\n\t      return node.id === requiredSegmentId;\n\t    }) !== -1;\n\t  };\n\t}\n\t\n\t// TODO: memoize\n\tfunction regexify(seg) {\n\t  var newSegment = seg.fragment.replace(TOKEN_REGEX, function (token) {\n\t    var tokenName = stripOuterBraces(token);\n\t    var regex = seg.tokens[tokenName];\n\t    if (!regex) {\n\t      throw new Error('\\n        The \\'' + seg.id + '\\' segment is missing a regex for its \\'' + token + '\\' dynamic token. \\n\\n        Please add a \\'' + tokenName + '\\' property with a RegExp value to that segment\\'s \\'tokens\\' config.\\n\\n        In general, every segment with dynamic tokens requires a \\n        \\'token\\' config with a regex for every dynamic token in that segment.\\n      ');\n\t    }\n\t    return regex.source;\n\t  });\n\t  return new RegExp('' + newSegment);\n\t}\n\t\n\tfunction extractData(rawFragment, segment) {\n\t  var tokens = segment.tokens;\n\t  var searchString = rawFragment;\n\t  var tokenKeys = util.keys(tokens);\n\t  var tokenData = tokenKeys.reduce(function (data, tokenName) {\n\t    var matches = searchString.match(tokens[tokenName]);\n\t    var match = util.arrayHead(matches);\n\t    searchString = searchString.substr(matches.index + match.length);\n\t    data[tokenName] = match;\n\t    return data;\n\t  }, {});\n\t  return tokenData;\n\t}\n\t\n\tfunction canPush(segment, list) {\n\t  var newList = list.push(segment);\n\t  if (segment && segment.rule(segment.id, newList)) {\n\t    return true;\n\t  }\n\t  return false;\n\t}\n\t\n\t// TODO: memoize\n\tfunction routeToList(route, segments) {\n\t  var segs = segments.toArray();\n\t  var list = (0, _immutable.List)();\n\t  var matchString = route;\n\t  var leftWall = 0;\n\t  var finished = false;\n\t  while (!finished) {\n\t    finished = true;\n\t    for (var i = leftWall; i < segs.length; i++) {\n\t      var seg = segs[i];\n\t      var regex = regexify(seg);\n\t      var match = util.arrayHead(matchString.match(regex));\n\t      if (util.isString(match) && canPush(seg, list)) {\n\t        var data = extractData(match, seg);\n\t        matchString = matchString.replace(match, '');\n\t        arraySwap(i, leftWall, segs);\n\t        leftWall += 1;\n\t        finished = false;\n\t        list = list.push(setTokenData(seg, data));\n\t        break;\n\t      }\n\t    }\n\t  }\n\t  return list;\n\t}\n\t\n\tfunction replaceTokens(string, data) {\n\t  return string.replace(TOKEN_REGEX, function (match) {\n\t    return data[stripOuterBraces(match)];\n\t  });\n\t}\n\t\n\t// TODO: memoize\n\tfunction listToRoute(list, leadingSlash, trailingSlash) {\n\t  var fragments = list.map(function (node) {\n\t    return replaceTokens(node.fragment, node.tokenData);\n\t  }).filter(function (frag) {\n\t    return frag !== '';\n\t  });\n\t  var hash = fragments.join('/');\n\t  return hash ? '' + (leadingSlash ? '/' : '') + hash + (trailingSlash ? '/' : '') : hash;\n\t}\n\t\n\tfunction validateNodesAfter(index, list) {\n\t  return list.reduce(function (newList, node, i) {\n\t    if (i > index && canPush(node, newList)) {\n\t      return newList.push(node);\n\t    }\n\t    return newList;\n\t  }, list.slice(0, index + 1));\n\t}\n\t\n\tfunction chainData(list, upToNode) {\n\t  var data = util.emptyObject();\n\t  var stopIndex = list.lastIndexOf(upToNode);\n\t  return list.reduce(function (chainedData, node, index) {\n\t    if (stopIndex !== -1 && index > stopIndex) {\n\t      return chainedData;\n\t    }\n\t    return util.assign(chainedData, node.tokenData);\n\t  }, data);\n\t}\n\t\n\tfunction listDiff(from, against, diffData) {\n\t  return from.reduce(function (newList, node) {\n\t    var found = against.find(function (_ref) {\n\t      var id = _ref.id;\n\t      return id === node.id;\n\t    });\n\t    if (!found || diffData && !util.equal(found.tokenData, node.tokenData)) {\n\t      return newList.push(node);\n\t    }\n\t    return newList;\n\t  }, (0, _immutable.List)());\n\t}\n\t\n\tfunction handleActivations(newList, oldList, subscribers) {\n\t  var activated = listDiff(newList, oldList, true);\n\t  activated.forEach(function (listNode) {\n\t    subscribers[listNode.id].activated.forEach(function (handler) {\n\t      setTimeout(function () {\n\t        handler(chainData(newList));\n\t      }, 0);\n\t    });\n\t  });\n\t}\n\t\n\tfunction handleDeactivations(newList, oldList, subscribers) {\n\t  var deactivated = listDiff(oldList, newList, false);\n\t  deactivated.forEach(function (listNode) {\n\t    subscribers[listNode.id].deactivated.forEach(function (handler) {\n\t      setTimeout(function () {\n\t        return handler();\n\t      }, 0);\n\t    });\n\t  });\n\t}\n\t\n\tfunction assertValidSegment(seg) {\n\t  if (!(util.isObject(seg) && util.isString(seg.id) && util.isString(seg.fragment) && util.isFunction(seg.rule) && (typeof seg.tokens === 'undefined' || util.isObject(seg.tokens)))) {\n\t    throw new Error('\\n          Invalid segment. Segments must conform to the following interface: \\n          {\\n            id: string,\\n            fragment: string,\\n            rule: (segmentId: string, routeList: ImmutableList): Boolean,\\n            tokens?: {\\n              [tokenName]: RegExp\\n            }\\n          }\\n        ');\n\t  }\n\t}\n\t\n\tfunction assertOptionsOk(options) {\n\t  if (options && !util.isObject(options)) {\n\t    throw new Error('Invalid options. Please read the docs for details.');\n\t  }\n\t}\n\t\n\tfunction assertValidSegments(segments) {\n\t  if (!util.isArray(segments)) {\n\t    throw new Error('\\n        Invalid segments configuration. Segments configuration must be an array of Segment objects.\\n        Please consult the documentation for more information on the Segment interface.\\n      ');\n\t  }\n\t  segments.forEach(assertValidSegment);\n\t  segments.reduce(function (set, seg) {\n\t    if (set[seg.id]) {\n\t      throw new Error('\\n        Duplicate segment ID \\'' + seg.id + '\\'!\\n        Please remove this duplicate from your segment configs.\\n      ');\n\t    }\n\t    set[seg.id] = true;\n\t    return set;\n\t  }, {});\n\t}\n\t\n\tfunction normalizeSegment(segment) {\n\t  return util.assign({\n\t    tokens: {},\n\t    tokenData: {}\n\t  }, segment);\n\t}\n\t\n\tfunction normalizeSegments(segments) {\n\t  return (0, _immutable.List)(segments.map(function (segment) {\n\t    return normalizeSegment(segment);\n\t  }));\n\t}\n\t\n\tfunction assertValidListenerObject(listener) {\n\t  if (!util.isObject(listener) || typeof listener.activated !== 'undefined' && !util.isFunction(listener.activated) || typeof listener.deactivated !== 'undefined' && !util.isFunction(listener.deactivated)) {\n\t    throw new Error('\\n      Invalid ListenerObject. ListenerObjects must conform to the following interface: \\n      {\\n        activated?: (data: Object): void,\\n        deactivated?: (): void \\n      }\\n    ');\n\t  }\n\t}\n\t\n\tfunction assertValidSubscription(subscription) {\n\t  if (!util.isObject(subscription)) {\n\t    throw new Error('\\n      Invalid Subscription. Subscriptions must conform to the following interface:\\n      {\\n        [segmentId: string]: ListenerObject\\n      }\\n    ');\n\t  }\n\t  util.keys(subscription).forEach(function (k) {\n\t    return assertValidListenerObject(subscription[k]);\n\t  });\n\t}\n\t\n\tmodule.exports = function () {\n\t  function Marbles(segmentsConfig) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t    var win = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n\t\n\t    _classCallCheck(this, Marbles);\n\t\n\t    var defaultOptions = {\n\t      leadingSlash: true,\n\t      trailingSlash: true\n\t    };\n\t\n\t    assertValidSegments(segmentsConfig);\n\t    assertOptionsOk(options);\n\t    this.options = util.assign({}, defaultOptions, options);\n\t    this.segments = normalizeSegments([rootSegment()].concat(segmentsConfig));\n\t    this.subscribers = Object.freeze(this.segments.reduce(function (obj, _ref2) {\n\t      var id = _ref2.id;\n\t\n\t      obj[id] = {\n\t        activated: [],\n\t        deactivated: []\n\t      };\n\t      return obj;\n\t    }, {}));\n\t    this.win = win;\n\t    this.list = listWithRoot();\n\t  }\n\t\n\t  _createClass(Marbles, [{\n\t    key: 'start',\n\t    value: function start() {\n\t      var _this = this;\n\t\n\t      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.win;\n\t\n\t      this.processRoute(win.location.hash);\n\t      this.hashChangeHandler = function () {\n\t        _this.processRoute(win.location.hash, true);\n\t      };\n\t      win.addEventListener('hashchange', this.hashChangeHandler);\n\t    }\n\t  }, {\n\t    key: 'stop',\n\t    value: function stop() {\n\t      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.win;\n\t\n\t      win.removeEventListener('hashchange', this.hashChangeHandler);\n\t    }\n\t    // read the given route and fire activate and deactivate accordingly\n\t\n\t  }, {\n\t    key: 'processRoute',\n\t    value: function processRoute() {\n\t      var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.win.location.hash;\n\t      var replaceHistory = arguments[1];\n\t\n\t      var route = hash.replace('#', '');\n\t      var list = routeToList(route, this.segments);\n\t      return this.processList(list, replaceHistory);\n\t    }\n\t  }, {\n\t    key: 'processList',\n\t    value: function processList(list, replaceHistory) {\n\t      handleActivations(list, this.list, this.subscribers);\n\t      handleDeactivations(list, this.list, this.subscribers);\n\t      this.list = list;\n\t      var newRoute = listToRoute(this.list, this.options.leadingSlash, this.options.trailingSlash);\n\t      var newHash = '#' + newRoute;\n\t      if (replaceHistory) {\n\t        this.win.history.replaceState(util.emptyObject(), '', newHash);\n\t      } else {\n\t        this.win.location.hash = newHash;\n\t      }\n\t      return newRoute;\n\t    }\n\t  }, {\n\t    key: 'activate',\n\t    value: function activate(segmentId, data) {\n\t      var list = this.list;\n\t      var seg = this.segments.find(function (_ref3) {\n\t        var id = _ref3.id;\n\t        return id === segmentId;\n\t      });\n\t      var segmentWithData = setTokenData(seg, data);\n\t      var foundIndex = list.findIndex(function (_ref4) {\n\t        var id = _ref4.id;\n\t        return id === segmentId;\n\t      });\n\t      var newList = list;\n\t      var insertionIndex = 0;\n\t      if (foundIndex !== -1) {\n\t        newList = newList.set(foundIndex, segmentWithData);\n\t      } else {\n\t        for (insertionIndex; insertionIndex <= list.size; insertionIndex++) {\n\t          if (canPush(segmentWithData, newList.slice(0, insertionIndex))) {\n\t            newList = newList.insert(insertionIndex, segmentWithData);\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return this.processList(validateNodesAfter(insertionIndex, newList));\n\t    }\n\t  }, {\n\t    key: 'deactivate',\n\t    value: function deactivate(segmentId) {\n\t      var removalIndex = this.list.findLastIndex(function (node) {\n\t        return node.id === segmentId;\n\t      });\n\t      var list = this.list;\n\t      if (removalIndex !== -1) {\n\t        list = this.list.delete(removalIndex);\n\t      }\n\t      return this.processList(list);\n\t    }\n\t  }, {\n\t    key: 'subscribe',\n\t    value: function subscribe(subscription) {\n\t      assertValidSubscription(subscription);\n\t      var subs = this.subscribers;\n\t      util.keys(subscription).forEach(function (k) {\n\t        var activators = subscription[k].activated || [];\n\t        var deactivators = subscription[k].deactivated || [];\n\t        subs[k].activated = subs[k].activated.concat(activators);\n\t        subs[k].deactivated = subs[k].deactivated.concat(deactivators);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'unsubscribe',\n\t    value: function unsubscribe(subscription) {\n\t      assertValidSubscription(subscription);\n\t      var subs = this.subscribers;\n\t      util.keys(subscription).forEach(function (k) {\n\t        var activatorsToRm = subscription[k].activated || [];\n\t        var deactivatorsToRm = subscription[k].deactivated || [];\n\t        util.pull(activatorsToRm, subs[k].activated);\n\t        util.pull(deactivatorsToRm, subs[k].deactivated);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'getData',\n\t    value: function getData() {\n\t      return chainData(this.list);\n\t    }\n\t  }], [{\n\t    key: 'rules',\n\t    get: function get() {\n\t      return util.assign({\n\t        present: present,\n\t        childOf: childOf\n\t      }, logic);\n\t    }\n\t  }, {\n\t    key: 'Regex',\n\t    get: function get() {\n\t      return {\n\t        DIGITS: DIGIT_REGEX\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return Marbles;\n\t}();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar deepEqual = __webpack_require__(3);\n\t\n\tfunction emptyObject() {\n\t  return Object.create(null);\n\t}\n\t\n\tfunction isObject(any) {\n\t  return (typeof any === 'undefined' ? 'undefined' : _typeof(any)) === 'object' && any !== null && !(any instanceof Array);\n\t}\n\t\n\tfunction isArray(any) {\n\t  return any instanceof Array;\n\t}\n\t\n\tfunction isString(any) {\n\t  return typeof any === 'string';\n\t}\n\t\n\tfunction isFunction(any) {\n\t  return typeof any === 'function';\n\t}\n\t\n\tfunction keys(obj) {\n\t  return Object.keys(obj);\n\t}\n\t\n\tfunction assign() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  return Object.assign.apply(Object, args);\n\t}\n\t\n\tfunction arrayHead(array) {\n\t  if (typeof array === 'undefined' || !(array instanceof Array)) {\n\t    return undefined;\n\t  }\n\t  return array[0];\n\t}\n\t\n\tfunction pull(values, array) {\n\t  return values.map(function (val) {\n\t    var index = array.indexOf(val);\n\t    var results = [];\n\t    while (index !== -1) {\n\t      results = results.concat(array.splice(index, 1));\n\t      index = array.indexOf(val);\n\t    }\n\t    return results;\n\t  }).reduce(function (returnArray, subArray) {\n\t    return returnArray.concat(subArray);\n\t  }, []).reduce(function (returnArray, val) {\n\t    if (returnArray.indexOf(val) !== -1) {\n\t      return returnArray;\n\t    }\n\t    return returnArray.concat(val instanceof Array ? [val] : val);\n\t  }, []);\n\t}\n\t\n\tfunction without(values, array) {\n\t  var newArray = array.slice();\n\t  pull(values, newArray);\n\t  return newArray;\n\t}\n\t\n\tfunction peek(arr) {\n\t  if (!arr || !(arr instanceof Array)) {\n\t    return null;\n\t  }\n\t  return arr[arr.length - 1] || null;\n\t}\n\t\n\tfunction noop() {}\n\t\n\tfunction batchAsyncActions(fns, callback) {\n\t  if (!isArray(fns)) {\n\t    throw new TypeError('batchAsyncResults() expects an array of functions as the first parameter.');\n\t  }\n\t  var resolvedCount = 0;\n\t  var results = [];\n\t  fns.forEach(function (fn) {\n\t    fn(function (result) {\n\t      resolvedCount += 1;\n\t      results.push(result);\n\t      if (resolvedCount === fns.length) {\n\t        callback(results);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\texports.equal = deepEqual;\n\texports.emptyObject = emptyObject;\n\texports.isArray = isArray;\n\texports.isObject = isObject;\n\texports.isFunction = isFunction;\n\texports.isString = isString;\n\texports.batchAsyncActions = batchAsyncActions;\n\texports.noop = noop;\n\texports.keys = keys;\n\texports.peek = peek;\n\texports.assign = assign;\n\texports.arrayHead = arrayHead;\n\texports.pull = pull;\n\texports.without = without;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.and = exports.or = exports.not = undefined;\n\t\n\tvar _util = __webpack_require__(1);\n\t\n\tvar util = _interopRequireWildcard(_util);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction boolEval(anything, args) {\n\t  if (util.isFunction(anything)) {\n\t    return anything.apply(null, args);\n\t  } else {\n\t    return Boolean(anything);\n\t  }\n\t}\n\t\n\tfunction not(argument) {\n\t  return function strictNot() {\n\t    for (var _len = arguments.length, extraArgs = Array(_len), _key = 0; _key < _len; _key++) {\n\t      extraArgs[_key] = arguments[_key];\n\t    }\n\t\n\t    return !boolEval(argument, extraArgs);\n\t  };\n\t}\n\t\n\tfunction or() {\n\t  for (var _len2 = arguments.length, predicates = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t    predicates[_key2] = arguments[_key2];\n\t  }\n\t\n\t  return function strictOr() {\n\t    for (var _len3 = arguments.length, extraArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t      extraArgs[_key3] = arguments[_key3];\n\t    }\n\t\n\t    for (var i = 0; i < predicates.length; i++) {\n\t      if (boolEval(predicates[i], extraArgs)) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  };\n\t}\n\t\n\tfunction and() {\n\t  for (var _len4 = arguments.length, predicates = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n\t    predicates[_key4] = arguments[_key4];\n\t  }\n\t\n\t  return function strictAnd() {\n\t    for (var _len5 = arguments.length, extraArgs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n\t      extraArgs[_key5] = arguments[_key5];\n\t    }\n\t\n\t    for (var i = 0; i < predicates.length; i++) {\n\t      if (!boolEval(predicates[i], extraArgs)) {\n\t        return false;\n\t      }\n\t    }\n\t    return predicates.length > 0;\n\t  };\n\t}\n\t\n\texports.not = not;\n\texports.or = or;\n\texports.and = and;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(5);\n\tvar isArguments = __webpack_require__(4);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// marbles.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d2c2bc38d598a92eed86","import * as util from './util';\nimport * as logic from './logic';\nimport { List } from 'immutable';\n\nconst TOKEN_REGEX = /{([^}]+)}/g;\nconst DIGIT_REGEX = /\\d+/;\n\nfunction rootSegment() {\n  return {\n    id: 'root',\n    fragment: '',\n    tokens: {},\n    tokenData: {},\n    rule: () => true\n  };\n}\n\nfunction listWithRoot() {\n  return List([rootSegment()]);\n}\n\nfunction setTokenData(segment, data) {\n  return util.assign({}, segment, { tokenData: util.isObject(data) ? data : {} });\n}\n\nfunction stripOuterBraces(dynamicToken) {\n  return dynamicToken.substr(1, dynamicToken.length - 2);\n}\n\nfunction arraySwap(i, j, array) {\n  const tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n}\n\nfunction childOf(parentId) {\n  return (segmentId, list) => {\n    const parentIndex = list.findLastIndex((node) => {\n      return node.id === parentId;\n    });\n    const nodeIndex = list.findLastIndex((node) => {\n      return node.id === segmentId;\n    });\n    return parentIndex !== -1 && nodeIndex === parentIndex + 1;\n  };\n}\n\nfunction present(requiredSegmentId) {\n  return (segmentId, list) => {\n    return list.findIndex((node) => {\n      return node.id === requiredSegmentId;\n    }) !== -1;\n  };\n}\n\n// TODO: memoize\nfunction regexify(seg) {\n  const newSegment = seg.fragment.replace(TOKEN_REGEX, (token) => {\n    const tokenName = stripOuterBraces(token);\n    const regex = seg.tokens[tokenName];\n    if (!regex) {\n      throw new Error(`\n        The '${seg.id}' segment is missing a regex for its '${token}' dynamic token. \n\n        Please add a '${tokenName}' property with a RegExp value to that segment's 'tokens' config.\n\n        In general, every segment with dynamic tokens requires a \n        'token' config with a regex for every dynamic token in that segment.\n      `);\n    }\n    return regex.source;\n  });\n  return new RegExp(`${newSegment}`);\n}\n\nfunction extractData(rawFragment, segment) {\n  const tokens = segment.tokens;\n  let searchString = rawFragment;\n  const tokenKeys = util.keys(tokens);\n  const tokenData = tokenKeys.reduce((data, tokenName) => {\n    const matches = searchString.match(tokens[tokenName]);\n    const match = util.arrayHead(matches);\n    searchString = searchString.substr(matches.index + match.length);\n    data[tokenName] = match;\n    return data;\n  }, {});\n  return tokenData;\n}\n\nfunction canPush(segment, list) {\n  const newList = list.push(segment);\n  if (segment && segment.rule(segment.id, newList)) {\n    return true;\n  }\n  return false;\n}\n\n// TODO: memoize\nfunction routeToList(route, segments) {\n  const segs = segments.toArray();\n  let list = List();\n  let matchString = route;\n  let leftWall = 0;\n  let finished = false;\n  while (!finished) {\n    finished = true;\n    for (let i = leftWall; i < segs.length; i++) {\n      const seg = segs[i];\n      const regex = regexify(seg);\n      const match = util.arrayHead(matchString.match(regex));\n      if (util.isString(match) && canPush(seg, list)) {\n        const data = extractData(match, seg);\n        matchString = matchString.replace(match, '');\n        arraySwap(i, leftWall, segs);\n        leftWall += 1;\n        finished = false;\n        list = list.push(setTokenData(seg, data));\n        break;\n      }\n    }\n  }\n  return list;\n}\n\nfunction replaceTokens(string, data) {\n  return string.replace(TOKEN_REGEX, (match) => data[stripOuterBraces(match)]);\n}\n\n// TODO: memoize\nfunction listToRoute(list, leadingSlash, trailingSlash) {\n  const fragments = list.map((node) => {\n    return replaceTokens(node.fragment, node.tokenData);\n  }).filter((frag) => frag !== '');\n  const hash = fragments.join('/');\n  return hash ? `${leadingSlash ? '/' : ''}${hash}${trailingSlash ? '/' : ''}` : hash;\n}\n\nfunction validateNodesAfter(index, list) {\n  return list.reduce((newList, node, i) => {\n    if (i > index && canPush(node, newList)) {\n      return newList.push(node);\n    }\n    return newList;\n  }, list.slice(0, index + 1));\n}\n\nfunction chainData(list, upToNode) {\n  const data = util.emptyObject();\n  const stopIndex = list.lastIndexOf(upToNode);\n  return list.reduce((chainedData, node, index) => {\n    if (stopIndex !== -1 && index > stopIndex) {\n      return chainedData;\n    }\n    return util.assign(chainedData, node.tokenData);\n  }, data);\n}\n\nfunction listDiff(from, against, diffData) {\n  return from.reduce((newList, node) => {\n    const found = against.find(({ id }) => id === node.id);\n    if (!found || diffData && !util.equal(found.tokenData, node.tokenData)) {\n      return newList.push(node);\n    }\n    return newList;\n  }, List());\n}\n\nfunction handleActivations(newList, oldList, subscribers) {\n  const activated = listDiff(newList, oldList, true);\n  activated.forEach((listNode) => {\n    subscribers[listNode.id].activated.forEach((handler) => {\n      setTimeout(() => {\n        handler(chainData(newList));\n      }, 0);\n    });\n  });\n}\n\nfunction handleDeactivations(newList, oldList, subscribers) {\n  const deactivated = listDiff(oldList, newList, false);\n  deactivated.forEach((listNode) => {\n    subscribers[listNode.id].deactivated.forEach((handler) => {\n      setTimeout(() => handler(), 0);\n    });\n  });\n}\n\nfunction assertValidSegment(seg) {\n  if (!(util.isObject(seg)\n    && util.isString(seg.id)\n    && util.isString(seg.fragment)\n    && util.isFunction(seg.rule)\n    && (\n      typeof seg.tokens === 'undefined' ||\n      util.isObject(seg.tokens)\n    ))) {\n    throw new Error(`\n          Invalid segment. Segments must conform to the following interface: \n          {\n            id: string,\n            fragment: string,\n            rule: (segmentId: string, routeList: ImmutableList): Boolean,\n            tokens?: {\n              [tokenName]: RegExp\n            }\n          }\n        `);\n  }\n}\n\nfunction assertOptionsOk(options) {\n  if (options && !util.isObject(options)) {\n    throw new Error('Invalid options. Please read the docs for details.');\n  }\n}\n\nfunction assertValidSegments(segments) {\n  if (!util.isArray(segments)) {\n    throw new Error(\n      `\n        Invalid segments configuration. Segments configuration must be an array of Segment objects.\n        Please consult the documentation for more information on the Segment interface.\n      `\n    );\n  }\n  segments.forEach(assertValidSegment);\n  segments.reduce((set, seg) => {\n    if (set[seg.id]) {\n      throw new Error(`\n        Duplicate segment ID '${seg.id}'!\n        Please remove this duplicate from your segment configs.\n      `);\n    }\n    set[seg.id] = true;\n    return set;\n  }, {});\n}\n\nfunction normalizeSegment(segment) {\n  return util.assign(\n    {\n      tokens: {},\n      tokenData: {}\n    },\n    segment\n  );\n}\n\nfunction normalizeSegments(segments) {\n  return List(segments.map((segment) => {\n    return normalizeSegment(segment);\n  }));\n}\n\nfunction assertValidListenerObject(listener) {\n  if (\n    !util.isObject(listener) ||\n    (\n      (typeof listener.activated !== 'undefined' &&\n        !util.isFunction(listener.activated)) ||\n      (typeof listener.deactivated !== 'undefined' &&\n        !util.isFunction(listener.deactivated))\n    )\n  ) {\n    throw new Error(`\n      Invalid ListenerObject. ListenerObjects must conform to the following interface: \n      {\n        activated?: (data: Object): void,\n        deactivated?: (): void \n      }\n    `);\n  }\n}\n\nfunction assertValidSubscription(subscription) {\n  if (!util.isObject(subscription)) {\n    throw new Error(`\n      Invalid Subscription. Subscriptions must conform to the following interface:\n      {\n        [segmentId: string]: ListenerObject\n      }\n    `);\n  }\n  util.keys(subscription).forEach((k) => assertValidListenerObject(subscription[k]));\n}\n\nmodule.exports = class Marbles {\n  constructor(segmentsConfig, options = {}, win = window) {\n    const defaultOptions = {\n      leadingSlash: true,\n      trailingSlash: true\n    };\n\n    assertValidSegments(segmentsConfig);\n    assertOptionsOk(options);\n    this.options = util.assign({}, defaultOptions, options);\n    this.segments = normalizeSegments([rootSegment()].concat(segmentsConfig));\n    this.subscribers = Object.freeze(this.segments.reduce((obj, { id }) => {\n      obj[id] = {\n        activated: [],\n        deactivated: []\n      };\n      return obj;\n    }, {}));\n    this.win = win;\n    this.list = listWithRoot();\n  }\n  static get rules() {\n    return util.assign({\n      present,\n      childOf\n    }, logic);\n  }\n  static get Regex() {\n    return {\n      DIGITS: DIGIT_REGEX\n    };\n  }\n  start(win = this.win) {\n    this.processRoute(win.location.hash);\n    this.hashChangeHandler = () => {\n      this.processRoute(win.location.hash, true);\n    };\n    win.addEventListener('hashchange', this.hashChangeHandler);\n  }\n  stop(win = this.win) {\n    win.removeEventListener('hashchange', this.hashChangeHandler);\n  }\n  // read the given route and fire activate and deactivate accordingly\n  processRoute(hash = this.win.location.hash, replaceHistory) {\n    const route = hash.replace('#', '');\n    const list = routeToList(route, this.segments);\n    return this.processList(list, replaceHistory);\n  }\n  processList(list, replaceHistory) {\n    handleActivations(list, this.list, this.subscribers);\n    handleDeactivations(list, this.list, this.subscribers);\n    this.list = list;\n    const newRoute = listToRoute(\n      this.list,\n      this.options.leadingSlash,\n      this.options.trailingSlash\n    );\n    const newHash = `#${newRoute}`;\n    if (replaceHistory) {\n      this.win.history.replaceState(util.emptyObject(), '', newHash);\n    } else {\n      this.win.location.hash = newHash;\n    }\n    return newRoute;\n  }\n  activate(segmentId, data) {\n    const list = this.list;\n    const seg = this.segments.find(({ id }) => id === segmentId);\n    const segmentWithData = setTokenData(seg, data);\n    const foundIndex = list.findIndex(({ id }) => id === segmentId);\n    let newList = list;\n    let insertionIndex = 0;\n    if (foundIndex !== -1) {\n      newList = newList.set(foundIndex, segmentWithData);\n    } else {\n      for (insertionIndex; insertionIndex <= list.size; insertionIndex++) {\n        if (canPush(segmentWithData, newList.slice(0, insertionIndex))) {\n          newList = newList.insert(insertionIndex, segmentWithData);\n          break;\n        }\n      }\n    }\n    return this.processList(validateNodesAfter(insertionIndex, newList));\n  }\n  deactivate(segmentId) {\n    const removalIndex = this.list.findLastIndex((node) => node.id === segmentId);\n    let list = this.list;\n    if (removalIndex !== -1) {\n      list = this.list.delete(removalIndex);\n    }\n    return this.processList(list);\n  }\n  subscribe(subscription) {\n    assertValidSubscription(subscription);\n    const subs = this.subscribers;\n    util.keys(subscription).forEach((k) => {\n      const activators = subscription[k].activated || [];\n      const deactivators = subscription[k].deactivated || [];\n      subs[k].activated = subs[k].activated.concat(activators);\n      subs[k].deactivated = subs[k].deactivated.concat(deactivators);\n    });\n  }\n  unsubscribe(subscription) {\n    assertValidSubscription(subscription);\n    const subs = this.subscribers;\n    util.keys(subscription).forEach((k) => {\n      const activatorsToRm = subscription[k].activated || [];\n      const deactivatorsToRm = subscription[k].deactivated || [];\n      util.pull(activatorsToRm, subs[k].activated);\n      util.pull(deactivatorsToRm, subs[k].deactivated);\n    });\n  }\n  getData() {\n    return chainData(this.list);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/marbles.js","const deepEqual = require('deep-equal');\n\nfunction emptyObject() {\n  return Object.create(null);\n}\n\nfunction isObject(any) {\n  return typeof any === 'object' && any !== null && !(any instanceof Array);\n}\n\nfunction isArray(any) {\n  return any instanceof Array;\n}\n\nfunction isString(any) {\n  return typeof any === 'string';\n}\n\nfunction isFunction(any) {\n  return typeof any === 'function';\n}\n\nfunction keys(obj) {\n  return Object.keys(obj);\n}\n\nfunction assign(...args) {\n  return Object.assign.apply(Object, args);\n}\n\nfunction arrayHead(array) {\n  if (typeof array === 'undefined' || !(array instanceof Array)) {\n    return undefined;\n  }\n  return array[0];\n}\n\nfunction pull(values, array) {\n  return values.map((val) => {\n    let index = array.indexOf(val);\n    let results = [];\n    while (index !== -1) {\n      results = results.concat(array.splice(index, 1));\n      index = array.indexOf(val);\n    }\n    return results;\n  })\n    .reduce((returnArray, subArray) => returnArray.concat(subArray), [])\n    .reduce((returnArray, val) => {\n      if (returnArray.indexOf(val) !== -1) {\n        return returnArray;\n      }\n      return returnArray.concat(val instanceof Array ? [val] : val);\n    }, []);\n}\n\nfunction without(values, array) {\n  const newArray = array.slice();\n  pull(values, newArray);\n  return newArray;\n}\n\nfunction peek(arr) {\n  if (!arr || !(arr instanceof Array)) {\n    return null;\n  }\n  return arr[arr.length - 1] || null;\n}\n\nfunction noop() { }\n\nfunction batchAsyncActions(fns, callback) {\n  if (!isArray(fns)) {\n    throw new TypeError(\n      'batchAsyncResults() expects an array of functions as the first parameter.'\n    );\n  }\n  let resolvedCount = 0;\n  const results = [];\n  fns.forEach((fn) => {\n    fn((result) => {\n      resolvedCount += 1;\n      results.push(result);\n      if (resolvedCount === fns.length) {\n        callback(results);\n      }\n    });\n  });\n}\n\nexport {\n  deepEqual as equal,\n  emptyObject,\n  isArray,\n  isObject,\n  isFunction,\n  isString,\n  batchAsyncActions,\n  noop,\n  keys,\n  peek,\n  assign,\n  arrayHead,\n  pull,\n  without\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","import * as util from './util.js';\n\nfunction boolEval(anything, args) {\n  if (util.isFunction(anything)) {\n    return anything.apply(null, args);\n  } else {\n    return Boolean(anything);\n  }\n}\n\nfunction not(argument) {\n  return function strictNot(...extraArgs) {\n    return !boolEval(argument, extraArgs);\n  };\n}\n\nfunction or(...predicates) {\n  return function strictOr(...extraArgs) {\n    for (let i = 0; i < predicates.length; i++) {\n      if (boolEval(predicates[i], extraArgs)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nfunction and(...predicates) {\n  return function strictAnd(...extraArgs) {\n    for (let i = 0; i < predicates.length; i++) {\n      if (!boolEval(predicates[i], extraArgs)) {\n        return false;\n      }\n    }\n    return predicates.length > 0;\n  };\n}\n\nexport {\n  not,\n  or,\n  and\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/logic.js","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/index.js\n// module id = 3\n// module chunks = 0","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/lib/is_arguments.js\n// module id = 4\n// module chunks = 0","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/lib/keys.js\n// module id = 5\n// module chunks = 0","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/immutable/dist/immutable.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}