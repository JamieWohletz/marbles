{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///marbles.min.js","webpack:///webpack/bootstrap 402d2fbbca21ddd28356","webpack:///./src/marbles.js","webpack:///./src/util.js","webpack:///./src/logic.js","webpack:///./~/deep-equal/index.js","webpack:///./~/deep-equal/lib/is_arguments.js","webpack:///./~/deep-equal/lib/keys.js","webpack:///./~/immutable/dist/immutable.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_classCallCheck","instance","Constructor","TypeError","rootSegment","fragment","tokens","tokenData","rule","listWithRoot","_immutable","List","setTokenData","segment","data","util","assign","isObject","stripOuterBraces","dynamicToken","substr","length","arraySwap","i","j","array","tmp","regexify","seg","newSegment","replace","TOKEN_REGEX","token","tokenName","regex","Error","source","RegExp","segmentMatch","string","match","extractData","searchString","tokenKeys","map","reduce","matches","arrayHead","index","matchingSegments","route","segments","keys","arr","segmentsWithData","str","concat","routeToList","matchingSegs","matchCount","leftWall","newList","added","node","listWithNode","push","replaceTokens","listToRoute","list","leadingSlash","trailingSlash","fragments","filter","frag","hash","join","chainData","upToNode","emptyObject","stopIndex","lastIndexOf","chainedData","listDiff","from","against","diffData","found","find","_ref","equal","handleActivations","oldList","subscribers","activated","forEach","listNode","handler","setTimeout","handleDeactivations","deactivated","isValidSegment","isString","isFunction","isValidConfig","conf","b","segId","assertOptionsOk","options","assertSegmentConfigOk","segmentConfig","normalizeSegment","normalizeSegments","norm","assertValidListenerObject","listener","assertValidSubscription","subscription","k","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","_util","_logic","logic","DIGIT_REGEX","Marbles","arguments","undefined","win","window","defaultOptions","defaultSegments","freeze","value","_this","processRoute","location","addEventListener","newRoute","newHash","console","log","history","replaceState","segmentId","segNode","l","withNode","withSeg","ok","removalIndex","findLastIndex","delete","subs","activators","deactivators","activatorsToRm","deactivatorsToRm","pull","requiredSegmentId","findIndex","parentId","parentIndex","nodeIndex","get","DIGITS","create","any","_typeof","Array","isArray","_len","args","_key","apply","values","val","indexOf","results","splice","returnArray","subArray","without","newArray","slice","peek","noop","batchAsyncActions","fns","callback","resolvedCount","fn","result","Symbol","iterator","constructor","deepEqual","boolEval","anything","Boolean","not","argument","extraArgs","or","_len2","predicates","_key2","_len3","_key3","and","_len4","_key4","_len5","_key5","isUndefinedOrNull","isBuffer","x","copy","objEquiv","a","opts","isArguments","pSlice","ka","objectKeys","kb","e","sort","actual","expected","Date","getTime","strict","supported","object","toString","unsupported","propertyIsEnumerable","supportsArgumentsClass","shim","global","createClass","ctor","superClass","Iterable","isIterable","Seq","KeyedIterable","isKeyed","KeyedSeq","IndexedIterable","isIndexed","IndexedSeq","SetIterable","isAssociative","SetSeq","maybeIterable","IS_ITERABLE_SENTINEL","maybeKeyed","IS_KEYED_SENTINEL","maybeIndexed","IS_INDEXED_SENTINEL","maybeAssociative","isOrdered","maybeOrdered","IS_ORDERED_SENTINEL","MakeRef","ref","SetRef","OwnerID","arrCopy","offset","len","Math","max","newArr","ii","ensureSize","iter","size","__iterate","returnTrue","wrapIndex","uint32Index","NaN","wholeSlice","begin","end","resolveBegin","resolveIndex","resolveEnd","defaultIndex","min","Iterator","next","iteratorValue","type","v","iteratorResult","done","iteratorDone","hasIterator","getIteratorFn","isIterator","maybeIterator","getIterator","iterable","iteratorFn","REAL_ITERATOR_SYMBOL","FAUX_ITERATOR_SYMBOL","isArrayLike","emptySequence","toSeq","seqFromValue","toKeyedSeq","fromEntrySeq","keyedSeqFromValue","entrySeq","toIndexedSeq","indexedSeqFromValue","toSetSeq","ArraySeq","_array","ObjectSeq","_object","_keys","IterableSeq","_iterable","IteratorSeq","_iterator","_iteratorCache","isSeq","maybeSeq","IS_SEQ_SENTINEL","EMPTY_SEQ","seq","maybeIndexedSeqFromValue","seqIterate","reverse","useKeys","cache","_cache","maxIndex","entry","__iterateUncached","seqIterator","__iteratorUncached","fromJS","json","converter","fromJSWith","","fromJSDefault","parentJSON","isPlainObj","toList","toMap","is","valueA","valueB","valueOf","equals","__hash","notAssociative","entries","every","flipped","cacheResult","_","allEqual","bSize","has","NOT_SET","Repeat","times","_value","Infinity","EMPTY_REPEAT","invariant","condition","error","Range","start","step","abs","_start","_end","_step","ceil","EMPTY_RANGE","Collection","KeyedCollection","IndexedCollection","SetCollection","smi","i32","o","h","STRING_HASH_CACHE_MIN_STRLEN","cachedHashString","hashString","hashCode","hashJSObj","stringHashCache","STRING_HASH_CACHE_SIZE","STRING_HASH_CACHE_MAX_SIZE","charCodeAt","usingWeakMap","weakMap","UID_HASH_KEY","canDefineProperty","getIENodeHash","objHashUID","set","isExtensible","nodeType","uniqueID","documentElement","assertNotInfinite","Map","emptyMap","isMap","withMutations","maybeMap","IS_MAP_SENTINEL","ArrayMapNode","ownerID","BitmapIndexedNode","bitmap","nodes","HashArrayMapNode","count","HashCollisionNode","keyHash","ValueNode","MapIterator","_type","_reverse","_stack","_root","mapIteratorFrame","mapIteratorValue","prev","__prev","makeMap","MapPrototype","__ownerID","__altered","EMPTY_MAP","updateMap","newRoot","newSize","didChangeSize","CHANGE_LENGTH","didAlter","DID_ALTER","updateNode","shift","update","isLeafNode","mergeIntoNode","newNode","idx1","MASK","idx2","SHIFT","createNodes","packNodes","excluding","packedII","packedNodes","bit","expandNodes","including","expandedNodes","SIZE","mergeIntoMapWith","merger","iterables","iters","mergeIntoCollectionWith","deepMerger","existing","mergeDeep","deepMergerWith","mergeDeepWith","nextValue","collection","mergeIntoMap","updateInDeepMap","keyPathIter","notSetValue","updater","isNotSet","existingValue","newValue","nextExisting","nextUpdated","remove","popCount","setIn","idx","canEdit","spliceIn","newLen","after","spliceOut","pop","empty","emptyList","isList","makeList","VNode","toArray","setSize","maybeList","IS_LIST_SENTINEL","iterateList","iterateNodeOrLeaf","level","iterateLeaf","iterateNode","tailPos","tail","left","to","right","DONE","_origin","_capacity","getTailOffset","_tail","_level","origin","capacity","ListPrototype","EMPTY_LIST","updateList","setListBounds","newTail","updateVNode","nodeHas","lowerNode","newLowerNode","editableVNode","listNodeFor","rawIndex","owner","oldOrigin","oldCapacity","newOrigin","newCapacity","clear","newLevel","offsetShift","oldTailOffset","newTailOffset","oldTail","removeAfter","removeBefore","beginIndex","mergeIntoListWith","maxSize","OrderedMap","emptyOrderedMap","isOrderedMap","maybeOrderedMap","makeOrderedMap","omap","_map","_list","EMPTY_ORDERED_MAP","updateOrderedMap","newMap","flip","ToKeyedSequence","indexed","_iter","_useKeys","ToIndexedSequence","ToSetSequence","FromEntriesSequence","flipFactory","flipSequence","makeSequence","reversedSequence","includes","cacheResultThrough","this$0","ITERATE_ENTRIES","__iterator","ITERATE_VALUES","ITERATE_KEYS","mapFactory","mapper","context","mappedSequence","reverseFactory","filterFactory","predicate","filterSequence","iterations","countByFactory","grouper","groups","asMutable","asImmutable","groupByFactory","isKeyedIter","coerce","iterableClass","reify","sliceFactory","originalSize","resolvedBegin","resolvedEnd","sliceSize","resolvedSize","sliceSeq","skipped","isSkipping","takeWhileFactory","takeSequence","iterating","skipWhileFactory","skipSequence","skipping","concatFactory","isKeyedIterable","singleton","concatSeq","flatten","sum","flattenFactory","depth","flatSequence","flatDeep","currentDepth","stopped","stack","flatMapFactory","interposeFactory","separator","interposedSequence","sortFactory","comparator","defaultComparator","maxFactory","maxCompare","comp","zipWithFactory","keyIter","zipper","zipSequence","iterators","isDone","steps","some","s","validateEntry","resolveSize","forceIterator","keyPath","Record","defaultValues","name","hasInitialized","RecordType","setProps","RecordTypePrototype","_name","_defaultValues","RecordPrototype","makeRecord","likeRecord","record","getPrototypeOf","recordName","names","setProp","bind","Set","emptySet","isSet","add","maybeSet","IS_SET_SENTINEL","updateSet","__empty","__make","makeSet","SetPrototype","EMPTY_SET","OrderedSet","emptyOrderedSet","isOrderedSet","maybeOrderedSet","makeOrderedSet","OrderedSetPrototype","EMPTY_ORDERED_SET","Stack","emptyStack","isStack","unshiftAll","maybeStack","IS_STACK_SENTINEL","makeStack","head","StackPrototype","_head","EMPTY_STACK","mixin","methods","keyCopier","getOwnPropertySymbols","keyMapper","entryMapper","neg","quoteString","JSON","stringify","String","defaultZipper","defaultNegComparator","hashIterable","ordered","keyed","hashMerge","murmurHashOfSize","imul","SLICE$0","Keyed","Indexed","DELETE","ITERATOR_SYMBOL","KEYS","VALUES","ENTRIES","inspect","toSource","of","__toString","searchValue","other","possibleIndex","floor","offsetValue","d","WeakMap","keyValues","updateIn","deleteIn","updatedValue","merge","mergeWith","mergeIn","mergeDeepIn","sortBy","mutable","wasAltered","__ensureOwner","iterate","removeIn","removed","exists","MAX_ARRAY_MAP_SIZE","isEditable","newEntries","keyHashFrag","MAX_BITMAP_INDEXED_SIZE","newBitmap","newNodes","newCount","MIN_HASH_ARRAY_MAP_SIZE","keyMatch","subNode","insert","oldSize","unshift","originIndex","newChild","removingFirst","oldChild","editable","sizeIndex","valueSeq","indexedIterable","defaultVal","_empty","fromKeys","keySeq","union","intersect","originalSet","subtract","pushAll","toJS","__toJS","toJSON","toObject","toOrderedMap","toOrderedSet","toSet","toStack","__toStringMapper","returnValue","findEntry","sideEffect","joined","isFirst","reducer","initialReduction","reduction","useFirst","reduceRight","reversed","butLast","isEmpty","countBy","entriesSequence","filterNot","findKey","findLast","findLastEntry","findLastKey","first","flatMap","searchKey","getIn","searchKeyPath","nested","groupBy","hasIn","isSubset","isSuperset","keyOf","last","lastKeyOf","maxBy","minBy","rest","skip","amount","skipLast","skipWhile","skipUntil","take","takeLast","takeWhile","takeUntil","IterablePrototype","chain","contains","mapEntries","mapKeys","KeyedIterablePrototype","removeNum","numArgs","spliced","interpose","interleave","zipped","interleaved","zip","zipWith","Immutable"],"mappings":"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","file":"marbles.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marbles\"] = factory();\n\telse\n\t\troot[\"Marbles\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Marbles\"] = factory();\n\telse\n\t\troot[\"Marbles\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _util = __webpack_require__(1);\n\t\n\tvar util = _interopRequireWildcard(_util);\n\t\n\tvar _logic = __webpack_require__(2);\n\t\n\tvar logic = _interopRequireWildcard(_logic);\n\t\n\tvar _immutable = __webpack_require__(6);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t// core premise: route is a linked list which obeys the rules specified in the\n\t// initial configuration\n\t\n\t// with that in mind, what should the api be?\n\t\n\t/*\n\tconstructor :: SegmentConfig -> Options -> Router\n\tactivate :: SegmentId -> Data -> Null\n\tdeactivate :: SegmentId -> Null\n\tsubscribe({\n\t  'home': {\n\t    activated: f,\n\t    deactivated: f\n\t  }\n\t})\n\tupdateRoute :: String\n\tstart()\n\tstop()\n\t*/\n\t\n\t/*\n\tconfig = {\n\t  segmentId: {\n\t    fragment: string,\n\t    rule: Function(callback, segmentId, linkedList),\n\t    tokens: {\n\t      key: regex\n\t    }\n\t  }\n\t}\n\t*/\n\tvar TOKEN_REGEX = /{([^}]+)}/g;\n\tvar DIGIT_REGEX = /\\d+/;\n\t\n\tfunction rootSegment() {\n\t  return {\n\t    id: 'root',\n\t    fragment: '',\n\t    tokens: {},\n\t    tokenData: {},\n\t    rule: function rule() {\n\t      return true;\n\t    }\n\t  };\n\t}\n\t\n\tfunction listWithRoot() {\n\t  return (0, _immutable.List)([rootSegment()]);\n\t}\n\t\n\tfunction setTokenData(segment, data) {\n\t  return util.assign({}, segment, {\n\t    tokenData: util.isObject(data) ? data : {}\n\t  });\n\t}\n\t\n\tfunction stripOuterBraces(dynamicToken) {\n\t  return dynamicToken.substr(1, dynamicToken.length - 2);\n\t}\n\t\n\tfunction arraySwap(i, j, array) {\n\t  var tmp = array[i];\n\t  array[i] = array[j];\n\t  array[j] = tmp;\n\t}\n\t\n\t// TODO: memoize\n\tfunction regexify(seg) {\n\t  var newSegment = seg.fragment.replace(TOKEN_REGEX, function (token) {\n\t    var tokenName = stripOuterBraces(token);\n\t    var regex = seg.tokens[tokenName];\n\t    if (!regex) {\n\t      throw new Error('\\n        The \\'' + seg.id + '\\' segment is missing a regex for its \\'' + token + '\\' dynamic token. \\n\\n        Please add a \\'' + tokenName + '\\' property with a RegExp value to that segment\\'s \\'tokens\\' config.\\n\\n        In general, every segment with dynamic tokens requires a \\n        \\'token\\' config with a regex for every dynamic token in that segment.\\n      ');\n\t    }\n\t    return regex.source;\n\t  });\n\t  return new RegExp('' + newSegment);\n\t}\n\t\n\tfunction segmentMatch(string, segment) {\n\t  return string.match(regexify(segment)) || [];\n\t}\n\t\n\tfunction extractData(string, segment) {\n\t  var tokens = segment.tokens;\n\t  var searchString = string;\n\t  var tokenKeys = (segment.fragment.match(TOKEN_REGEX) || []).map(stripOuterBraces);\n\t  var tokenData = tokenKeys.reduce(function (data, tokenName) {\n\t    var matches = searchString.match(tokens[tokenName]);\n\t    var match = util.arrayHead(matches);\n\t    searchString = string.substr(matches.index + match.length);\n\t    data[tokenName] = match;\n\t    return data;\n\t  }, {});\n\t  return tokenData;\n\t}\n\t\n\tfunction matchingSegments(route, segments) {\n\t  return util.keys(segments).reduce(function (arr, key) {\n\t    var seg = segments[key];\n\t    var matches = segmentMatch(route, segments[key]);\n\t    var segmentsWithData = matches.map(function (str) {\n\t      return setTokenData(seg, extractData(str, seg));\n\t    });\n\t    return arr.concat(segmentsWithData);\n\t  }, []);\n\t}\n\t\n\t// TODO: memoize\n\tfunction routeToList(route, segments) {\n\t  if (!segments.root) {\n\t    return null;\n\t  }\n\t  var matchingSegs = matchingSegments(route, segments);\n\t  var matchCount = matchingSegs.length;\n\t  var leftWall = 0;\n\t  var newList = (0, _immutable.List)();\n\t  var added = true;\n\t  while (leftWall < matchCount && added) {\n\t    added = false;\n\t    for (var i = leftWall; i < matchCount; i++) {\n\t      var node = matchingSegs[i];\n\t      var listWithNode = newList.push(node);\n\t      if (node.rule(node.id, listWithNode)) {\n\t        newList = listWithNode;\n\t        arraySwap(i, leftWall, matchingSegs);\n\t        added = true;\n\t        leftWall += 1;\n\t        break;\n\t      }\n\t    }\n\t  }\n\t  return newList;\n\t}\n\t\n\tfunction replaceTokens(string, data) {\n\t  return string.replace(TOKEN_REGEX, function (match) {\n\t    return data[stripOuterBraces(match)];\n\t  });\n\t}\n\t\n\t// TODO: memoize\n\tfunction listToRoute(list, leadingSlash, trailingSlash) {\n\t  var fragments = list.map(function (node) {\n\t    return replaceTokens(node.fragment, node.tokenData);\n\t  }).filter(function (frag) {\n\t    return frag !== '';\n\t  });\n\t  var hash = fragments.join('/');\n\t  return hash ? '' + (leadingSlash ? '/' : '') + hash + (trailingSlash ? '/' : '') : hash;\n\t}\n\t\n\tfunction chainData(list, upToNode) {\n\t  var data = util.emptyObject();\n\t  var stopIndex = list.lastIndexOf(upToNode);\n\t  return list.reduce(function (chainedData, node, index) {\n\t    if (stopIndex !== -1 && index > stopIndex) {\n\t      return chainedData;\n\t    }\n\t    return util.assign(chainedData, node.tokenData);\n\t  }, data);\n\t}\n\t\n\tfunction listDiff(from, against, diffData) {\n\t  return from.reduce(function (newList, node) {\n\t    var found = against.find(function (_ref) {\n\t      var id = _ref.id;\n\t      return id === node.id;\n\t    });\n\t    if (!found || diffData && !util.equal(found.tokenData, node.tokenData)) {\n\t      return newList.push(node);\n\t    }\n\t    return newList;\n\t  }, (0, _immutable.List)());\n\t}\n\t\n\tfunction handleActivations(newList, oldList, subscribers) {\n\t  var activated = listDiff(newList, oldList, true);\n\t  activated.forEach(function (listNode) {\n\t    subscribers[listNode.id].activated.forEach(function (handler) {\n\t      setTimeout(function () {\n\t        handler(chainData(newList, listNode));\n\t      }, 0);\n\t    });\n\t  });\n\t}\n\t\n\tfunction handleDeactivations(newList, oldList, subscribers) {\n\t  var deactivated = listDiff(oldList, newList, false);\n\t  deactivated.forEach(function (listNode) {\n\t    subscribers[listNode.id].deactivated.forEach(function (handler) {\n\t      setTimeout(function () {\n\t        return handler();\n\t      }, 0);\n\t    });\n\t  });\n\t}\n\t\n\tfunction isValidSegment(seg) {\n\t  return util.isObject(seg) && util.isString(seg.fragment) && util.isFunction(seg.rule) && (typeof seg.tokens === 'undefined' || util.isObject(seg.tokens));\n\t}\n\t\n\tfunction isValidConfig(conf) {\n\t  return util.isObject(conf) && util.keys(conf).reduce(function (b, segId) {\n\t    return isValidSegment(conf[segId]);\n\t  }, true);\n\t}\n\t\n\tfunction assertOptionsOk(options) {\n\t  if (options && !util.isObject(options)) {\n\t    throw new Error('Invalid options. Please read the docs for details.');\n\t  }\n\t}\n\t\n\tfunction assertSegmentConfigOk(segmentConfig) {\n\t  if (!isValidConfig(segmentConfig)) {\n\t    throw new Error('\\n        Invalid segment configuration.\\n        Please read the docs for details on proper segment configuration.\\n        ');\n\t  }\n\t}\n\t\n\tfunction normalizeSegment(id, segment) {\n\t  return util.assign({\n\t    id: id,\n\t    tokens: {},\n\t    tokenData: {}\n\t  }, segment);\n\t}\n\t\n\tfunction normalizeSegments(segmentConfig) {\n\t  return util.keys(segmentConfig).reduce(function (norm, id) {\n\t    norm[id] = normalizeSegment(id, segmentConfig[id]);\n\t    return norm;\n\t  }, {});\n\t}\n\t\n\tfunction assertValidListenerObject(listener) {\n\t  if (!util.isObject(listener) || typeof listener.activated !== 'undefined' && !util.isFunction(listener.activated) || typeof listener.deactivated !== 'undefined' && !util.isFunction(listener.deactivated)) {\n\t    throw new Error('\\n      Invalid ListenerObject. ListenerObjects must conform to the following interface: \\n      {\\n        activated?: (data: Object): void,\\n        deactivated?: (): void \\n      }\\n    ');\n\t  }\n\t}\n\t\n\tfunction assertValidSubscription(subscription) {\n\t  if (!util.isObject(subscription)) {\n\t    throw new Error('\\n      Invalid Subscription. Subscriptions must conform to the following interface:\\n      {\\n        [segmentId: string]: ListenerObject\\n      }\\n    ');\n\t  }\n\t  util.keys(subscription).forEach(function (k) {\n\t    return assertValidListenerObject(subscription[k]);\n\t  });\n\t}\n\t\n\tmodule.exports = function () {\n\t  function Marbles(segmentConfig) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t    var win = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n\t\n\t    _classCallCheck(this, Marbles);\n\t\n\t    var defaultOptions = {\n\t      leadingSlash: true,\n\t      trailingSlash: true\n\t    };\n\t    var defaultSegments = {\n\t      root: rootSegment()\n\t    };\n\t\n\t    assertSegmentConfigOk(segmentConfig);\n\t    assertOptionsOk(options);\n\t    this.options = util.assign({}, defaultOptions, options);\n\t    this.segments = Object.freeze(normalizeSegments(util.assign({}, defaultSegments, segmentConfig)));\n\t    this.subscribers = Object.freeze(util.keys(this.segments).reduce(function (obj, key) {\n\t      obj[key] = {\n\t        activated: [],\n\t        deactivated: []\n\t      };\n\t      return obj;\n\t    }, {}));\n\t    this.win = win;\n\t    this.list = listWithRoot();\n\t  }\n\t\n\t  _createClass(Marbles, [{\n\t    key: 'start',\n\t    value: function start() {\n\t      var _this = this;\n\t\n\t      var win = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.win;\n\t\n\t      this.processRoute(win.location.hash);\n\t      win.addEventListener('hashchange', function () {\n\t        _this.processRoute(win.location.hash, true);\n\t      });\n\t    }\n\t    // read the given route and fire activate and deactivate accordingly\n\t\n\t  }, {\n\t    key: 'processRoute',\n\t    value: function processRoute() {\n\t      var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.win.location.hash;\n\t      var replace = arguments[1];\n\t\n\t      var route = hash.replace('#', '');\n\t      var list = routeToList(route, this.segments);\n\t      handleActivations(list, this.list, this.subscribers);\n\t      handleDeactivations(list, this.list, this.subscribers);\n\t      this.list = list;\n\t      var newRoute = listToRoute(this.list, this.options.leadingSlash, this.options.trailingSlash);\n\t      var newHash = '#' + newRoute;\n\t      console.log('setting hash to ', newRoute);\n\t      if (replace) {\n\t        this.win.history.replaceState(util.emptyObject(), '', newHash);\n\t      } else {\n\t        this.win.location.hash = newHash;\n\t      }\n\t      return newRoute;\n\t    }\n\t  }, {\n\t    key: 'activate',\n\t    value: function activate(segmentId, data) {\n\t      var list = this.list;\n\t      var seg = this.segments[segmentId];\n\t      var segNode = setTokenData(seg, data);\n\t\n\t      var newList = list.reduce(function (l, node) {\n\t        var withNode = l.push(node);\n\t        var withSeg = withNode.push(segNode);\n\t        var ok = seg.rule(segmentId, withSeg);\n\t        return ok ? withSeg : withNode;\n\t      }, (0, _immutable.List)());\n\t      var route = listToRoute(newList, this.options.leadingSlash, this.options.trailingSlash);\n\t      return this.processRoute(route);\n\t    }\n\t  }, {\n\t    key: 'deactivate',\n\t    value: function deactivate(segmentId) {\n\t      var removalIndex = this.list.findLastIndex(function (node) {\n\t        return node.id === segmentId;\n\t      });\n\t      var newRoute = listToRoute(this.list.delete(removalIndex), this.options.leadingSlash, this.options.trailingSlash);\n\t      return this.processRoute(newRoute);\n\t    }\n\t  }, {\n\t    key: 'subscribe',\n\t    value: function subscribe(subscription) {\n\t      assertValidSubscription(subscription);\n\t      var subs = this.subscribers;\n\t      util.keys(subscription).forEach(function (k) {\n\t        var activators = subscription[k].activated || [];\n\t        var deactivators = subscription[k].deactivated || [];\n\t        subs[k].activated = subs[k].activated.concat(activators);\n\t        subs[k].deactivated = subs[k].deactivated.concat(deactivators);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'unsubscribe',\n\t    value: function unsubscribe(subscription) {\n\t      assertValidSubscription(subscription);\n\t      var subs = this.subscribers;\n\t      util.keys(subscription).forEach(function (k) {\n\t        var activatorsToRm = subscription[k].activated || [];\n\t        var deactivatorsToRm = subscription[k].deactivated || [];\n\t        util.pull(activatorsToRm, subs[k].activated);\n\t        util.pull(deactivatorsToRm, subs[k].deactivated);\n\t      });\n\t    }\n\t  }], [{\n\t    key: 'present',\n\t    value: function present(requiredSegmentId) {\n\t      return function (segmentId, list) {\n\t        return list.findIndex(function (node) {\n\t          return node.id === requiredSegmentId;\n\t        }) !== -1;\n\t      };\n\t    }\n\t  }, {\n\t    key: 'parent',\n\t    value: function parent(parentId) {\n\t      return function (segmentId, list) {\n\t        var parentIndex = list.findLastIndex(function (node) {\n\t          return node.id === parentId;\n\t        });\n\t        var nodeIndex = list.findLastIndex(function (node) {\n\t          return node.id === segmentId;\n\t        });\n\t        return nodeIndex === parentIndex + 1;\n\t      };\n\t    }\n\t  }, {\n\t    key: 'logic',\n\t    get: function get() {\n\t      return logic;\n\t    }\n\t  }, {\n\t    key: 'Regex',\n\t    get: function get() {\n\t      return {\n\t        DIGITS: DIGIT_REGEX\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return Marbles;\n\t}();\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar deepEqual = __webpack_require__(3);\n\t\n\tfunction emptyObject() {\n\t  return Object.create(null);\n\t}\n\t\n\tfunction isObject(any) {\n\t  return (typeof any === 'undefined' ? 'undefined' : _typeof(any)) === 'object' && any !== null && !(any instanceof Array);\n\t}\n\t\n\tfunction isArray(any) {\n\t  return any instanceof Array;\n\t}\n\t\n\tfunction isString(any) {\n\t  return typeof any === 'string';\n\t}\n\t\n\tfunction isFunction(any) {\n\t  return typeof any === 'function';\n\t}\n\t\n\tfunction keys(obj) {\n\t  return Object.keys(obj);\n\t}\n\t\n\tfunction assign() {\n\t  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t    args[_key] = arguments[_key];\n\t  }\n\t\n\t  return Object.assign.apply(Object, args);\n\t}\n\t\n\tfunction arrayHead(array) {\n\t  if (typeof array === 'undefined' || !(array instanceof Array)) {\n\t    return undefined;\n\t  }\n\t  return array[0];\n\t}\n\t\n\tfunction pull(values, array) {\n\t  return values.map(function (val) {\n\t    var index = array.indexOf(val);\n\t    var results = [];\n\t    while (index !== -1) {\n\t      results = results.concat(array.splice(index, 1));\n\t      index = array.indexOf(val);\n\t    }\n\t    return results;\n\t  }).reduce(function (returnArray, subArray) {\n\t    return returnArray.concat(subArray);\n\t  }, []).reduce(function (returnArray, val) {\n\t    if (returnArray.indexOf(val) !== -1) {\n\t      return returnArray;\n\t    }\n\t    return returnArray.concat(val instanceof Array ? [val] : val);\n\t  }, []);\n\t}\n\t\n\tfunction without(values, array) {\n\t  var newArray = array.slice();\n\t  pull(values, newArray);\n\t  return newArray;\n\t}\n\t\n\tfunction peek(arr) {\n\t  if (!arr || !(arr instanceof Array)) {\n\t    return null;\n\t  }\n\t  return arr[arr.length - 1] || null;\n\t}\n\t\n\tfunction noop() {}\n\t\n\tfunction batchAsyncActions(fns, callback) {\n\t  if (!isArray(fns)) {\n\t    throw new TypeError('batchAsyncResults() expects an array of functions as the first parameter.');\n\t  }\n\t  var resolvedCount = 0;\n\t  var results = [];\n\t  fns.forEach(function (fn) {\n\t    fn(function (result) {\n\t      resolvedCount += 1;\n\t      results.push(result);\n\t      if (resolvedCount === fns.length) {\n\t        callback(results);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\texports.equal = deepEqual;\n\texports.emptyObject = emptyObject;\n\texports.isArray = isArray;\n\texports.isObject = isObject;\n\texports.isFunction = isFunction;\n\texports.isString = isString;\n\texports.batchAsyncActions = batchAsyncActions;\n\texports.noop = noop;\n\texports.keys = keys;\n\texports.peek = peek;\n\texports.assign = assign;\n\texports.arrayHead = arrayHead;\n\texports.pull = pull;\n\texports.without = without;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.and = exports.or = exports.not = undefined;\n\t\n\tvar _util = __webpack_require__(1);\n\t\n\tvar util = _interopRequireWildcard(_util);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction boolEval(anything, args) {\n\t  if (util.isFunction(anything)) {\n\t    return anything.apply(null, args);\n\t  } else {\n\t    return Boolean(anything);\n\t  }\n\t}\n\t\n\tfunction not(argument) {\n\t  return function strictNot() {\n\t    for (var _len = arguments.length, extraArgs = Array(_len), _key = 0; _key < _len; _key++) {\n\t      extraArgs[_key] = arguments[_key];\n\t    }\n\t\n\t    return !boolEval(argument, extraArgs);\n\t  };\n\t}\n\t\n\tfunction or() {\n\t  for (var _len2 = arguments.length, predicates = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n\t    predicates[_key2] = arguments[_key2];\n\t  }\n\t\n\t  return function strictOr() {\n\t    for (var _len3 = arguments.length, extraArgs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n\t      extraArgs[_key3] = arguments[_key3];\n\t    }\n\t\n\t    for (var i = 0; i < predicates.length; i++) {\n\t      if (boolEval(predicates[i], extraArgs)) {\n\t        return true;\n\t      }\n\t    }\n\t    return false;\n\t  };\n\t}\n\t\n\tfunction and() {\n\t  for (var _len4 = arguments.length, predicates = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n\t    predicates[_key4] = arguments[_key4];\n\t  }\n\t\n\t  return function strictAnd() {\n\t    for (var _len5 = arguments.length, extraArgs = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n\t      extraArgs[_key5] = arguments[_key5];\n\t    }\n\t\n\t    for (var i = 0; i < predicates.length; i++) {\n\t      if (!boolEval(predicates[i], extraArgs)) {\n\t        return false;\n\t      }\n\t    }\n\t    return predicates.length > 0;\n\t  };\n\t}\n\t\n\texports.not = not;\n\texports.or = or;\n\texports.and = and;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pSlice = Array.prototype.slice;\n\tvar objectKeys = __webpack_require__(5);\n\tvar isArguments = __webpack_require__(4);\n\t\n\tvar deepEqual = module.exports = function (actual, expected, opts) {\n\t  if (!opts) opts = {};\n\t  // 7.1. All identical values are equivalent, as determined by ===.\n\t  if (actual === expected) {\n\t    return true;\n\t\n\t  } else if (actual instanceof Date && expected instanceof Date) {\n\t    return actual.getTime() === expected.getTime();\n\t\n\t  // 7.3. Other pairs that do not both pass typeof value == 'object',\n\t  // equivalence is determined by ==.\n\t  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n\t    return opts.strict ? actual === expected : actual == expected;\n\t\n\t  // 7.4. For all other Object pairs, including Array objects, equivalence is\n\t  // determined by having the same number of owned properties (as verified\n\t  // with Object.prototype.hasOwnProperty.call), the same set of keys\n\t  // (although not necessarily the same order), equivalent values for every\n\t  // corresponding key, and an identical 'prototype' property. Note: this\n\t  // accounts for both named and indexed properties on Arrays.\n\t  } else {\n\t    return objEquiv(actual, expected, opts);\n\t  }\n\t}\n\t\n\tfunction isUndefinedOrNull(value) {\n\t  return value === null || value === undefined;\n\t}\n\t\n\tfunction isBuffer (x) {\n\t  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n\t  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n\t    return false;\n\t  }\n\t  if (x.length > 0 && typeof x[0] !== 'number') return false;\n\t  return true;\n\t}\n\t\n\tfunction objEquiv(a, b, opts) {\n\t  var i, key;\n\t  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n\t    return false;\n\t  // an identical 'prototype' property.\n\t  if (a.prototype !== b.prototype) return false;\n\t  //~~~I've managed to break Object.keys through screwy arguments passing.\n\t  //   Converting to array solves the problem.\n\t  if (isArguments(a)) {\n\t    if (!isArguments(b)) {\n\t      return false;\n\t    }\n\t    a = pSlice.call(a);\n\t    b = pSlice.call(b);\n\t    return deepEqual(a, b, opts);\n\t  }\n\t  if (isBuffer(a)) {\n\t    if (!isBuffer(b)) {\n\t      return false;\n\t    }\n\t    if (a.length !== b.length) return false;\n\t    for (i = 0; i < a.length; i++) {\n\t      if (a[i] !== b[i]) return false;\n\t    }\n\t    return true;\n\t  }\n\t  try {\n\t    var ka = objectKeys(a),\n\t        kb = objectKeys(b);\n\t  } catch (e) {//happens when one is a string literal and the other isn't\n\t    return false;\n\t  }\n\t  // having the same number of owned properties (keys incorporates\n\t  // hasOwnProperty)\n\t  if (ka.length != kb.length)\n\t    return false;\n\t  //the same set of keys (although not necessarily the same order),\n\t  ka.sort();\n\t  kb.sort();\n\t  //~~~cheap key test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    if (ka[i] != kb[i])\n\t      return false;\n\t  }\n\t  //equivalent values for every corresponding key, and\n\t  //~~~possibly expensive deep test\n\t  for (i = ka.length - 1; i >= 0; i--) {\n\t    key = ka[i];\n\t    if (!deepEqual(a[key], b[key], opts)) return false;\n\t  }\n\t  return typeof a === typeof b;\n\t}\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tvar supportsArgumentsClass = (function(){\n\t  return Object.prototype.toString.call(arguments)\n\t})() == '[object Arguments]';\n\t\n\texports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\t\n\texports.supported = supported;\n\tfunction supported(object) {\n\t  return Object.prototype.toString.call(object) == '[object Arguments]';\n\t};\n\t\n\texports.unsupported = unsupported;\n\tfunction unsupported(object){\n\t  return object &&\n\t    typeof object == 'object' &&\n\t    typeof object.length == 'number' &&\n\t    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n\t    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n\t    false;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\texports = module.exports = typeof Object.keys === 'function'\n\t  ? Object.keys : shim;\n\t\n\texports.shim = shim;\n\tfunction shim (obj) {\n\t  var keys = [];\n\t  for (var key in obj) keys.push(key);\n\t  return keys;\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *  Copyright (c) 2014-2015, Facebook, Inc.\n\t *  All rights reserved.\n\t *\n\t *  This source code is licensed under the BSD-style license found in the\n\t *  LICENSE file in the root directory of this source tree. An additional grant\n\t *  of patent rights can be found in the PATENTS file in the same directory.\n\t */\n\t\n\t(function (global, factory) {\n\t   true ? module.exports = factory() :\n\t  typeof define === 'function' && define.amd ? define(factory) :\n\t  (global.Immutable = factory());\n\t}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\t\n\t  function createClass(ctor, superClass) {\n\t    if (superClass) {\n\t      ctor.prototype = Object.create(superClass.prototype);\n\t    }\n\t    ctor.prototype.constructor = ctor;\n\t  }\n\t\n\t  function Iterable(value) {\n\t      return isIterable(value) ? value : Seq(value);\n\t    }\n\t\n\t\n\t  createClass(KeyedIterable, Iterable);\n\t    function KeyedIterable(value) {\n\t      return isKeyed(value) ? value : KeyedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(IndexedIterable, Iterable);\n\t    function IndexedIterable(value) {\n\t      return isIndexed(value) ? value : IndexedSeq(value);\n\t    }\n\t\n\t\n\t  createClass(SetIterable, Iterable);\n\t    function SetIterable(value) {\n\t      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n\t    }\n\t\n\t\n\t\n\t  function isIterable(maybeIterable) {\n\t    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n\t  }\n\t\n\t  function isKeyed(maybeKeyed) {\n\t    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n\t  }\n\t\n\t  function isIndexed(maybeIndexed) {\n\t    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n\t  }\n\t\n\t  function isAssociative(maybeAssociative) {\n\t    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n\t  }\n\t\n\t  function isOrdered(maybeOrdered) {\n\t    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n\t  }\n\t\n\t  Iterable.isIterable = isIterable;\n\t  Iterable.isKeyed = isKeyed;\n\t  Iterable.isIndexed = isIndexed;\n\t  Iterable.isAssociative = isAssociative;\n\t  Iterable.isOrdered = isOrdered;\n\t\n\t  Iterable.Keyed = KeyedIterable;\n\t  Iterable.Indexed = IndexedIterable;\n\t  Iterable.Set = SetIterable;\n\t\n\t\n\t  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  // Used for setting prototype methods that IE8 chokes on.\n\t  var DELETE = 'delete';\n\t\n\t  // Constants describing the size of trie nodes.\n\t  var SHIFT = 5; // Resulted in best performance after ______?\n\t  var SIZE = 1 << SHIFT;\n\t  var MASK = SIZE - 1;\n\t\n\t  // A consistent shared value representing \"not set\" which equals nothing other\n\t  // than itself, and nothing that could be provided externally.\n\t  var NOT_SET = {};\n\t\n\t  // Boolean references, Rough equivalent of `bool &`.\n\t  var CHANGE_LENGTH = { value: false };\n\t  var DID_ALTER = { value: false };\n\t\n\t  function MakeRef(ref) {\n\t    ref.value = false;\n\t    return ref;\n\t  }\n\t\n\t  function SetRef(ref) {\n\t    ref && (ref.value = true);\n\t  }\n\t\n\t  // A function which returns a value representing an \"owner\" for transient writes\n\t  // to tries. The return value will only ever equal itself, and will not equal\n\t  // the return of any subsequent call of this function.\n\t  function OwnerID() {}\n\t\n\t  // http://jsperf.com/copy-array-inline\n\t  function arrCopy(arr, offset) {\n\t    offset = offset || 0;\n\t    var len = Math.max(0, arr.length - offset);\n\t    var newArr = new Array(len);\n\t    for (var ii = 0; ii < len; ii++) {\n\t      newArr[ii] = arr[ii + offset];\n\t    }\n\t    return newArr;\n\t  }\n\t\n\t  function ensureSize(iter) {\n\t    if (iter.size === undefined) {\n\t      iter.size = iter.__iterate(returnTrue);\n\t    }\n\t    return iter.size;\n\t  }\n\t\n\t  function wrapIndex(iter, index) {\n\t    // This implements \"is array index\" which the ECMAString spec defines as:\n\t    //\n\t    //     A String property name P is an array index if and only if\n\t    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n\t    //     to 2^32−1.\n\t    //\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n\t    if (typeof index !== 'number') {\n\t      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n\t      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n\t        return NaN;\n\t      }\n\t      index = uint32Index;\n\t    }\n\t    return index < 0 ? ensureSize(iter) + index : index;\n\t  }\n\t\n\t  function returnTrue() {\n\t    return true;\n\t  }\n\t\n\t  function wholeSlice(begin, end, size) {\n\t    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n\t      (end === undefined || (size !== undefined && end >= size));\n\t  }\n\t\n\t  function resolveBegin(begin, size) {\n\t    return resolveIndex(begin, size, 0);\n\t  }\n\t\n\t  function resolveEnd(end, size) {\n\t    return resolveIndex(end, size, size);\n\t  }\n\t\n\t  function resolveIndex(index, size, defaultIndex) {\n\t    return index === undefined ?\n\t      defaultIndex :\n\t      index < 0 ?\n\t        Math.max(0, size + index) :\n\t        size === undefined ?\n\t          index :\n\t          Math.min(size, index);\n\t  }\n\t\n\t  /* global Symbol */\n\t\n\t  var ITERATE_KEYS = 0;\n\t  var ITERATE_VALUES = 1;\n\t  var ITERATE_ENTRIES = 2;\n\t\n\t  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n\t  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\t\n\t  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\t\n\t\n\t  function Iterator(next) {\n\t      this.next = next;\n\t    }\n\t\n\t    Iterator.prototype.toString = function() {\n\t      return '[Iterator]';\n\t    };\n\t\n\t\n\t  Iterator.KEYS = ITERATE_KEYS;\n\t  Iterator.VALUES = ITERATE_VALUES;\n\t  Iterator.ENTRIES = ITERATE_ENTRIES;\n\t\n\t  Iterator.prototype.inspect =\n\t  Iterator.prototype.toSource = function () { return this.toString(); }\n\t  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n\t    return this;\n\t  };\n\t\n\t\n\t  function iteratorValue(type, k, v, iteratorResult) {\n\t    var value = type === 0 ? k : type === 1 ? v : [k, v];\n\t    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n\t      value: value, done: false\n\t    });\n\t    return iteratorResult;\n\t  }\n\t\n\t  function iteratorDone() {\n\t    return { value: undefined, done: true };\n\t  }\n\t\n\t  function hasIterator(maybeIterable) {\n\t    return !!getIteratorFn(maybeIterable);\n\t  }\n\t\n\t  function isIterator(maybeIterator) {\n\t    return maybeIterator && typeof maybeIterator.next === 'function';\n\t  }\n\t\n\t  function getIterator(iterable) {\n\t    var iteratorFn = getIteratorFn(iterable);\n\t    return iteratorFn && iteratorFn.call(iterable);\n\t  }\n\t\n\t  function getIteratorFn(iterable) {\n\t    var iteratorFn = iterable && (\n\t      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n\t      iterable[FAUX_ITERATOR_SYMBOL]\n\t    );\n\t    if (typeof iteratorFn === 'function') {\n\t      return iteratorFn;\n\t    }\n\t  }\n\t\n\t  function isArrayLike(value) {\n\t    return value && typeof value.length === 'number';\n\t  }\n\t\n\t  createClass(Seq, Iterable);\n\t    function Seq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        isIterable(value) ? value.toSeq() : seqFromValue(value);\n\t    }\n\t\n\t    Seq.of = function(/*...values*/) {\n\t      return Seq(arguments);\n\t    };\n\t\n\t    Seq.prototype.toSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    Seq.prototype.toString = function() {\n\t      return this.__toString('Seq {', '}');\n\t    };\n\t\n\t    Seq.prototype.cacheResult = function() {\n\t      if (!this._cache && this.__iterateUncached) {\n\t        this._cache = this.entrySeq().toArray();\n\t        this.size = this._cache.length;\n\t      }\n\t      return this;\n\t    };\n\t\n\t    // abstract __iterateUncached(fn, reverse)\n\t\n\t    Seq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, true);\n\t    };\n\t\n\t    // abstract __iteratorUncached(type, reverse)\n\t\n\t    Seq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, true);\n\t    };\n\t\n\t\n\t\n\t  createClass(KeyedSeq, Seq);\n\t    function KeyedSeq(value) {\n\t      return value === null || value === undefined ?\n\t        emptySequence().toKeyedSeq() :\n\t        isIterable(value) ?\n\t          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n\t          keyedSeqFromValue(value);\n\t    }\n\t\n\t    KeyedSeq.prototype.toKeyedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  createClass(IndexedSeq, Seq);\n\t    function IndexedSeq(value) {\n\t      return value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n\t    }\n\t\n\t    IndexedSeq.of = function(/*...values*/) {\n\t      return IndexedSeq(arguments);\n\t    };\n\t\n\t    IndexedSeq.prototype.toIndexedSeq = function() {\n\t      return this;\n\t    };\n\t\n\t    IndexedSeq.prototype.toString = function() {\n\t      return this.__toString('Seq [', ']');\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n\t      return seqIterate(this, fn, reverse, false);\n\t    };\n\t\n\t    IndexedSeq.prototype.__iterator = function(type, reverse) {\n\t      return seqIterator(this, type, reverse, false);\n\t    };\n\t\n\t\n\t\n\t  createClass(SetSeq, Seq);\n\t    function SetSeq(value) {\n\t      return (\n\t        value === null || value === undefined ? emptySequence() :\n\t        !isIterable(value) ? indexedSeqFromValue(value) :\n\t        isKeyed(value) ? value.entrySeq() : value\n\t      ).toSetSeq();\n\t    }\n\t\n\t    SetSeq.of = function(/*...values*/) {\n\t      return SetSeq(arguments);\n\t    };\n\t\n\t    SetSeq.prototype.toSetSeq = function() {\n\t      return this;\n\t    };\n\t\n\t\n\t\n\t  Seq.isSeq = isSeq;\n\t  Seq.Keyed = KeyedSeq;\n\t  Seq.Set = SetSeq;\n\t  Seq.Indexed = IndexedSeq;\n\t\n\t  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\t\n\t  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\t\n\t\n\t\n\t  createClass(ArraySeq, IndexedSeq);\n\t    function ArraySeq(array) {\n\t      this._array = array;\n\t      this.size = array.length;\n\t    }\n\t\n\t    ArraySeq.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterate = function(fn, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ArraySeq.prototype.__iterator = function(type, reverse) {\n\t      var array = this._array;\n\t      var maxIndex = array.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n\t      );\n\t    };\n\t\n\t\n\t\n\t  createClass(ObjectSeq, KeyedSeq);\n\t    function ObjectSeq(object) {\n\t      var keys = Object.keys(object);\n\t      this._object = object;\n\t      this._keys = keys;\n\t      this.size = keys.length;\n\t    }\n\t\n\t    ObjectSeq.prototype.get = function(key, notSetValue) {\n\t      if (notSetValue !== undefined && !this.has(key)) {\n\t        return notSetValue;\n\t      }\n\t      return this._object[key];\n\t    };\n\t\n\t    ObjectSeq.prototype.has = function(key) {\n\t      return this._object.hasOwnProperty(key);\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        if (fn(object[key], key, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    ObjectSeq.prototype.__iterator = function(type, reverse) {\n\t      var object = this._object;\n\t      var keys = this._keys;\n\t      var maxIndex = keys.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var key = keys[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, key, object[key]);\n\t      });\n\t    };\n\t\n\t  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(IterableSeq, IndexedSeq);\n\t    function IterableSeq(iterable) {\n\t      this._iterable = iterable;\n\t      this.size = iterable.length || iterable.size;\n\t    }\n\t\n\t    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      var iterations = 0;\n\t      if (isIterator(iterator)) {\n\t        var step;\n\t        while (!(step = iterator.next()).done) {\n\t          if (fn(step.value, iterations++, this) === false) {\n\t            break;\n\t          }\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterable = this._iterable;\n\t      var iterator = getIterator(iterable);\n\t      if (!isIterator(iterator)) {\n\t        return new Iterator(iteratorDone);\n\t      }\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step : iteratorValue(type, iterations++, step.value);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(IteratorSeq, IndexedSeq);\n\t    function IteratorSeq(iterator) {\n\t      this._iterator = iterator;\n\t      this._iteratorCache = [];\n\t    }\n\t\n\t    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      while (iterations < cache.length) {\n\t        if (fn(cache[iterations], iterations++, this) === false) {\n\t          return iterations;\n\t        }\n\t      }\n\t      var step;\n\t      while (!(step = iterator.next()).done) {\n\t        var val = step.value;\n\t        cache[iterations] = val;\n\t        if (fn(val, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iterator;\n\t      var cache = this._iteratorCache;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        if (iterations >= cache.length) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          cache[iterations] = step.value;\n\t        }\n\t        return iteratorValue(type, iterations, cache[iterations++]);\n\t      });\n\t    };\n\t\n\t\n\t\n\t\n\t  // # pragma Helper functions\n\t\n\t  function isSeq(maybeSeq) {\n\t    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n\t  }\n\t\n\t  var EMPTY_SEQ;\n\t\n\t  function emptySequence() {\n\t    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n\t  }\n\t\n\t  function keyedSeqFromValue(value) {\n\t    var seq =\n\t      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n\t      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n\t      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n\t      typeof value === 'object' ? new ObjectSeq(value) :\n\t      undefined;\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of [k, v] entries, '+\n\t        'or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function indexedSeqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value);\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function seqFromValue(value) {\n\t    var seq = maybeIndexedSeqFromValue(value) ||\n\t      (typeof value === 'object' && new ObjectSeq(value));\n\t    if (!seq) {\n\t      throw new TypeError(\n\t        'Expected Array or iterable object of values, or keyed object: ' + value\n\t      );\n\t    }\n\t    return seq;\n\t  }\n\t\n\t  function maybeIndexedSeqFromValue(value) {\n\t    return (\n\t      isArrayLike(value) ? new ArraySeq(value) :\n\t      isIterator(value) ? new IteratorSeq(value) :\n\t      hasIterator(value) ? new IterableSeq(value) :\n\t      undefined\n\t    );\n\t  }\n\t\n\t  function seqIterate(seq, fn, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    }\n\t    return seq.__iterateUncached(fn, reverse);\n\t  }\n\t\n\t  function seqIterator(seq, type, reverse, useKeys) {\n\t    var cache = seq._cache;\n\t    if (cache) {\n\t      var maxIndex = cache.length - 1;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var entry = cache[reverse ? maxIndex - ii : ii];\n\t        return ii++ > maxIndex ?\n\t          iteratorDone() :\n\t          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n\t      });\n\t    }\n\t    return seq.__iteratorUncached(type, reverse);\n\t  }\n\t\n\t  function fromJS(json, converter) {\n\t    return converter ?\n\t      fromJSWith(converter, json, '', {'': json}) :\n\t      fromJSDefault(json);\n\t  }\n\t\n\t  function fromJSWith(converter, json, key, parentJSON) {\n\t    if (Array.isArray(json)) {\n\t      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function fromJSDefault(json) {\n\t    if (Array.isArray(json)) {\n\t      return IndexedSeq(json).map(fromJSDefault).toList();\n\t    }\n\t    if (isPlainObj(json)) {\n\t      return KeyedSeq(json).map(fromJSDefault).toMap();\n\t    }\n\t    return json;\n\t  }\n\t\n\t  function isPlainObj(value) {\n\t    return value && (value.constructor === Object || value.constructor === undefined);\n\t  }\n\t\n\t  /**\n\t   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n\t   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n\t   *\n\t   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n\t   * value, which is different from the algorithm described by\n\t   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n\t   *\n\t   * This is extended further to allow Objects to describe the values they\n\t   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n\t   *\n\t   * Note: because of this extension, the key equality of Immutable.Map and the\n\t   * value equality of Immutable.Set will differ from ES6 Map and Set.\n\t   *\n\t   * ### Defining custom values\n\t   *\n\t   * The easiest way to describe the value an object represents is by implementing\n\t   * `valueOf`. For example, `Date` represents a value by returning a unix\n\t   * timestamp for `valueOf`:\n\t   *\n\t   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n\t   *     var date2 = new Date(1234567890000);\n\t   *     date1.valueOf(); // 1234567890000\n\t   *     assert( date1 !== date2 );\n\t   *     assert( Immutable.is( date1, date2 ) );\n\t   *\n\t   * Note: overriding `valueOf` may have other implications if you use this object\n\t   * where JavaScript expects a primitive, such as implicit string coercion.\n\t   *\n\t   * For more complex types, especially collections, implementing `valueOf` may\n\t   * not be performant. An alternative is to implement `equals` and `hashCode`.\n\t   *\n\t   * `equals` takes another object, presumably of similar type, and returns true\n\t   * if the it is equal. Equality is symmetrical, so the same result should be\n\t   * returned if this and the argument are flipped.\n\t   *\n\t   *     assert( a.equals(b) === b.equals(a) );\n\t   *\n\t   * `hashCode` returns a 32bit integer number representing the object which will\n\t   * be used to determine how to store the value object in a Map or Set. You must\n\t   * provide both or neither methods, one must not exist without the other.\n\t   *\n\t   * Also, an important relationship between these methods must be upheld: if two\n\t   * values are equal, they *must* return the same hashCode. If the values are not\n\t   * equal, they might have the same hashCode; this is called a hash collision,\n\t   * and while undesirable for performance reasons, it is acceptable.\n\t   *\n\t   *     if (a.equals(b)) {\n\t   *       assert( a.hashCode() === b.hashCode() );\n\t   *     }\n\t   *\n\t   * All Immutable collections implement `equals` and `hashCode`.\n\t   *\n\t   */\n\t  function is(valueA, valueB) {\n\t    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t      return true;\n\t    }\n\t    if (!valueA || !valueB) {\n\t      return false;\n\t    }\n\t    if (typeof valueA.valueOf === 'function' &&\n\t        typeof valueB.valueOf === 'function') {\n\t      valueA = valueA.valueOf();\n\t      valueB = valueB.valueOf();\n\t      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n\t        return true;\n\t      }\n\t      if (!valueA || !valueB) {\n\t        return false;\n\t      }\n\t    }\n\t    if (typeof valueA.equals === 'function' &&\n\t        typeof valueB.equals === 'function' &&\n\t        valueA.equals(valueB)) {\n\t      return true;\n\t    }\n\t    return false;\n\t  }\n\t\n\t  function deepEqual(a, b) {\n\t    if (a === b) {\n\t      return true;\n\t    }\n\t\n\t    if (\n\t      !isIterable(b) ||\n\t      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n\t      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n\t      isKeyed(a) !== isKeyed(b) ||\n\t      isIndexed(a) !== isIndexed(b) ||\n\t      isOrdered(a) !== isOrdered(b)\n\t    ) {\n\t      return false;\n\t    }\n\t\n\t    if (a.size === 0 && b.size === 0) {\n\t      return true;\n\t    }\n\t\n\t    var notAssociative = !isAssociative(a);\n\t\n\t    if (isOrdered(a)) {\n\t      var entries = a.entries();\n\t      return b.every(function(v, k)  {\n\t        var entry = entries.next().value;\n\t        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n\t      }) && entries.next().done;\n\t    }\n\t\n\t    var flipped = false;\n\t\n\t    if (a.size === undefined) {\n\t      if (b.size === undefined) {\n\t        if (typeof a.cacheResult === 'function') {\n\t          a.cacheResult();\n\t        }\n\t      } else {\n\t        flipped = true;\n\t        var _ = a;\n\t        a = b;\n\t        b = _;\n\t      }\n\t    }\n\t\n\t    var allEqual = true;\n\t    var bSize = b.__iterate(function(v, k)  {\n\t      if (notAssociative ? !a.has(v) :\n\t          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n\t        allEqual = false;\n\t        return false;\n\t      }\n\t    });\n\t\n\t    return allEqual && a.size === bSize;\n\t  }\n\t\n\t  createClass(Repeat, IndexedSeq);\n\t\n\t    function Repeat(value, times) {\n\t      if (!(this instanceof Repeat)) {\n\t        return new Repeat(value, times);\n\t      }\n\t      this._value = value;\n\t      this.size = times === undefined ? Infinity : Math.max(0, times);\n\t      if (this.size === 0) {\n\t        if (EMPTY_REPEAT) {\n\t          return EMPTY_REPEAT;\n\t        }\n\t        EMPTY_REPEAT = this;\n\t      }\n\t    }\n\t\n\t    Repeat.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Repeat []';\n\t      }\n\t      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n\t    };\n\t\n\t    Repeat.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ? this._value : notSetValue;\n\t    };\n\t\n\t    Repeat.prototype.includes = function(searchValue) {\n\t      return is(this._value, searchValue);\n\t    };\n\t\n\t    Repeat.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      return wholeSlice(begin, end, size) ? this :\n\t        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n\t    };\n\t\n\t    Repeat.prototype.reverse = function() {\n\t      return this;\n\t    };\n\t\n\t    Repeat.prototype.indexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return 0;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.lastIndexOf = function(searchValue) {\n\t      if (is(this._value, searchValue)) {\n\t        return this.size;\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Repeat.prototype.__iterate = function(fn, reverse) {\n\t      for (var ii = 0; ii < this.size; ii++) {\n\t        if (fn(this._value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      var ii = 0;\n\t      return new Iterator(function() \n\t        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n\t      );\n\t    };\n\t\n\t    Repeat.prototype.equals = function(other) {\n\t      return other instanceof Repeat ?\n\t        is(this._value, other._value) :\n\t        deepEqual(other);\n\t    };\n\t\n\t\n\t  var EMPTY_REPEAT;\n\t\n\t  function invariant(condition, error) {\n\t    if (!condition) throw new Error(error);\n\t  }\n\t\n\t  createClass(Range, IndexedSeq);\n\t\n\t    function Range(start, end, step) {\n\t      if (!(this instanceof Range)) {\n\t        return new Range(start, end, step);\n\t      }\n\t      invariant(step !== 0, 'Cannot step a Range by 0');\n\t      start = start || 0;\n\t      if (end === undefined) {\n\t        end = Infinity;\n\t      }\n\t      step = step === undefined ? 1 : Math.abs(step);\n\t      if (end < start) {\n\t        step = -step;\n\t      }\n\t      this._start = start;\n\t      this._end = end;\n\t      this._step = step;\n\t      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n\t      if (this.size === 0) {\n\t        if (EMPTY_RANGE) {\n\t          return EMPTY_RANGE;\n\t        }\n\t        EMPTY_RANGE = this;\n\t      }\n\t    }\n\t\n\t    Range.prototype.toString = function() {\n\t      if (this.size === 0) {\n\t        return 'Range []';\n\t      }\n\t      return 'Range [ ' +\n\t        this._start + '...' + this._end +\n\t        (this._step !== 1 ? ' by ' + this._step : '') +\n\t      ' ]';\n\t    };\n\t\n\t    Range.prototype.get = function(index, notSetValue) {\n\t      return this.has(index) ?\n\t        this._start + wrapIndex(this, index) * this._step :\n\t        notSetValue;\n\t    };\n\t\n\t    Range.prototype.includes = function(searchValue) {\n\t      var possibleIndex = (searchValue - this._start) / this._step;\n\t      return possibleIndex >= 0 &&\n\t        possibleIndex < this.size &&\n\t        possibleIndex === Math.floor(possibleIndex);\n\t    };\n\t\n\t    Range.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      begin = resolveBegin(begin, this.size);\n\t      end = resolveEnd(end, this.size);\n\t      if (end <= begin) {\n\t        return new Range(0, 0);\n\t      }\n\t      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n\t    };\n\t\n\t    Range.prototype.indexOf = function(searchValue) {\n\t      var offsetValue = searchValue - this._start;\n\t      if (offsetValue % this._step === 0) {\n\t        var index = offsetValue / this._step;\n\t        if (index >= 0 && index < this.size) {\n\t          return index\n\t        }\n\t      }\n\t      return -1;\n\t    };\n\t\n\t    Range.prototype.lastIndexOf = function(searchValue) {\n\t      return this.indexOf(searchValue);\n\t    };\n\t\n\t    Range.prototype.__iterate = function(fn, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      for (var ii = 0; ii <= maxIndex; ii++) {\n\t        if (fn(value, ii, this) === false) {\n\t          return ii + 1;\n\t        }\n\t        value += reverse ? -step : step;\n\t      }\n\t      return ii;\n\t    };\n\t\n\t    Range.prototype.__iterator = function(type, reverse) {\n\t      var maxIndex = this.size - 1;\n\t      var step = this._step;\n\t      var value = reverse ? this._start + maxIndex * step : this._start;\n\t      var ii = 0;\n\t      return new Iterator(function()  {\n\t        var v = value;\n\t        value += reverse ? -step : step;\n\t        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n\t      });\n\t    };\n\t\n\t    Range.prototype.equals = function(other) {\n\t      return other instanceof Range ?\n\t        this._start === other._start &&\n\t        this._end === other._end &&\n\t        this._step === other._step :\n\t        deepEqual(this, other);\n\t    };\n\t\n\t\n\t  var EMPTY_RANGE;\n\t\n\t  createClass(Collection, Iterable);\n\t    function Collection() {\n\t      throw TypeError('Abstract');\n\t    }\n\t\n\t\n\t  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\t\n\t  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\t\n\t  createClass(SetCollection, Collection);function SetCollection() {}\n\t\n\t\n\t  Collection.Keyed = KeyedCollection;\n\t  Collection.Indexed = IndexedCollection;\n\t  Collection.Set = SetCollection;\n\t\n\t  var imul =\n\t    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n\t    Math.imul :\n\t    function imul(a, b) {\n\t      a = a | 0; // int\n\t      b = b | 0; // int\n\t      var c = a & 0xffff;\n\t      var d = b & 0xffff;\n\t      // Shift by 0 fixes the sign on the high part.\n\t      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n\t    };\n\t\n\t  // v8 has an optimization for storing 31-bit signed numbers.\n\t  // Values which have either 00 or 11 as the high order bits qualify.\n\t  // This function drops the highest order bit in a signed number, maintaining\n\t  // the sign bit.\n\t  function smi(i32) {\n\t    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n\t  }\n\t\n\t  function hash(o) {\n\t    if (o === false || o === null || o === undefined) {\n\t      return 0;\n\t    }\n\t    if (typeof o.valueOf === 'function') {\n\t      o = o.valueOf();\n\t      if (o === false || o === null || o === undefined) {\n\t        return 0;\n\t      }\n\t    }\n\t    if (o === true) {\n\t      return 1;\n\t    }\n\t    var type = typeof o;\n\t    if (type === 'number') {\n\t      if (o !== o || o === Infinity) {\n\t        return 0;\n\t      }\n\t      var h = o | 0;\n\t      if (h !== o) {\n\t        h ^= o * 0xFFFFFFFF;\n\t      }\n\t      while (o > 0xFFFFFFFF) {\n\t        o /= 0xFFFFFFFF;\n\t        h ^= o;\n\t      }\n\t      return smi(h);\n\t    }\n\t    if (type === 'string') {\n\t      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n\t    }\n\t    if (typeof o.hashCode === 'function') {\n\t      return o.hashCode();\n\t    }\n\t    if (type === 'object') {\n\t      return hashJSObj(o);\n\t    }\n\t    if (typeof o.toString === 'function') {\n\t      return hashString(o.toString());\n\t    }\n\t    throw new Error('Value type ' + type + ' cannot be hashed.');\n\t  }\n\t\n\t  function cachedHashString(string) {\n\t    var hash = stringHashCache[string];\n\t    if (hash === undefined) {\n\t      hash = hashString(string);\n\t      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n\t        STRING_HASH_CACHE_SIZE = 0;\n\t        stringHashCache = {};\n\t      }\n\t      STRING_HASH_CACHE_SIZE++;\n\t      stringHashCache[string] = hash;\n\t    }\n\t    return hash;\n\t  }\n\t\n\t  // http://jsperf.com/hashing-strings\n\t  function hashString(string) {\n\t    // This is the hash from JVM\n\t    // The hash code for a string is computed as\n\t    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n\t    // where s[i] is the ith character of the string and n is the length of\n\t    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n\t    // (exclusive) by dropping high bits.\n\t    var hash = 0;\n\t    for (var ii = 0; ii < string.length; ii++) {\n\t      hash = 31 * hash + string.charCodeAt(ii) | 0;\n\t    }\n\t    return smi(hash);\n\t  }\n\t\n\t  function hashJSObj(obj) {\n\t    var hash;\n\t    if (usingWeakMap) {\n\t      hash = weakMap.get(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = obj[UID_HASH_KEY];\n\t    if (hash !== undefined) {\n\t      return hash;\n\t    }\n\t\n\t    if (!canDefineProperty) {\n\t      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t\n\t      hash = getIENodeHash(obj);\n\t      if (hash !== undefined) {\n\t        return hash;\n\t      }\n\t    }\n\t\n\t    hash = ++objHashUID;\n\t    if (objHashUID & 0x40000000) {\n\t      objHashUID = 0;\n\t    }\n\t\n\t    if (usingWeakMap) {\n\t      weakMap.set(obj, hash);\n\t    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n\t      throw new Error('Non-extensible objects are not allowed as keys.');\n\t    } else if (canDefineProperty) {\n\t      Object.defineProperty(obj, UID_HASH_KEY, {\n\t        'enumerable': false,\n\t        'configurable': false,\n\t        'writable': false,\n\t        'value': hash\n\t      });\n\t    } else if (obj.propertyIsEnumerable !== undefined &&\n\t               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n\t      // Since we can't define a non-enumerable property on the object\n\t      // we'll hijack one of the less-used non-enumerable properties to\n\t      // save our hash on it. Since this is a function it will not show up in\n\t      // `JSON.stringify` which is what we want.\n\t      obj.propertyIsEnumerable = function() {\n\t        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n\t      };\n\t      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n\t    } else if (obj.nodeType !== undefined) {\n\t      // At this point we couldn't get the IE `uniqueID` to use as a hash\n\t      // and we couldn't use a non-enumerable property to exploit the\n\t      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n\t      // itself.\n\t      obj[UID_HASH_KEY] = hash;\n\t    } else {\n\t      throw new Error('Unable to set a non-enumerable property on object.');\n\t    }\n\t\n\t    return hash;\n\t  }\n\t\n\t  // Get references to ES5 object methods.\n\t  var isExtensible = Object.isExtensible;\n\t\n\t  // True if Object.defineProperty works as expected. IE8 fails this test.\n\t  var canDefineProperty = (function() {\n\t    try {\n\t      Object.defineProperty({}, '@', {});\n\t      return true;\n\t    } catch (e) {\n\t      return false;\n\t    }\n\t  }());\n\t\n\t  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n\t  // and avoid memory leaks from the IE cloneNode bug.\n\t  function getIENodeHash(node) {\n\t    if (node && node.nodeType > 0) {\n\t      switch (node.nodeType) {\n\t        case 1: // Element\n\t          return node.uniqueID;\n\t        case 9: // Document\n\t          return node.documentElement && node.documentElement.uniqueID;\n\t      }\n\t    }\n\t  }\n\t\n\t  // If possible, use a WeakMap.\n\t  var usingWeakMap = typeof WeakMap === 'function';\n\t  var weakMap;\n\t  if (usingWeakMap) {\n\t    weakMap = new WeakMap();\n\t  }\n\t\n\t  var objHashUID = 0;\n\t\n\t  var UID_HASH_KEY = '__immutablehash__';\n\t  if (typeof Symbol === 'function') {\n\t    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n\t  }\n\t\n\t  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n\t  var STRING_HASH_CACHE_MAX_SIZE = 255;\n\t  var STRING_HASH_CACHE_SIZE = 0;\n\t  var stringHashCache = {};\n\t\n\t  function assertNotInfinite(size) {\n\t    invariant(\n\t      size !== Infinity,\n\t      'Cannot perform this action with an infinite size.'\n\t    );\n\t  }\n\t\n\t  createClass(Map, KeyedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Map(value) {\n\t      return value === null || value === undefined ? emptyMap() :\n\t        isMap(value) && !isOrdered(value) ? value :\n\t        emptyMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n\t      return emptyMap().withMutations(function(map ) {\n\t        for (var i = 0; i < keyValues.length; i += 2) {\n\t          if (i + 1 >= keyValues.length) {\n\t            throw new Error('Missing value for key: ' + keyValues[i]);\n\t          }\n\t          map.set(keyValues[i], keyValues[i + 1]);\n\t        }\n\t      });\n\t    };\n\t\n\t    Map.prototype.toString = function() {\n\t      return this.__toString('Map {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Map.prototype.get = function(k, notSetValue) {\n\t      return this._root ?\n\t        this._root.get(0, undefined, k, notSetValue) :\n\t        notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Map.prototype.set = function(k, v) {\n\t      return updateMap(this, k, v);\n\t    };\n\t\n\t    Map.prototype.setIn = function(keyPath, v) {\n\t      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n\t    };\n\t\n\t    Map.prototype.remove = function(k) {\n\t      return updateMap(this, k, NOT_SET);\n\t    };\n\t\n\t    Map.prototype.deleteIn = function(keyPath) {\n\t      return this.updateIn(keyPath, function()  {return NOT_SET});\n\t    };\n\t\n\t    Map.prototype.update = function(k, notSetValue, updater) {\n\t      return arguments.length === 1 ?\n\t        k(this) :\n\t        this.updateIn([k], notSetValue, updater);\n\t    };\n\t\n\t    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n\t      if (!updater) {\n\t        updater = notSetValue;\n\t        notSetValue = undefined;\n\t      }\n\t      var updatedValue = updateInDeepMap(\n\t        this,\n\t        forceIterator(keyPath),\n\t        notSetValue,\n\t        updater\n\t      );\n\t      return updatedValue === NOT_SET ? undefined : updatedValue;\n\t    };\n\t\n\t    Map.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._root = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyMap();\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Map.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, undefined, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, merger, iters);\n\t    };\n\t\n\t    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.merge === 'function' ?\n\t          m.merge.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoMapWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.updateIn(\n\t        keyPath,\n\t        emptyMap(),\n\t        function(m ) {return typeof m.mergeDeep === 'function' ?\n\t          m.mergeDeep.apply(m, iters) :\n\t          iters[iters.length - 1]}\n\t      );\n\t    };\n\t\n\t    Map.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator));\n\t    };\n\t\n\t    Map.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedMap(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Map.prototype.withMutations = function(fn) {\n\t      var mutable = this.asMutable();\n\t      fn(mutable);\n\t      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n\t    };\n\t\n\t    Map.prototype.asMutable = function() {\n\t      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n\t    };\n\t\n\t    Map.prototype.asImmutable = function() {\n\t      return this.__ensureOwner();\n\t    };\n\t\n\t    Map.prototype.wasAltered = function() {\n\t      return this.__altered;\n\t    };\n\t\n\t    Map.prototype.__iterator = function(type, reverse) {\n\t      return new MapIterator(this, type, reverse);\n\t    };\n\t\n\t    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      this._root && this._root.iterate(function(entry ) {\n\t        iterations++;\n\t        return fn(entry[1], entry[0], this$0);\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t\n\t    Map.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeMap(this.size, this._root, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isMap(maybeMap) {\n\t    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n\t  }\n\t\n\t  Map.isMap = isMap;\n\t\n\t  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\t\n\t  var MapPrototype = Map.prototype;\n\t  MapPrototype[IS_MAP_SENTINEL] = true;\n\t  MapPrototype[DELETE] = MapPrototype.remove;\n\t  MapPrototype.removeIn = MapPrototype.deleteIn;\n\t\n\t\n\t  // #pragma Trie Nodes\n\t\n\t\n\t\n\t    function ArrayMapNode(ownerID, entries) {\n\t      this.ownerID = ownerID;\n\t      this.entries = entries;\n\t    }\n\t\n\t    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && entries.length === 1) {\n\t        return; // undefined\n\t      }\n\t\n\t      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n\t        return createNodes(ownerID, entries, key, value);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new ArrayMapNode(ownerID, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.bitmap = bitmap;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n\t      var bitmap = this.bitmap;\n\t      return (bitmap & bit) === 0 ? notSetValue :\n\t        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n\t    };\n\t\n\t    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var bit = 1 << keyHashFrag;\n\t      var bitmap = this.bitmap;\n\t      var exists = (bitmap & bit) !== 0;\n\t\n\t      if (!exists && value === NOT_SET) {\n\t        return this;\n\t      }\n\t\n\t      var idx = popCount(bitmap & (bit - 1));\n\t      var nodes = this.nodes;\n\t      var node = exists ? nodes[idx] : undefined;\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n\t        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n\t      }\n\t\n\t      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n\t        return nodes[idx ^ 1];\n\t      }\n\t\n\t      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n\t        return newNode;\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n\t      var newNodes = exists ? newNode ?\n\t        setIn(nodes, idx, newNode, isEditable) :\n\t        spliceOut(nodes, idx, isEditable) :\n\t        spliceIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.bitmap = newBitmap;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashArrayMapNode(ownerID, count, nodes) {\n\t      this.ownerID = ownerID;\n\t      this.count = count;\n\t      this.nodes = nodes;\n\t    }\n\t\n\t    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var node = this.nodes[idx];\n\t      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n\t    };\n\t\n\t    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t      var removed = value === NOT_SET;\n\t      var nodes = this.nodes;\n\t      var node = nodes[idx];\n\t\n\t      if (removed && !node) {\n\t        return this;\n\t      }\n\t\n\t      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\t      if (newNode === node) {\n\t        return this;\n\t      }\n\t\n\t      var newCount = this.count;\n\t      if (!node) {\n\t        newCount++;\n\t      } else if (!newNode) {\n\t        newCount--;\n\t        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n\t          return packNodes(ownerID, nodes, newCount, idx);\n\t        }\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\t\n\t      if (isEditable) {\n\t        this.count = newCount;\n\t        this.nodes = newNodes;\n\t        return this;\n\t      }\n\t\n\t      return new HashArrayMapNode(ownerID, newCount, newNodes);\n\t    };\n\t\n\t\n\t\n\t\n\t    function HashCollisionNode(ownerID, keyHash, entries) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entries = entries;\n\t    }\n\t\n\t    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      var entries = this.entries;\n\t      for (var ii = 0, len = entries.length; ii < len; ii++) {\n\t        if (is(key, entries[ii][0])) {\n\t          return entries[ii][1];\n\t        }\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      if (keyHash === undefined) {\n\t        keyHash = hash(key);\n\t      }\n\t\n\t      var removed = value === NOT_SET;\n\t\n\t      if (keyHash !== this.keyHash) {\n\t        if (removed) {\n\t          return this;\n\t        }\n\t        SetRef(didAlter);\n\t        SetRef(didChangeSize);\n\t        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n\t      }\n\t\n\t      var entries = this.entries;\n\t      var idx = 0;\n\t      for (var len = entries.length; idx < len; idx++) {\n\t        if (is(key, entries[idx][0])) {\n\t          break;\n\t        }\n\t      }\n\t      var exists = idx < len;\n\t\n\t      if (exists ? entries[idx][1] === value : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t      (removed || !exists) && SetRef(didChangeSize);\n\t\n\t      if (removed && len === 2) {\n\t        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n\t      }\n\t\n\t      var isEditable = ownerID && ownerID === this.ownerID;\n\t      var newEntries = isEditable ? entries : arrCopy(entries);\n\t\n\t      if (exists) {\n\t        if (removed) {\n\t          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n\t        } else {\n\t          newEntries[idx] = [key, value];\n\t        }\n\t      } else {\n\t        newEntries.push([key, value]);\n\t      }\n\t\n\t      if (isEditable) {\n\t        this.entries = newEntries;\n\t        return this;\n\t      }\n\t\n\t      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n\t    };\n\t\n\t\n\t\n\t\n\t    function ValueNode(ownerID, keyHash, entry) {\n\t      this.ownerID = ownerID;\n\t      this.keyHash = keyHash;\n\t      this.entry = entry;\n\t    }\n\t\n\t    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n\t      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n\t    };\n\t\n\t    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t      var removed = value === NOT_SET;\n\t      var keyMatch = is(key, this.entry[0]);\n\t      if (keyMatch ? value === this.entry[1] : removed) {\n\t        return this;\n\t      }\n\t\n\t      SetRef(didAlter);\n\t\n\t      if (removed) {\n\t        SetRef(didChangeSize);\n\t        return; // undefined\n\t      }\n\t\n\t      if (keyMatch) {\n\t        if (ownerID && ownerID === this.ownerID) {\n\t          this.entry[1] = value;\n\t          return this;\n\t        }\n\t        return new ValueNode(ownerID, this.keyHash, [key, value]);\n\t      }\n\t\n\t      SetRef(didChangeSize);\n\t      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n\t    };\n\t\n\t\n\t\n\t  // #pragma Iterators\n\t\n\t  ArrayMapNode.prototype.iterate =\n\t  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n\t    var entries = this.entries;\n\t    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n\t      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  BitmapIndexedNode.prototype.iterate =\n\t  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n\t    var nodes = this.nodes;\n\t    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n\t      var node = nodes[reverse ? maxIndex - ii : ii];\n\t      if (node && node.iterate(fn, reverse) === false) {\n\t        return false;\n\t      }\n\t    }\n\t  }\n\t\n\t  ValueNode.prototype.iterate = function (fn, reverse) {\n\t    return fn(this.entry);\n\t  }\n\t\n\t  createClass(MapIterator, Iterator);\n\t\n\t    function MapIterator(map, type, reverse) {\n\t      this._type = type;\n\t      this._reverse = reverse;\n\t      this._stack = map._root && mapIteratorFrame(map._root);\n\t    }\n\t\n\t    MapIterator.prototype.next = function() {\n\t      var type = this._type;\n\t      var stack = this._stack;\n\t      while (stack) {\n\t        var node = stack.node;\n\t        var index = stack.index++;\n\t        var maxIndex;\n\t        if (node.entry) {\n\t          if (index === 0) {\n\t            return mapIteratorValue(type, node.entry);\n\t          }\n\t        } else if (node.entries) {\n\t          maxIndex = node.entries.length - 1;\n\t          if (index <= maxIndex) {\n\t            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n\t          }\n\t        } else {\n\t          maxIndex = node.nodes.length - 1;\n\t          if (index <= maxIndex) {\n\t            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n\t            if (subNode) {\n\t              if (subNode.entry) {\n\t                return mapIteratorValue(type, subNode.entry);\n\t              }\n\t              stack = this._stack = mapIteratorFrame(subNode, stack);\n\t            }\n\t            continue;\n\t          }\n\t        }\n\t        stack = this._stack = this._stack.__prev;\n\t      }\n\t      return iteratorDone();\n\t    };\n\t\n\t\n\t  function mapIteratorValue(type, entry) {\n\t    return iteratorValue(type, entry[0], entry[1]);\n\t  }\n\t\n\t  function mapIteratorFrame(node, prev) {\n\t    return {\n\t      node: node,\n\t      index: 0,\n\t      __prev: prev\n\t    };\n\t  }\n\t\n\t  function makeMap(size, root, ownerID, hash) {\n\t    var map = Object.create(MapPrototype);\n\t    map.size = size;\n\t    map._root = root;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_MAP;\n\t  function emptyMap() {\n\t    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n\t  }\n\t\n\t  function updateMap(map, k, v) {\n\t    var newRoot;\n\t    var newSize;\n\t    if (!map._root) {\n\t      if (v === NOT_SET) {\n\t        return map;\n\t      }\n\t      newSize = 1;\n\t      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n\t    } else {\n\t      var didChangeSize = MakeRef(CHANGE_LENGTH);\n\t      var didAlter = MakeRef(DID_ALTER);\n\t      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n\t      if (!didAlter.value) {\n\t        return map;\n\t      }\n\t      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n\t    }\n\t    if (map.__ownerID) {\n\t      map.size = newSize;\n\t      map._root = newRoot;\n\t      map.__hash = undefined;\n\t      map.__altered = true;\n\t      return map;\n\t    }\n\t    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n\t  }\n\t\n\t  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n\t    if (!node) {\n\t      if (value === NOT_SET) {\n\t        return node;\n\t      }\n\t      SetRef(didAlter);\n\t      SetRef(didChangeSize);\n\t      return new ValueNode(ownerID, keyHash, [key, value]);\n\t    }\n\t    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n\t  }\n\t\n\t  function isLeafNode(node) {\n\t    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n\t  }\n\t\n\t  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n\t    if (node.keyHash === keyHash) {\n\t      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n\t    }\n\t\n\t    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n\t    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\t\n\t    var newNode;\n\t    var nodes = idx1 === idx2 ?\n\t      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n\t      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\t\n\t    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n\t  }\n\t\n\t  function createNodes(ownerID, entries, key, value) {\n\t    if (!ownerID) {\n\t      ownerID = new OwnerID();\n\t    }\n\t    var node = new ValueNode(ownerID, hash(key), [key, value]);\n\t    for (var ii = 0; ii < entries.length; ii++) {\n\t      var entry = entries[ii];\n\t      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n\t    }\n\t    return node;\n\t  }\n\t\n\t  function packNodes(ownerID, nodes, count, excluding) {\n\t    var bitmap = 0;\n\t    var packedII = 0;\n\t    var packedNodes = new Array(count);\n\t    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n\t      var node = nodes[ii];\n\t      if (node !== undefined && ii !== excluding) {\n\t        bitmap |= bit;\n\t        packedNodes[packedII++] = node;\n\t      }\n\t    }\n\t    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n\t  }\n\t\n\t  function expandNodes(ownerID, nodes, bitmap, including, node) {\n\t    var count = 0;\n\t    var expandedNodes = new Array(SIZE);\n\t    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n\t      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n\t    }\n\t    expandedNodes[including] = node;\n\t    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n\t  }\n\t\n\t  function mergeIntoMapWith(map, merger, iterables) {\n\t    var iters = [];\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = KeyedIterable(value);\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    return mergeIntoCollectionWith(map, merger, iters);\n\t  }\n\t\n\t  function deepMerger(existing, value, key) {\n\t    return existing && existing.mergeDeep && isIterable(value) ?\n\t      existing.mergeDeep(value) :\n\t      is(existing, value) ? existing : value;\n\t  }\n\t\n\t  function deepMergerWith(merger) {\n\t    return function(existing, value, key)  {\n\t      if (existing && existing.mergeDeepWith && isIterable(value)) {\n\t        return existing.mergeDeepWith(merger, value);\n\t      }\n\t      var nextValue = merger(existing, value, key);\n\t      return is(existing, nextValue) ? existing : nextValue;\n\t    };\n\t  }\n\t\n\t  function mergeIntoCollectionWith(collection, merger, iters) {\n\t    iters = iters.filter(function(x ) {return x.size !== 0});\n\t    if (iters.length === 0) {\n\t      return collection;\n\t    }\n\t    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n\t      return collection.constructor(iters[0]);\n\t    }\n\t    return collection.withMutations(function(collection ) {\n\t      var mergeIntoMap = merger ?\n\t        function(value, key)  {\n\t          collection.update(key, NOT_SET, function(existing )\n\t            {return existing === NOT_SET ? value : merger(existing, value, key)}\n\t          );\n\t        } :\n\t        function(value, key)  {\n\t          collection.set(key, value);\n\t        }\n\t      for (var ii = 0; ii < iters.length; ii++) {\n\t        iters[ii].forEach(mergeIntoMap);\n\t      }\n\t    });\n\t  }\n\t\n\t  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n\t    var isNotSet = existing === NOT_SET;\n\t    var step = keyPathIter.next();\n\t    if (step.done) {\n\t      var existingValue = isNotSet ? notSetValue : existing;\n\t      var newValue = updater(existingValue);\n\t      return newValue === existingValue ? existing : newValue;\n\t    }\n\t    invariant(\n\t      isNotSet || (existing && existing.set),\n\t      'invalid keyPath'\n\t    );\n\t    var key = step.value;\n\t    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n\t    var nextUpdated = updateInDeepMap(\n\t      nextExisting,\n\t      keyPathIter,\n\t      notSetValue,\n\t      updater\n\t    );\n\t    return nextUpdated === nextExisting ? existing :\n\t      nextUpdated === NOT_SET ? existing.remove(key) :\n\t      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n\t  }\n\t\n\t  function popCount(x) {\n\t    x = x - ((x >> 1) & 0x55555555);\n\t    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n\t    x = (x + (x >> 4)) & 0x0f0f0f0f;\n\t    x = x + (x >> 8);\n\t    x = x + (x >> 16);\n\t    return x & 0x7f;\n\t  }\n\t\n\t  function setIn(array, idx, val, canEdit) {\n\t    var newArray = canEdit ? array : arrCopy(array);\n\t    newArray[idx] = val;\n\t    return newArray;\n\t  }\n\t\n\t  function spliceIn(array, idx, val, canEdit) {\n\t    var newLen = array.length + 1;\n\t    if (canEdit && idx + 1 === newLen) {\n\t      array[idx] = val;\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        newArray[ii] = val;\n\t        after = -1;\n\t      } else {\n\t        newArray[ii] = array[ii + after];\n\t      }\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  function spliceOut(array, idx, canEdit) {\n\t    var newLen = array.length - 1;\n\t    if (canEdit && idx === newLen) {\n\t      array.pop();\n\t      return array;\n\t    }\n\t    var newArray = new Array(newLen);\n\t    var after = 0;\n\t    for (var ii = 0; ii < newLen; ii++) {\n\t      if (ii === idx) {\n\t        after = 1;\n\t      }\n\t      newArray[ii] = array[ii + after];\n\t    }\n\t    return newArray;\n\t  }\n\t\n\t  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n\t  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n\t  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\t\n\t  createClass(List, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function List(value) {\n\t      var empty = emptyList();\n\t      if (value === null || value === undefined) {\n\t        return empty;\n\t      }\n\t      if (isList(value)) {\n\t        return value;\n\t      }\n\t      var iter = IndexedIterable(value);\n\t      var size = iter.size;\n\t      if (size === 0) {\n\t        return empty;\n\t      }\n\t      assertNotInfinite(size);\n\t      if (size > 0 && size < SIZE) {\n\t        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n\t      }\n\t      return empty.withMutations(function(list ) {\n\t        list.setSize(size);\n\t        iter.forEach(function(v, i)  {return list.set(i, v)});\n\t      });\n\t    }\n\t\n\t    List.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    List.prototype.toString = function() {\n\t      return this.__toString('List [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    List.prototype.get = function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      if (index >= 0 && index < this.size) {\n\t        index += this._origin;\n\t        var node = listNodeFor(this, index);\n\t        return node && node.array[index & MASK];\n\t      }\n\t      return notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    List.prototype.set = function(index, value) {\n\t      return updateList(this, index, value);\n\t    };\n\t\n\t    List.prototype.remove = function(index) {\n\t      return !this.has(index) ? this :\n\t        index === 0 ? this.shift() :\n\t        index === this.size - 1 ? this.pop() :\n\t        this.splice(index, 1);\n\t    };\n\t\n\t    List.prototype.insert = function(index, value) {\n\t      return this.splice(index, 0, value);\n\t    };\n\t\n\t    List.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = this._origin = this._capacity = 0;\n\t        this._level = SHIFT;\n\t        this._root = this._tail = null;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyList();\n\t    };\n\t\n\t    List.prototype.push = function(/*...values*/) {\n\t      var values = arguments;\n\t      var oldSize = this.size;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, 0, oldSize + values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(oldSize + ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.pop = function() {\n\t      return setListBounds(this, 0, -1);\n\t    };\n\t\n\t    List.prototype.unshift = function(/*...values*/) {\n\t      var values = arguments;\n\t      return this.withMutations(function(list ) {\n\t        setListBounds(list, -values.length);\n\t        for (var ii = 0; ii < values.length; ii++) {\n\t          list.set(ii, values[ii]);\n\t        }\n\t      });\n\t    };\n\t\n\t    List.prototype.shift = function() {\n\t      return setListBounds(this, 1);\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    List.prototype.merge = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, undefined, arguments);\n\t    };\n\t\n\t    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, merger, iters);\n\t    };\n\t\n\t    List.prototype.mergeDeep = function(/*...iters*/) {\n\t      return mergeIntoListWith(this, deepMerger, arguments);\n\t    };\n\t\n\t    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n\t    };\n\t\n\t    List.prototype.setSize = function(size) {\n\t      return setListBounds(this, 0, size);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    List.prototype.slice = function(begin, end) {\n\t      var size = this.size;\n\t      if (wholeSlice(begin, end, size)) {\n\t        return this;\n\t      }\n\t      return setListBounds(\n\t        this,\n\t        resolveBegin(begin, size),\n\t        resolveEnd(end, size)\n\t      );\n\t    };\n\t\n\t    List.prototype.__iterator = function(type, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      return new Iterator(function()  {\n\t        var value = values();\n\t        return value === DONE ?\n\t          iteratorDone() :\n\t          iteratorValue(type, index++, value);\n\t      });\n\t    };\n\t\n\t    List.prototype.__iterate = function(fn, reverse) {\n\t      var index = 0;\n\t      var values = iterateList(this, reverse);\n\t      var value;\n\t      while ((value = values()) !== DONE) {\n\t        if (fn(value, index++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return index;\n\t    };\n\t\n\t    List.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        return this;\n\t      }\n\t      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isList(maybeList) {\n\t    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n\t  }\n\t\n\t  List.isList = isList;\n\t\n\t  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\t\n\t  var ListPrototype = List.prototype;\n\t  ListPrototype[IS_LIST_SENTINEL] = true;\n\t  ListPrototype[DELETE] = ListPrototype.remove;\n\t  ListPrototype.setIn = MapPrototype.setIn;\n\t  ListPrototype.deleteIn =\n\t  ListPrototype.removeIn = MapPrototype.removeIn;\n\t  ListPrototype.update = MapPrototype.update;\n\t  ListPrototype.updateIn = MapPrototype.updateIn;\n\t  ListPrototype.mergeIn = MapPrototype.mergeIn;\n\t  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  ListPrototype.withMutations = MapPrototype.withMutations;\n\t  ListPrototype.asMutable = MapPrototype.asMutable;\n\t  ListPrototype.asImmutable = MapPrototype.asImmutable;\n\t  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t\n\t    function VNode(array, ownerID) {\n\t      this.array = array;\n\t      this.ownerID = ownerID;\n\t    }\n\t\n\t    // TODO: seems like these methods are very similar\n\t\n\t    VNode.prototype.removeBefore = function(ownerID, level, index) {\n\t      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var originIndex = (index >>> level) & MASK;\n\t      if (originIndex >= this.array.length) {\n\t        return new VNode([], ownerID);\n\t      }\n\t      var removingFirst = originIndex === 0;\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[originIndex];\n\t        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && removingFirst) {\n\t          return this;\n\t        }\n\t      }\n\t      if (removingFirst && !newChild) {\n\t        return this;\n\t      }\n\t      var editable = editableVNode(this, ownerID);\n\t      if (!removingFirst) {\n\t        for (var ii = 0; ii < originIndex; ii++) {\n\t          editable.array[ii] = undefined;\n\t        }\n\t      }\n\t      if (newChild) {\n\t        editable.array[originIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t    VNode.prototype.removeAfter = function(ownerID, level, index) {\n\t      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n\t        return this;\n\t      }\n\t      var sizeIndex = ((index - 1) >>> level) & MASK;\n\t      if (sizeIndex >= this.array.length) {\n\t        return this;\n\t      }\n\t\n\t      var newChild;\n\t      if (level > 0) {\n\t        var oldChild = this.array[sizeIndex];\n\t        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n\t        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n\t          return this;\n\t        }\n\t      }\n\t\n\t      var editable = editableVNode(this, ownerID);\n\t      editable.array.splice(sizeIndex + 1);\n\t      if (newChild) {\n\t        editable.array[sizeIndex] = newChild;\n\t      }\n\t      return editable;\n\t    };\n\t\n\t\n\t\n\t  var DONE = {};\n\t\n\t  function iterateList(list, reverse) {\n\t    var left = list._origin;\n\t    var right = list._capacity;\n\t    var tailPos = getTailOffset(right);\n\t    var tail = list._tail;\n\t\n\t    return iterateNodeOrLeaf(list._root, list._level, 0);\n\t\n\t    function iterateNodeOrLeaf(node, level, offset) {\n\t      return level === 0 ?\n\t        iterateLeaf(node, offset) :\n\t        iterateNode(node, level, offset);\n\t    }\n\t\n\t    function iterateLeaf(node, offset) {\n\t      var array = offset === tailPos ? tail && tail.array : node && node.array;\n\t      var from = offset > left ? 0 : left - offset;\n\t      var to = right - offset;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        if (from === to) {\n\t          return DONE;\n\t        }\n\t        var idx = reverse ? --to : from++;\n\t        return array && array[idx];\n\t      };\n\t    }\n\t\n\t    function iterateNode(node, level, offset) {\n\t      var values;\n\t      var array = node && node.array;\n\t      var from = offset > left ? 0 : (left - offset) >> level;\n\t      var to = ((right - offset) >> level) + 1;\n\t      if (to > SIZE) {\n\t        to = SIZE;\n\t      }\n\t      return function()  {\n\t        do {\n\t          if (values) {\n\t            var value = values();\n\t            if (value !== DONE) {\n\t              return value;\n\t            }\n\t            values = null;\n\t          }\n\t          if (from === to) {\n\t            return DONE;\n\t          }\n\t          var idx = reverse ? --to : from++;\n\t          values = iterateNodeOrLeaf(\n\t            array && array[idx], level - SHIFT, offset + (idx << level)\n\t          );\n\t        } while (true);\n\t      };\n\t    }\n\t  }\n\t\n\t  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n\t    var list = Object.create(ListPrototype);\n\t    list.size = capacity - origin;\n\t    list._origin = origin;\n\t    list._capacity = capacity;\n\t    list._level = level;\n\t    list._root = root;\n\t    list._tail = tail;\n\t    list.__ownerID = ownerID;\n\t    list.__hash = hash;\n\t    list.__altered = false;\n\t    return list;\n\t  }\n\t\n\t  var EMPTY_LIST;\n\t  function emptyList() {\n\t    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n\t  }\n\t\n\t  function updateList(list, index, value) {\n\t    index = wrapIndex(list, index);\n\t\n\t    if (index !== index) {\n\t      return list;\n\t    }\n\t\n\t    if (index >= list.size || index < 0) {\n\t      return list.withMutations(function(list ) {\n\t        index < 0 ?\n\t          setListBounds(list, index).set(0, value) :\n\t          setListBounds(list, 0, index + 1).set(index, value)\n\t      });\n\t    }\n\t\n\t    index += list._origin;\n\t\n\t    var newTail = list._tail;\n\t    var newRoot = list._root;\n\t    var didAlter = MakeRef(DID_ALTER);\n\t    if (index >= getTailOffset(list._capacity)) {\n\t      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n\t    } else {\n\t      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n\t    }\n\t\n\t    if (!didAlter.value) {\n\t      return list;\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n\t  }\n\t\n\t  function updateVNode(node, ownerID, level, index, value, didAlter) {\n\t    var idx = (index >>> level) & MASK;\n\t    var nodeHas = node && idx < node.array.length;\n\t    if (!nodeHas && value === undefined) {\n\t      return node;\n\t    }\n\t\n\t    var newNode;\n\t\n\t    if (level > 0) {\n\t      var lowerNode = node && node.array[idx];\n\t      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n\t      if (newLowerNode === lowerNode) {\n\t        return node;\n\t      }\n\t      newNode = editableVNode(node, ownerID);\n\t      newNode.array[idx] = newLowerNode;\n\t      return newNode;\n\t    }\n\t\n\t    if (nodeHas && node.array[idx] === value) {\n\t      return node;\n\t    }\n\t\n\t    SetRef(didAlter);\n\t\n\t    newNode = editableVNode(node, ownerID);\n\t    if (value === undefined && idx === newNode.array.length - 1) {\n\t      newNode.array.pop();\n\t    } else {\n\t      newNode.array[idx] = value;\n\t    }\n\t    return newNode;\n\t  }\n\t\n\t  function editableVNode(node, ownerID) {\n\t    if (ownerID && node && ownerID === node.ownerID) {\n\t      return node;\n\t    }\n\t    return new VNode(node ? node.array.slice() : [], ownerID);\n\t  }\n\t\n\t  function listNodeFor(list, rawIndex) {\n\t    if (rawIndex >= getTailOffset(list._capacity)) {\n\t      return list._tail;\n\t    }\n\t    if (rawIndex < 1 << (list._level + SHIFT)) {\n\t      var node = list._root;\n\t      var level = list._level;\n\t      while (node && level > 0) {\n\t        node = node.array[(rawIndex >>> level) & MASK];\n\t        level -= SHIFT;\n\t      }\n\t      return node;\n\t    }\n\t  }\n\t\n\t  function setListBounds(list, begin, end) {\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      end = end | 0;\n\t    }\n\t    var owner = list.__ownerID || new OwnerID();\n\t    var oldOrigin = list._origin;\n\t    var oldCapacity = list._capacity;\n\t    var newOrigin = oldOrigin + begin;\n\t    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n\t    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n\t      return list;\n\t    }\n\t\n\t    // If it's going to end after it starts, it's empty.\n\t    if (newOrigin >= newCapacity) {\n\t      return list.clear();\n\t    }\n\t\n\t    var newLevel = list._level;\n\t    var newRoot = list._root;\n\t\n\t    // New origin might need creating a higher root.\n\t    var offsetShift = 0;\n\t    while (newOrigin + offsetShift < 0) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t      offsetShift += 1 << newLevel;\n\t    }\n\t    if (offsetShift) {\n\t      newOrigin += offsetShift;\n\t      oldOrigin += offsetShift;\n\t      newCapacity += offsetShift;\n\t      oldCapacity += offsetShift;\n\t    }\n\t\n\t    var oldTailOffset = getTailOffset(oldCapacity);\n\t    var newTailOffset = getTailOffset(newCapacity);\n\t\n\t    // New size might need creating a higher root.\n\t    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n\t      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n\t      newLevel += SHIFT;\n\t    }\n\t\n\t    // Locate or create the new tail.\n\t    var oldTail = list._tail;\n\t    var newTail = newTailOffset < oldTailOffset ?\n\t      listNodeFor(list, newCapacity - 1) :\n\t      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\t\n\t    // Merge Tail into tree.\n\t    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n\t      newRoot = editableVNode(newRoot, owner);\n\t      var node = newRoot;\n\t      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n\t        var idx = (oldTailOffset >>> level) & MASK;\n\t        node = node.array[idx] = editableVNode(node.array[idx], owner);\n\t      }\n\t      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n\t    }\n\t\n\t    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n\t    if (newCapacity < oldCapacity) {\n\t      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n\t    }\n\t\n\t    // If the new origin is within the tail, then we do not need a root.\n\t    if (newOrigin >= newTailOffset) {\n\t      newOrigin -= newTailOffset;\n\t      newCapacity -= newTailOffset;\n\t      newLevel = SHIFT;\n\t      newRoot = null;\n\t      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\t\n\t    // Otherwise, if the root has been trimmed, garbage collect.\n\t    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n\t      offsetShift = 0;\n\t\n\t      // Identify the new top root node of the subtree of the old root.\n\t      while (newRoot) {\n\t        var beginIndex = (newOrigin >>> newLevel) & MASK;\n\t        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n\t          break;\n\t        }\n\t        if (beginIndex) {\n\t          offsetShift += (1 << newLevel) * beginIndex;\n\t        }\n\t        newLevel -= SHIFT;\n\t        newRoot = newRoot.array[beginIndex];\n\t      }\n\t\n\t      // Trim the new sides of the new root.\n\t      if (newRoot && newOrigin > oldOrigin) {\n\t        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n\t      }\n\t      if (newRoot && newTailOffset < oldTailOffset) {\n\t        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n\t      }\n\t      if (offsetShift) {\n\t        newOrigin -= offsetShift;\n\t        newCapacity -= offsetShift;\n\t      }\n\t    }\n\t\n\t    if (list.__ownerID) {\n\t      list.size = newCapacity - newOrigin;\n\t      list._origin = newOrigin;\n\t      list._capacity = newCapacity;\n\t      list._level = newLevel;\n\t      list._root = newRoot;\n\t      list._tail = newTail;\n\t      list.__hash = undefined;\n\t      list.__altered = true;\n\t      return list;\n\t    }\n\t    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n\t  }\n\t\n\t  function mergeIntoListWith(list, merger, iterables) {\n\t    var iters = [];\n\t    var maxSize = 0;\n\t    for (var ii = 0; ii < iterables.length; ii++) {\n\t      var value = iterables[ii];\n\t      var iter = IndexedIterable(value);\n\t      if (iter.size > maxSize) {\n\t        maxSize = iter.size;\n\t      }\n\t      if (!isIterable(value)) {\n\t        iter = iter.map(function(v ) {return fromJS(v)});\n\t      }\n\t      iters.push(iter);\n\t    }\n\t    if (maxSize > list.size) {\n\t      list = list.setSize(maxSize);\n\t    }\n\t    return mergeIntoCollectionWith(list, merger, iters);\n\t  }\n\t\n\t  function getTailOffset(size) {\n\t    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n\t  }\n\t\n\t  createClass(OrderedMap, Map);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedMap(value) {\n\t      return value === null || value === undefined ? emptyOrderedMap() :\n\t        isOrderedMap(value) ? value :\n\t        emptyOrderedMap().withMutations(function(map ) {\n\t          var iter = KeyedIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v, k)  {return map.set(k, v)});\n\t        });\n\t    }\n\t\n\t    OrderedMap.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedMap.prototype.toString = function() {\n\t      return this.__toString('OrderedMap {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    OrderedMap.prototype.get = function(k, notSetValue) {\n\t      var index = this._map.get(k);\n\t      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    OrderedMap.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._map.clear();\n\t        this._list.clear();\n\t        return this;\n\t      }\n\t      return emptyOrderedMap();\n\t    };\n\t\n\t    OrderedMap.prototype.set = function(k, v) {\n\t      return updateOrderedMap(this, k, v);\n\t    };\n\t\n\t    OrderedMap.prototype.remove = function(k) {\n\t      return updateOrderedMap(this, k, NOT_SET);\n\t    };\n\t\n\t    OrderedMap.prototype.wasAltered = function() {\n\t      return this._map.wasAltered() || this._list.wasAltered();\n\t    };\n\t\n\t    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._list.__iterate(\n\t        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n\t        reverse\n\t      );\n\t    };\n\t\n\t    OrderedMap.prototype.__iterator = function(type, reverse) {\n\t      return this._list.fromEntrySeq().__iterator(type, reverse);\n\t    };\n\t\n\t    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      var newList = this._list.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        this._list = newList;\n\t        return this;\n\t      }\n\t      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n\t    };\n\t\n\t\n\t  function isOrderedMap(maybeOrderedMap) {\n\t    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n\t  }\n\t\n\t  OrderedMap.isOrderedMap = isOrderedMap;\n\t\n\t  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n\t  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\t\n\t\n\t\n\t  function makeOrderedMap(map, list, ownerID, hash) {\n\t    var omap = Object.create(OrderedMap.prototype);\n\t    omap.size = map ? map.size : 0;\n\t    omap._map = map;\n\t    omap._list = list;\n\t    omap.__ownerID = ownerID;\n\t    omap.__hash = hash;\n\t    return omap;\n\t  }\n\t\n\t  var EMPTY_ORDERED_MAP;\n\t  function emptyOrderedMap() {\n\t    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n\t  }\n\t\n\t  function updateOrderedMap(omap, k, v) {\n\t    var map = omap._map;\n\t    var list = omap._list;\n\t    var i = map.get(k);\n\t    var has = i !== undefined;\n\t    var newMap;\n\t    var newList;\n\t    if (v === NOT_SET) { // removed\n\t      if (!has) {\n\t        return omap;\n\t      }\n\t      if (list.size >= SIZE && list.size >= map.size * 2) {\n\t        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n\t        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n\t        if (omap.__ownerID) {\n\t          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n\t        }\n\t      } else {\n\t        newMap = map.remove(k);\n\t        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n\t      }\n\t    } else {\n\t      if (has) {\n\t        if (v === list.get(i)[1]) {\n\t          return omap;\n\t        }\n\t        newMap = map;\n\t        newList = list.set(i, [k, v]);\n\t      } else {\n\t        newMap = map.set(k, list.size);\n\t        newList = list.set(list.size, [k, v]);\n\t      }\n\t    }\n\t    if (omap.__ownerID) {\n\t      omap.size = newMap.size;\n\t      omap._map = newMap;\n\t      omap._list = newList;\n\t      omap.__hash = undefined;\n\t      return omap;\n\t    }\n\t    return makeOrderedMap(newMap, newList);\n\t  }\n\t\n\t  createClass(ToKeyedSequence, KeyedSeq);\n\t    function ToKeyedSequence(indexed, useKeys) {\n\t      this._iter = indexed;\n\t      this._useKeys = useKeys;\n\t      this.size = indexed.size;\n\t    }\n\t\n\t    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n\t      return this._iter.get(key, notSetValue);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.has = function(key) {\n\t      return this._iter.has(key);\n\t    };\n\t\n\t    ToKeyedSequence.prototype.valueSeq = function() {\n\t      return this._iter.valueSeq();\n\t    };\n\t\n\t    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n\t      var reversedSequence = reverseFactory(this, true);\n\t      if (!this._useKeys) {\n\t        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n\t      }\n\t      return reversedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n\t      var mappedSequence = mapFactory(this, mapper, context);\n\t      if (!this._useKeys) {\n\t        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n\t      }\n\t      return mappedSequence;\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var ii;\n\t      return this._iter.__iterate(\n\t        this._useKeys ?\n\t          function(v, k)  {return fn(v, k, this$0)} :\n\t          ((ii = reverse ? resolveSize(this) : 0),\n\t            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n\t        reverse\n\t      );\n\t    };\n\t\n\t    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n\t      if (this._useKeys) {\n\t        return this._iter.__iterator(type, reverse);\n\t      }\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var ii = reverse ? resolveSize(this) : 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n\t      });\n\t    };\n\t\n\t  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t  createClass(ToIndexedSequence, IndexedSeq);\n\t    function ToIndexedSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToIndexedSequence.prototype.includes = function(value) {\n\t      return this._iter.includes(value);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n\t    };\n\t\n\t    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, iterations++, step.value, step)\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(ToSetSequence, SetSeq);\n\t    function ToSetSequence(iter) {\n\t      this._iter = iter;\n\t      this.size = iter.size;\n\t    }\n\t\n\t    ToSetSequence.prototype.has = function(key) {\n\t      return this._iter.includes(key);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n\t    };\n\t\n\t    ToSetSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        return step.done ? step :\n\t          iteratorValue(type, step.value, step.value, step);\n\t      });\n\t    };\n\t\n\t\n\t\n\t  createClass(FromEntriesSequence, KeyedSeq);\n\t    function FromEntriesSequence(entries) {\n\t      this._iter = entries;\n\t      this.size = entries.size;\n\t    }\n\t\n\t    FromEntriesSequence.prototype.entrySeq = function() {\n\t      return this._iter.toSeq();\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._iter.__iterate(function(entry ) {\n\t        // Check if entry exists first so array access doesn't throw for holes\n\t        // in the parent iteration.\n\t        if (entry) {\n\t          validateEntry(entry);\n\t          var indexedIterable = isIterable(entry);\n\t          return fn(\n\t            indexedIterable ? entry.get(1) : entry[1],\n\t            indexedIterable ? entry.get(0) : entry[0],\n\t            this$0\n\t          );\n\t        }\n\t      }, reverse);\n\t    };\n\t\n\t    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n\t      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          // Check if entry exists first so array access doesn't throw for holes\n\t          // in the parent iteration.\n\t          if (entry) {\n\t            validateEntry(entry);\n\t            var indexedIterable = isIterable(entry);\n\t            return iteratorValue(\n\t              type,\n\t              indexedIterable ? entry.get(0) : entry[0],\n\t              indexedIterable ? entry.get(1) : entry[1],\n\t              step\n\t            );\n\t          }\n\t        }\n\t      });\n\t    };\n\t\n\t\n\t  ToIndexedSequence.prototype.cacheResult =\n\t  ToKeyedSequence.prototype.cacheResult =\n\t  ToSetSequence.prototype.cacheResult =\n\t  FromEntriesSequence.prototype.cacheResult =\n\t    cacheResultThrough;\n\t\n\t\n\t  function flipFactory(iterable) {\n\t    var flipSequence = makeSequence(iterable);\n\t    flipSequence._iter = iterable;\n\t    flipSequence.size = iterable.size;\n\t    flipSequence.flip = function()  {return iterable};\n\t    flipSequence.reverse = function () {\n\t      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n\t      reversedSequence.flip = function()  {return iterable.reverse()};\n\t      return reversedSequence;\n\t    };\n\t    flipSequence.has = function(key ) {return iterable.includes(key)};\n\t    flipSequence.includes = function(key ) {return iterable.has(key)};\n\t    flipSequence.cacheResult = cacheResultThrough;\n\t    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n\t    }\n\t    flipSequence.__iteratorUncached = function(type, reverse) {\n\t      if (type === ITERATE_ENTRIES) {\n\t        var iterator = iterable.__iterator(type, reverse);\n\t        return new Iterator(function()  {\n\t          var step = iterator.next();\n\t          if (!step.done) {\n\t            var k = step.value[0];\n\t            step.value[0] = step.value[1];\n\t            step.value[1] = k;\n\t          }\n\t          return step;\n\t        });\n\t      }\n\t      return iterable.__iterator(\n\t        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n\t        reverse\n\t      );\n\t    }\n\t    return flipSequence;\n\t  }\n\t\n\t\n\t  function mapFactory(iterable, mapper, context) {\n\t    var mappedSequence = makeSequence(iterable);\n\t    mappedSequence.size = iterable.size;\n\t    mappedSequence.has = function(key ) {return iterable.has(key)};\n\t    mappedSequence.get = function(key, notSetValue)  {\n\t      var v = iterable.get(key, NOT_SET);\n\t      return v === NOT_SET ?\n\t        notSetValue :\n\t        mapper.call(context, v, key, iterable);\n\t    };\n\t    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(\n\t        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n\t        reverse\n\t      );\n\t    }\n\t    mappedSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      return new Iterator(function()  {\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var key = entry[0];\n\t        return iteratorValue(\n\t          type,\n\t          key,\n\t          mapper.call(context, entry[1], key, iterable),\n\t          step\n\t        );\n\t      });\n\t    }\n\t    return mappedSequence;\n\t  }\n\t\n\t\n\t  function reverseFactory(iterable, useKeys) {\n\t    var reversedSequence = makeSequence(iterable);\n\t    reversedSequence._iter = iterable;\n\t    reversedSequence.size = iterable.size;\n\t    reversedSequence.reverse = function()  {return iterable};\n\t    if (iterable.flip) {\n\t      reversedSequence.flip = function () {\n\t        var flipSequence = flipFactory(iterable);\n\t        flipSequence.reverse = function()  {return iterable.flip()};\n\t        return flipSequence;\n\t      };\n\t    }\n\t    reversedSequence.get = function(key, notSetValue) \n\t      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n\t    reversedSequence.has = function(key )\n\t      {return iterable.has(useKeys ? key : -1 - key)};\n\t    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n\t    reversedSequence.cacheResult = cacheResultThrough;\n\t    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n\t      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n\t    };\n\t    reversedSequence.__iterator =\n\t      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n\t    return reversedSequence;\n\t  }\n\t\n\t\n\t  function filterFactory(iterable, predicate, context, useKeys) {\n\t    var filterSequence = makeSequence(iterable);\n\t    if (useKeys) {\n\t      filterSequence.has = function(key ) {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n\t      };\n\t      filterSequence.get = function(key, notSetValue)  {\n\t        var v = iterable.get(key, NOT_SET);\n\t        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n\t          v : notSetValue;\n\t      };\n\t    }\n\t    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      }, reverse);\n\t      return iterations;\n\t    };\n\t    filterSequence.__iteratorUncached = function (type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (true) {\n\t          var step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t          var entry = step.value;\n\t          var key = entry[0];\n\t          var value = entry[1];\n\t          if (predicate.call(context, value, key, iterable)) {\n\t            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n\t          }\n\t        }\n\t      });\n\t    }\n\t    return filterSequence;\n\t  }\n\t\n\t\n\t  function countByFactory(iterable, grouper, context) {\n\t    var groups = Map().asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        0,\n\t        function(a ) {return a + 1}\n\t      );\n\t    });\n\t    return groups.asImmutable();\n\t  }\n\t\n\t\n\t  function groupByFactory(iterable, grouper, context) {\n\t    var isKeyedIter = isKeyed(iterable);\n\t    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n\t    iterable.__iterate(function(v, k)  {\n\t      groups.update(\n\t        grouper.call(context, v, k, iterable),\n\t        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n\t      );\n\t    });\n\t    var coerce = iterableClass(iterable);\n\t    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n\t  }\n\t\n\t\n\t  function sliceFactory(iterable, begin, end, useKeys) {\n\t    var originalSize = iterable.size;\n\t\n\t    // Sanitize begin & end using this shorthand for ToInt32(argument)\n\t    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n\t    if (begin !== undefined) {\n\t      begin = begin | 0;\n\t    }\n\t    if (end !== undefined) {\n\t      if (end === Infinity) {\n\t        end = originalSize;\n\t      } else {\n\t        end = end | 0;\n\t      }\n\t    }\n\t\n\t    if (wholeSlice(begin, end, originalSize)) {\n\t      return iterable;\n\t    }\n\t\n\t    var resolvedBegin = resolveBegin(begin, originalSize);\n\t    var resolvedEnd = resolveEnd(end, originalSize);\n\t\n\t    // begin or end will be NaN if they were provided as negative numbers and\n\t    // this iterable's size is unknown. In that case, cache first so there is\n\t    // a known size and these do not resolve to NaN.\n\t    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n\t      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n\t    }\n\t\n\t    // Note: resolvedEnd is undefined when the original sequence's length is\n\t    // unknown and this slice did not supply an end and should contain all\n\t    // elements after resolvedBegin.\n\t    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n\t    var resolvedSize = resolvedEnd - resolvedBegin;\n\t    var sliceSize;\n\t    if (resolvedSize === resolvedSize) {\n\t      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n\t    }\n\t\n\t    var sliceSeq = makeSequence(iterable);\n\t\n\t    // If iterable.size is undefined, the size of the realized sliceSeq is\n\t    // unknown at this point unless the number of items to slice is 0\n\t    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\t\n\t    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n\t      sliceSeq.get = function (index, notSetValue) {\n\t        index = wrapIndex(this, index);\n\t        return index >= 0 && index < sliceSize ?\n\t          iterable.get(index + resolvedBegin, notSetValue) :\n\t          notSetValue;\n\t      }\n\t    }\n\t\n\t    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (sliceSize === 0) {\n\t        return 0;\n\t      }\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var skipped = 0;\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k)  {\n\t        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n\t                 iterations !== sliceSize;\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t\n\t    sliceSeq.__iteratorUncached = function(type, reverse) {\n\t      if (sliceSize !== 0 && reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      // Don't bother instantiating parent iterator if taking 0.\n\t      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n\t      var skipped = 0;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (skipped++ < resolvedBegin) {\n\t          iterator.next();\n\t        }\n\t        if (++iterations > sliceSize) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (useKeys || type === ITERATE_VALUES) {\n\t          return step;\n\t        } else if (type === ITERATE_KEYS) {\n\t          return iteratorValue(type, iterations - 1, undefined, step);\n\t        } else {\n\t          return iteratorValue(type, iterations - 1, step.value[1], step);\n\t        }\n\t      });\n\t    }\n\t\n\t    return sliceSeq;\n\t  }\n\t\n\t\n\t  function takeWhileFactory(iterable, predicate, context) {\n\t    var takeSequence = makeSequence(iterable);\n\t    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c) \n\t        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n\t      );\n\t      return iterations;\n\t    };\n\t    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var iterating = true;\n\t      return new Iterator(function()  {\n\t        if (!iterating) {\n\t          return iteratorDone();\n\t        }\n\t        var step = iterator.next();\n\t        if (step.done) {\n\t          return step;\n\t        }\n\t        var entry = step.value;\n\t        var k = entry[0];\n\t        var v = entry[1];\n\t        if (!predicate.call(context, v, k, this$0)) {\n\t          iterating = false;\n\t          return iteratorDone();\n\t        }\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return takeSequence;\n\t  }\n\t\n\t\n\t  function skipWhileFactory(iterable, predicate, context, useKeys) {\n\t    var skipSequence = makeSequence(iterable);\n\t    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterate(fn, reverse);\n\t      }\n\t      var isSkipping = true;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k, c)  {\n\t        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n\t          iterations++;\n\t          return fn(v, useKeys ? k : iterations - 1, this$0);\n\t        }\n\t      });\n\t      return iterations;\n\t    };\n\t    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n\t      if (reverse) {\n\t        return this.cacheResult().__iterator(type, reverse);\n\t      }\n\t      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n\t      var skipping = true;\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        var step, k, v;\n\t        do {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            if (useKeys || type === ITERATE_VALUES) {\n\t              return step;\n\t            } else if (type === ITERATE_KEYS) {\n\t              return iteratorValue(type, iterations++, undefined, step);\n\t            } else {\n\t              return iteratorValue(type, iterations++, step.value[1], step);\n\t            }\n\t          }\n\t          var entry = step.value;\n\t          k = entry[0];\n\t          v = entry[1];\n\t          skipping && (skipping = predicate.call(context, v, k, this$0));\n\t        } while (skipping);\n\t        return type === ITERATE_ENTRIES ? step :\n\t          iteratorValue(type, k, v, step);\n\t      });\n\t    };\n\t    return skipSequence;\n\t  }\n\t\n\t\n\t  function concatFactory(iterable, values) {\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var iters = [iterable].concat(values).map(function(v ) {\n\t      if (!isIterable(v)) {\n\t        v = isKeyedIterable ?\n\t          keyedSeqFromValue(v) :\n\t          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n\t      } else if (isKeyedIterable) {\n\t        v = KeyedIterable(v);\n\t      }\n\t      return v;\n\t    }).filter(function(v ) {return v.size !== 0});\n\t\n\t    if (iters.length === 0) {\n\t      return iterable;\n\t    }\n\t\n\t    if (iters.length === 1) {\n\t      var singleton = iters[0];\n\t      if (singleton === iterable ||\n\t          isKeyedIterable && isKeyed(singleton) ||\n\t          isIndexed(iterable) && isIndexed(singleton)) {\n\t        return singleton;\n\t      }\n\t    }\n\t\n\t    var concatSeq = new ArraySeq(iters);\n\t    if (isKeyedIterable) {\n\t      concatSeq = concatSeq.toKeyedSeq();\n\t    } else if (!isIndexed(iterable)) {\n\t      concatSeq = concatSeq.toSetSeq();\n\t    }\n\t    concatSeq = concatSeq.flatten(true);\n\t    concatSeq.size = iters.reduce(\n\t      function(sum, seq)  {\n\t        if (sum !== undefined) {\n\t          var size = seq.size;\n\t          if (size !== undefined) {\n\t            return sum + size;\n\t          }\n\t        }\n\t      },\n\t      0\n\t    );\n\t    return concatSeq;\n\t  }\n\t\n\t\n\t  function flattenFactory(iterable, depth, useKeys) {\n\t    var flatSequence = makeSequence(iterable);\n\t    flatSequence.__iterateUncached = function(fn, reverse) {\n\t      var iterations = 0;\n\t      var stopped = false;\n\t      function flatDeep(iter, currentDepth) {var this$0 = this;\n\t        iter.__iterate(function(v, k)  {\n\t          if ((!depth || currentDepth < depth) && isIterable(v)) {\n\t            flatDeep(v, currentDepth + 1);\n\t          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n\t            stopped = true;\n\t          }\n\t          return !stopped;\n\t        }, reverse);\n\t      }\n\t      flatDeep(iterable, 0);\n\t      return iterations;\n\t    }\n\t    flatSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(type, reverse);\n\t      var stack = [];\n\t      var iterations = 0;\n\t      return new Iterator(function()  {\n\t        while (iterator) {\n\t          var step = iterator.next();\n\t          if (step.done !== false) {\n\t            iterator = stack.pop();\n\t            continue;\n\t          }\n\t          var v = step.value;\n\t          if (type === ITERATE_ENTRIES) {\n\t            v = v[1];\n\t          }\n\t          if ((!depth || stack.length < depth) && isIterable(v)) {\n\t            stack.push(iterator);\n\t            iterator = v.__iterator(type, reverse);\n\t          } else {\n\t            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n\t          }\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    }\n\t    return flatSequence;\n\t  }\n\t\n\t\n\t  function flatMapFactory(iterable, mapper, context) {\n\t    var coerce = iterableClass(iterable);\n\t    return iterable.toSeq().map(\n\t      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n\t    ).flatten(true);\n\t  }\n\t\n\t\n\t  function interposeFactory(iterable, separator) {\n\t    var interposedSequence = makeSequence(iterable);\n\t    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n\t    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n\t      var iterations = 0;\n\t      iterable.__iterate(function(v, k) \n\t        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n\t        fn(v, iterations++, this$0) !== false},\n\t        reverse\n\t      );\n\t      return iterations;\n\t    };\n\t    interposedSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n\t      var iterations = 0;\n\t      var step;\n\t      return new Iterator(function()  {\n\t        if (!step || iterations % 2) {\n\t          step = iterator.next();\n\t          if (step.done) {\n\t            return step;\n\t          }\n\t        }\n\t        return iterations % 2 ?\n\t          iteratorValue(type, iterations++, separator) :\n\t          iteratorValue(type, iterations++, step.value, step);\n\t      });\n\t    };\n\t    return interposedSequence;\n\t  }\n\t\n\t\n\t  function sortFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    var isKeyedIterable = isKeyed(iterable);\n\t    var index = 0;\n\t    var entries = iterable.toSeq().map(\n\t      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n\t    ).toArray();\n\t    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n\t      isKeyedIterable ?\n\t      function(v, i)  { entries[i].length = 2; } :\n\t      function(v, i)  { entries[i] = v[1]; }\n\t    );\n\t    return isKeyedIterable ? KeyedSeq(entries) :\n\t      isIndexed(iterable) ? IndexedSeq(entries) :\n\t      SetSeq(entries);\n\t  }\n\t\n\t\n\t  function maxFactory(iterable, comparator, mapper) {\n\t    if (!comparator) {\n\t      comparator = defaultComparator;\n\t    }\n\t    if (mapper) {\n\t      var entry = iterable.toSeq()\n\t        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n\t        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n\t      return entry && entry[0];\n\t    } else {\n\t      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n\t    }\n\t  }\n\t\n\t  function maxCompare(comparator, a, b) {\n\t    var comp = comparator(b, a);\n\t    // b is considered the new max if the comparator declares them equal, but\n\t    // they are not equal and b is in fact a nullish value.\n\t    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n\t  }\n\t\n\t\n\t  function zipWithFactory(keyIter, zipper, iters) {\n\t    var zipSequence = makeSequence(keyIter);\n\t    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n\t    // Note: this a generic base implementation of __iterate in terms of\n\t    // __iterator which may be more generically useful in the future.\n\t    zipSequence.__iterate = function(fn, reverse) {\n\t      /* generic:\n\t      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        iterations++;\n\t        if (fn(step.value[1], step.value[0], this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t      */\n\t      // indexed:\n\t      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n\t      var step;\n\t      var iterations = 0;\n\t      while (!(step = iterator.next()).done) {\n\t        if (fn(step.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t      }\n\t      return iterations;\n\t    };\n\t    zipSequence.__iteratorUncached = function(type, reverse) {\n\t      var iterators = iters.map(function(i )\n\t        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n\t      );\n\t      var iterations = 0;\n\t      var isDone = false;\n\t      return new Iterator(function()  {\n\t        var steps;\n\t        if (!isDone) {\n\t          steps = iterators.map(function(i ) {return i.next()});\n\t          isDone = steps.some(function(s ) {return s.done});\n\t        }\n\t        if (isDone) {\n\t          return iteratorDone();\n\t        }\n\t        return iteratorValue(\n\t          type,\n\t          iterations++,\n\t          zipper.apply(null, steps.map(function(s ) {return s.value}))\n\t        );\n\t      });\n\t    };\n\t    return zipSequence\n\t  }\n\t\n\t\n\t  // #pragma Helper Functions\n\t\n\t  function reify(iter, seq) {\n\t    return isSeq(iter) ? seq : iter.constructor(seq);\n\t  }\n\t\n\t  function validateEntry(entry) {\n\t    if (entry !== Object(entry)) {\n\t      throw new TypeError('Expected [K, V] tuple: ' + entry);\n\t    }\n\t  }\n\t\n\t  function resolveSize(iter) {\n\t    assertNotInfinite(iter.size);\n\t    return ensureSize(iter);\n\t  }\n\t\n\t  function iterableClass(iterable) {\n\t    return isKeyed(iterable) ? KeyedIterable :\n\t      isIndexed(iterable) ? IndexedIterable :\n\t      SetIterable;\n\t  }\n\t\n\t  function makeSequence(iterable) {\n\t    return Object.create(\n\t      (\n\t        isKeyed(iterable) ? KeyedSeq :\n\t        isIndexed(iterable) ? IndexedSeq :\n\t        SetSeq\n\t      ).prototype\n\t    );\n\t  }\n\t\n\t  function cacheResultThrough() {\n\t    if (this._iter.cacheResult) {\n\t      this._iter.cacheResult();\n\t      this.size = this._iter.size;\n\t      return this;\n\t    } else {\n\t      return Seq.prototype.cacheResult.call(this);\n\t    }\n\t  }\n\t\n\t  function defaultComparator(a, b) {\n\t    return a > b ? 1 : a < b ? -1 : 0;\n\t  }\n\t\n\t  function forceIterator(keyPath) {\n\t    var iter = getIterator(keyPath);\n\t    if (!iter) {\n\t      // Array might not be iterable in this environment, so we need a fallback\n\t      // to our wrapped type.\n\t      if (!isArrayLike(keyPath)) {\n\t        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n\t      }\n\t      iter = getIterator(Iterable(keyPath));\n\t    }\n\t    return iter;\n\t  }\n\t\n\t  createClass(Record, KeyedCollection);\n\t\n\t    function Record(defaultValues, name) {\n\t      var hasInitialized;\n\t\n\t      var RecordType = function Record(values) {\n\t        if (values instanceof RecordType) {\n\t          return values;\n\t        }\n\t        if (!(this instanceof RecordType)) {\n\t          return new RecordType(values);\n\t        }\n\t        if (!hasInitialized) {\n\t          hasInitialized = true;\n\t          var keys = Object.keys(defaultValues);\n\t          setProps(RecordTypePrototype, keys);\n\t          RecordTypePrototype.size = keys.length;\n\t          RecordTypePrototype._name = name;\n\t          RecordTypePrototype._keys = keys;\n\t          RecordTypePrototype._defaultValues = defaultValues;\n\t        }\n\t        this._map = Map(values);\n\t      };\n\t\n\t      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n\t      RecordTypePrototype.constructor = RecordType;\n\t\n\t      return RecordType;\n\t    }\n\t\n\t    Record.prototype.toString = function() {\n\t      return this.__toString(recordName(this) + ' {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Record.prototype.has = function(k) {\n\t      return this._defaultValues.hasOwnProperty(k);\n\t    };\n\t\n\t    Record.prototype.get = function(k, notSetValue) {\n\t      if (!this.has(k)) {\n\t        return notSetValue;\n\t      }\n\t      var defaultVal = this._defaultValues[k];\n\t      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Record.prototype.clear = function() {\n\t      if (this.__ownerID) {\n\t        this._map && this._map.clear();\n\t        return this;\n\t      }\n\t      var RecordType = this.constructor;\n\t      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n\t    };\n\t\n\t    Record.prototype.set = function(k, v) {\n\t      if (!this.has(k)) {\n\t        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n\t      }\n\t      if (this._map && !this._map.has(k)) {\n\t        var defaultVal = this._defaultValues[k];\n\t        if (v === defaultVal) {\n\t          return this;\n\t        }\n\t      }\n\t      var newMap = this._map && this._map.set(k, v);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.remove = function(k) {\n\t      if (!this.has(k)) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.remove(k);\n\t      if (this.__ownerID || newMap === this._map) {\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap);\n\t    };\n\t\n\t    Record.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n\t    };\n\t\n\t    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n\t    };\n\t\n\t    Record.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map && this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return makeRecord(this, newMap, ownerID);\n\t    };\n\t\n\t\n\t  var RecordPrototype = Record.prototype;\n\t  RecordPrototype[DELETE] = RecordPrototype.remove;\n\t  RecordPrototype.deleteIn =\n\t  RecordPrototype.removeIn = MapPrototype.removeIn;\n\t  RecordPrototype.merge = MapPrototype.merge;\n\t  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n\t  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n\t  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n\t  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n\t  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n\t  RecordPrototype.setIn = MapPrototype.setIn;\n\t  RecordPrototype.update = MapPrototype.update;\n\t  RecordPrototype.updateIn = MapPrototype.updateIn;\n\t  RecordPrototype.withMutations = MapPrototype.withMutations;\n\t  RecordPrototype.asMutable = MapPrototype.asMutable;\n\t  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t\n\t  function makeRecord(likeRecord, map, ownerID) {\n\t    var record = Object.create(Object.getPrototypeOf(likeRecord));\n\t    record._map = map;\n\t    record.__ownerID = ownerID;\n\t    return record;\n\t  }\n\t\n\t  function recordName(record) {\n\t    return record._name || record.constructor.name || 'Record';\n\t  }\n\t\n\t  function setProps(prototype, names) {\n\t    try {\n\t      names.forEach(setProp.bind(undefined, prototype));\n\t    } catch (error) {\n\t      // Object.defineProperty failed. Probably IE8.\n\t    }\n\t  }\n\t\n\t  function setProp(prototype, name) {\n\t    Object.defineProperty(prototype, name, {\n\t      get: function() {\n\t        return this.get(name);\n\t      },\n\t      set: function(value) {\n\t        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n\t        this.set(name, value);\n\t      }\n\t    });\n\t  }\n\t\n\t  createClass(Set, SetCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Set(value) {\n\t      return value === null || value === undefined ? emptySet() :\n\t        isSet(value) && !isOrdered(value) ? value :\n\t        emptySet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    Set.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Set.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    Set.prototype.toString = function() {\n\t      return this.__toString('Set {', '}');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Set.prototype.has = function(value) {\n\t      return this._map.has(value);\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Set.prototype.add = function(value) {\n\t      return updateSet(this, this._map.set(value, true));\n\t    };\n\t\n\t    Set.prototype.remove = function(value) {\n\t      return updateSet(this, this._map.remove(value));\n\t    };\n\t\n\t    Set.prototype.clear = function() {\n\t      return updateSet(this, this._map.clear());\n\t    };\n\t\n\t    // @pragma Composition\n\t\n\t    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n\t      iters = iters.filter(function(x ) {return x.size !== 0});\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n\t        return this.constructor(iters[0]);\n\t      }\n\t      return this.withMutations(function(set ) {\n\t        for (var ii = 0; ii < iters.length; ii++) {\n\t          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n\t        }\n\t      });\n\t    };\n\t\n\t    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n\t      if (iters.length === 0) {\n\t        return this;\n\t      }\n\t      iters = iters.map(function(iter ) {return SetIterable(iter)});\n\t      var originalSet = this;\n\t      return this.withMutations(function(set ) {\n\t        originalSet.forEach(function(value ) {\n\t          if (iters.some(function(iter ) {return iter.includes(value)})) {\n\t            set.remove(value);\n\t          }\n\t        });\n\t      });\n\t    };\n\t\n\t    Set.prototype.merge = function() {\n\t      return this.union.apply(this, arguments);\n\t    };\n\t\n\t    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n\t      return this.union.apply(this, iters);\n\t    };\n\t\n\t    Set.prototype.sort = function(comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator));\n\t    };\n\t\n\t    Set.prototype.sortBy = function(mapper, comparator) {\n\t      // Late binding\n\t      return OrderedSet(sortFactory(this, comparator, mapper));\n\t    };\n\t\n\t    Set.prototype.wasAltered = function() {\n\t      return this._map.wasAltered();\n\t    };\n\t\n\t    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n\t      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n\t    };\n\t\n\t    Set.prototype.__iterator = function(type, reverse) {\n\t      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n\t    };\n\t\n\t    Set.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      var newMap = this._map.__ensureOwner(ownerID);\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this._map = newMap;\n\t        return this;\n\t      }\n\t      return this.__make(newMap, ownerID);\n\t    };\n\t\n\t\n\t  function isSet(maybeSet) {\n\t    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n\t  }\n\t\n\t  Set.isSet = isSet;\n\t\n\t  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\t\n\t  var SetPrototype = Set.prototype;\n\t  SetPrototype[IS_SET_SENTINEL] = true;\n\t  SetPrototype[DELETE] = SetPrototype.remove;\n\t  SetPrototype.mergeDeep = SetPrototype.merge;\n\t  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n\t  SetPrototype.withMutations = MapPrototype.withMutations;\n\t  SetPrototype.asMutable = MapPrototype.asMutable;\n\t  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\t\n\t  SetPrototype.__empty = emptySet;\n\t  SetPrototype.__make = makeSet;\n\t\n\t  function updateSet(set, newMap) {\n\t    if (set.__ownerID) {\n\t      set.size = newMap.size;\n\t      set._map = newMap;\n\t      return set;\n\t    }\n\t    return newMap === set._map ? set :\n\t      newMap.size === 0 ? set.__empty() :\n\t      set.__make(newMap);\n\t  }\n\t\n\t  function makeSet(map, ownerID) {\n\t    var set = Object.create(SetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_SET;\n\t  function emptySet() {\n\t    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n\t  }\n\t\n\t  createClass(OrderedSet, Set);\n\t\n\t    // @pragma Construction\n\t\n\t    function OrderedSet(value) {\n\t      return value === null || value === undefined ? emptyOrderedSet() :\n\t        isOrderedSet(value) ? value :\n\t        emptyOrderedSet().withMutations(function(set ) {\n\t          var iter = SetIterable(value);\n\t          assertNotInfinite(iter.size);\n\t          iter.forEach(function(v ) {return set.add(v)});\n\t        });\n\t    }\n\t\n\t    OrderedSet.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    OrderedSet.fromKeys = function(value) {\n\t      return this(KeyedIterable(value).keySeq());\n\t    };\n\t\n\t    OrderedSet.prototype.toString = function() {\n\t      return this.__toString('OrderedSet {', '}');\n\t    };\n\t\n\t\n\t  function isOrderedSet(maybeOrderedSet) {\n\t    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n\t  }\n\t\n\t  OrderedSet.isOrderedSet = isOrderedSet;\n\t\n\t  var OrderedSetPrototype = OrderedSet.prototype;\n\t  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t  OrderedSetPrototype.__empty = emptyOrderedSet;\n\t  OrderedSetPrototype.__make = makeOrderedSet;\n\t\n\t  function makeOrderedSet(map, ownerID) {\n\t    var set = Object.create(OrderedSetPrototype);\n\t    set.size = map ? map.size : 0;\n\t    set._map = map;\n\t    set.__ownerID = ownerID;\n\t    return set;\n\t  }\n\t\n\t  var EMPTY_ORDERED_SET;\n\t  function emptyOrderedSet() {\n\t    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n\t  }\n\t\n\t  createClass(Stack, IndexedCollection);\n\t\n\t    // @pragma Construction\n\t\n\t    function Stack(value) {\n\t      return value === null || value === undefined ? emptyStack() :\n\t        isStack(value) ? value :\n\t        emptyStack().unshiftAll(value);\n\t    }\n\t\n\t    Stack.of = function(/*...values*/) {\n\t      return this(arguments);\n\t    };\n\t\n\t    Stack.prototype.toString = function() {\n\t      return this.__toString('Stack [', ']');\n\t    };\n\t\n\t    // @pragma Access\n\t\n\t    Stack.prototype.get = function(index, notSetValue) {\n\t      var head = this._head;\n\t      index = wrapIndex(this, index);\n\t      while (head && index--) {\n\t        head = head.next;\n\t      }\n\t      return head ? head.value : notSetValue;\n\t    };\n\t\n\t    Stack.prototype.peek = function() {\n\t      return this._head && this._head.value;\n\t    };\n\t\n\t    // @pragma Modification\n\t\n\t    Stack.prototype.push = function(/*...values*/) {\n\t      if (arguments.length === 0) {\n\t        return this;\n\t      }\n\t      var newSize = this.size + arguments.length;\n\t      var head = this._head;\n\t      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n\t        head = {\n\t          value: arguments[ii],\n\t          next: head\n\t        };\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pushAll = function(iter) {\n\t      iter = IndexedIterable(iter);\n\t      if (iter.size === 0) {\n\t        return this;\n\t      }\n\t      assertNotInfinite(iter.size);\n\t      var newSize = this.size;\n\t      var head = this._head;\n\t      iter.reverse().forEach(function(value ) {\n\t        newSize++;\n\t        head = {\n\t          value: value,\n\t          next: head\n\t        };\n\t      });\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    Stack.prototype.pop = function() {\n\t      return this.slice(1);\n\t    };\n\t\n\t    Stack.prototype.unshift = function(/*...values*/) {\n\t      return this.push.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.unshiftAll = function(iter) {\n\t      return this.pushAll(iter);\n\t    };\n\t\n\t    Stack.prototype.shift = function() {\n\t      return this.pop.apply(this, arguments);\n\t    };\n\t\n\t    Stack.prototype.clear = function() {\n\t      if (this.size === 0) {\n\t        return this;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = 0;\n\t        this._head = undefined;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return emptyStack();\n\t    };\n\t\n\t    Stack.prototype.slice = function(begin, end) {\n\t      if (wholeSlice(begin, end, this.size)) {\n\t        return this;\n\t      }\n\t      var resolvedBegin = resolveBegin(begin, this.size);\n\t      var resolvedEnd = resolveEnd(end, this.size);\n\t      if (resolvedEnd !== this.size) {\n\t        // super.slice(begin, end);\n\t        return IndexedCollection.prototype.slice.call(this, begin, end);\n\t      }\n\t      var newSize = this.size - resolvedBegin;\n\t      var head = this._head;\n\t      while (resolvedBegin--) {\n\t        head = head.next;\n\t      }\n\t      if (this.__ownerID) {\n\t        this.size = newSize;\n\t        this._head = head;\n\t        this.__hash = undefined;\n\t        this.__altered = true;\n\t        return this;\n\t      }\n\t      return makeStack(newSize, head);\n\t    };\n\t\n\t    // @pragma Mutability\n\t\n\t    Stack.prototype.__ensureOwner = function(ownerID) {\n\t      if (ownerID === this.__ownerID) {\n\t        return this;\n\t      }\n\t      if (!ownerID) {\n\t        this.__ownerID = ownerID;\n\t        this.__altered = false;\n\t        return this;\n\t      }\n\t      return makeStack(this.size, this._head, ownerID, this.__hash);\n\t    };\n\t\n\t    // @pragma Iteration\n\t\n\t    Stack.prototype.__iterate = function(fn, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterate(fn);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      while (node) {\n\t        if (fn(node.value, iterations++, this) === false) {\n\t          break;\n\t        }\n\t        node = node.next;\n\t      }\n\t      return iterations;\n\t    };\n\t\n\t    Stack.prototype.__iterator = function(type, reverse) {\n\t      if (reverse) {\n\t        return this.reverse().__iterator(type);\n\t      }\n\t      var iterations = 0;\n\t      var node = this._head;\n\t      return new Iterator(function()  {\n\t        if (node) {\n\t          var value = node.value;\n\t          node = node.next;\n\t          return iteratorValue(type, iterations++, value);\n\t        }\n\t        return iteratorDone();\n\t      });\n\t    };\n\t\n\t\n\t  function isStack(maybeStack) {\n\t    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n\t  }\n\t\n\t  Stack.isStack = isStack;\n\t\n\t  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\t\n\t  var StackPrototype = Stack.prototype;\n\t  StackPrototype[IS_STACK_SENTINEL] = true;\n\t  StackPrototype.withMutations = MapPrototype.withMutations;\n\t  StackPrototype.asMutable = MapPrototype.asMutable;\n\t  StackPrototype.asImmutable = MapPrototype.asImmutable;\n\t  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\t\n\t\n\t  function makeStack(size, head, ownerID, hash) {\n\t    var map = Object.create(StackPrototype);\n\t    map.size = size;\n\t    map._head = head;\n\t    map.__ownerID = ownerID;\n\t    map.__hash = hash;\n\t    map.__altered = false;\n\t    return map;\n\t  }\n\t\n\t  var EMPTY_STACK;\n\t  function emptyStack() {\n\t    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n\t  }\n\t\n\t  /**\n\t   * Contributes additional methods to a constructor\n\t   */\n\t  function mixin(ctor, methods) {\n\t    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n\t    Object.keys(methods).forEach(keyCopier);\n\t    Object.getOwnPropertySymbols &&\n\t      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n\t    return ctor;\n\t  }\n\t\n\t  Iterable.Iterator = Iterator;\n\t\n\t  mixin(Iterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toArray: function() {\n\t      assertNotInfinite(this.size);\n\t      var array = new Array(this.size || 0);\n\t      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n\t      return array;\n\t    },\n\t\n\t    toIndexedSeq: function() {\n\t      return new ToIndexedSequence(this);\n\t    },\n\t\n\t    toJS: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toJSON: function() {\n\t      return this.toSeq().map(\n\t        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n\t      ).__toJS();\n\t    },\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, true);\n\t    },\n\t\n\t    toMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Map(this.toKeyedSeq());\n\t    },\n\t\n\t    toObject: function() {\n\t      assertNotInfinite(this.size);\n\t      var object = {};\n\t      this.__iterate(function(v, k)  { object[k] = v; });\n\t      return object;\n\t    },\n\t\n\t    toOrderedMap: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedMap(this.toKeyedSeq());\n\t    },\n\t\n\t    toOrderedSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSet: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Set(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toSetSeq: function() {\n\t      return new ToSetSequence(this);\n\t    },\n\t\n\t    toSeq: function() {\n\t      return isIndexed(this) ? this.toIndexedSeq() :\n\t        isKeyed(this) ? this.toKeyedSeq() :\n\t        this.toSetSeq();\n\t    },\n\t\n\t    toStack: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return Stack(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t    toList: function() {\n\t      // Use Late Binding here to solve the circular dependency.\n\t      return List(isKeyed(this) ? this.valueSeq() : this);\n\t    },\n\t\n\t\n\t    // ### Common JavaScript methods and properties\n\t\n\t    toString: function() {\n\t      return '[Iterable]';\n\t    },\n\t\n\t    __toString: function(head, tail) {\n\t      if (this.size === 0) {\n\t        return head + tail;\n\t      }\n\t      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    concat: function() {var values = SLICE$0.call(arguments, 0);\n\t      return reify(this, concatFactory(this, values));\n\t    },\n\t\n\t    includes: function(searchValue) {\n\t      return this.some(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    entries: function() {\n\t      return this.__iterator(ITERATE_ENTRIES);\n\t    },\n\t\n\t    every: function(predicate, context) {\n\t      assertNotInfinite(this.size);\n\t      var returnValue = true;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (!predicate.call(context, v, k, c)) {\n\t          returnValue = false;\n\t          return false;\n\t        }\n\t      });\n\t      return returnValue;\n\t    },\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, true));\n\t    },\n\t\n\t    find: function(predicate, context, notSetValue) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[1] : notSetValue;\n\t    },\n\t\n\t    forEach: function(sideEffect, context) {\n\t      assertNotInfinite(this.size);\n\t      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n\t    },\n\t\n\t    join: function(separator) {\n\t      assertNotInfinite(this.size);\n\t      separator = separator !== undefined ? '' + separator : ',';\n\t      var joined = '';\n\t      var isFirst = true;\n\t      this.__iterate(function(v ) {\n\t        isFirst ? (isFirst = false) : (joined += separator);\n\t        joined += v !== null && v !== undefined ? v.toString() : '';\n\t      });\n\t      return joined;\n\t    },\n\t\n\t    keys: function() {\n\t      return this.__iterator(ITERATE_KEYS);\n\t    },\n\t\n\t    map: function(mapper, context) {\n\t      return reify(this, mapFactory(this, mapper, context));\n\t    },\n\t\n\t    reduce: function(reducer, initialReduction, context) {\n\t      assertNotInfinite(this.size);\n\t      var reduction;\n\t      var useFirst;\n\t      if (arguments.length < 2) {\n\t        useFirst = true;\n\t      } else {\n\t        reduction = initialReduction;\n\t      }\n\t      this.__iterate(function(v, k, c)  {\n\t        if (useFirst) {\n\t          useFirst = false;\n\t          reduction = v;\n\t        } else {\n\t          reduction = reducer.call(context, reduction, v, k, c);\n\t        }\n\t      });\n\t      return reduction;\n\t    },\n\t\n\t    reduceRight: function(reducer, initialReduction, context) {\n\t      var reversed = this.toKeyedSeq().reverse();\n\t      return reversed.reduce.apply(reversed, arguments);\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, true));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, true));\n\t    },\n\t\n\t    some: function(predicate, context) {\n\t      return !this.every(not(predicate), context);\n\t    },\n\t\n\t    sort: function(comparator) {\n\t      return reify(this, sortFactory(this, comparator));\n\t    },\n\t\n\t    values: function() {\n\t      return this.__iterator(ITERATE_VALUES);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    butLast: function() {\n\t      return this.slice(0, -1);\n\t    },\n\t\n\t    isEmpty: function() {\n\t      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n\t    },\n\t\n\t    count: function(predicate, context) {\n\t      return ensureSize(\n\t        predicate ? this.toSeq().filter(predicate, context) : this\n\t      );\n\t    },\n\t\n\t    countBy: function(grouper, context) {\n\t      return countByFactory(this, grouper, context);\n\t    },\n\t\n\t    equals: function(other) {\n\t      return deepEqual(this, other);\n\t    },\n\t\n\t    entrySeq: function() {\n\t      var iterable = this;\n\t      if (iterable._cache) {\n\t        // We cache as an entries array, so we can just return the cache!\n\t        return new ArraySeq(iterable._cache);\n\t      }\n\t      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n\t      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n\t      return entriesSequence;\n\t    },\n\t\n\t    filterNot: function(predicate, context) {\n\t      return this.filter(not(predicate), context);\n\t    },\n\t\n\t    findEntry: function(predicate, context, notSetValue) {\n\t      var found = notSetValue;\n\t      this.__iterate(function(v, k, c)  {\n\t        if (predicate.call(context, v, k, c)) {\n\t          found = [k, v];\n\t          return false;\n\t        }\n\t      });\n\t      return found;\n\t    },\n\t\n\t    findKey: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry && entry[0];\n\t    },\n\t\n\t    findLast: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastEntry: function(predicate, context, notSetValue) {\n\t      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n\t    },\n\t\n\t    findLastKey: function(predicate, context) {\n\t      return this.toKeyedSeq().reverse().findKey(predicate, context);\n\t    },\n\t\n\t    first: function() {\n\t      return this.find(returnTrue);\n\t    },\n\t\n\t    flatMap: function(mapper, context) {\n\t      return reify(this, flatMapFactory(this, mapper, context));\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, true));\n\t    },\n\t\n\t    fromEntrySeq: function() {\n\t      return new FromEntriesSequence(this);\n\t    },\n\t\n\t    get: function(searchKey, notSetValue) {\n\t      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n\t    },\n\t\n\t    getIn: function(searchKeyPath, notSetValue) {\n\t      var nested = this;\n\t      // Note: in an ES6 environment, we would prefer:\n\t      // for (var key of searchKeyPath) {\n\t      var iter = forceIterator(searchKeyPath);\n\t      var step;\n\t      while (!(step = iter.next()).done) {\n\t        var key = step.value;\n\t        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n\t        if (nested === NOT_SET) {\n\t          return notSetValue;\n\t        }\n\t      }\n\t      return nested;\n\t    },\n\t\n\t    groupBy: function(grouper, context) {\n\t      return groupByFactory(this, grouper, context);\n\t    },\n\t\n\t    has: function(searchKey) {\n\t      return this.get(searchKey, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    hasIn: function(searchKeyPath) {\n\t      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n\t    },\n\t\n\t    isSubset: function(iter) {\n\t      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n\t      return this.every(function(value ) {return iter.includes(value)});\n\t    },\n\t\n\t    isSuperset: function(iter) {\n\t      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n\t      return iter.isSubset(this);\n\t    },\n\t\n\t    keyOf: function(searchValue) {\n\t      return this.findKey(function(value ) {return is(value, searchValue)});\n\t    },\n\t\n\t    keySeq: function() {\n\t      return this.toSeq().map(keyMapper).toIndexedSeq();\n\t    },\n\t\n\t    last: function() {\n\t      return this.toSeq().reverse().first();\n\t    },\n\t\n\t    lastKeyOf: function(searchValue) {\n\t      return this.toKeyedSeq().reverse().keyOf(searchValue);\n\t    },\n\t\n\t    max: function(comparator) {\n\t      return maxFactory(this, comparator);\n\t    },\n\t\n\t    maxBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator, mapper);\n\t    },\n\t\n\t    min: function(comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n\t    },\n\t\n\t    minBy: function(mapper, comparator) {\n\t      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n\t    },\n\t\n\t    rest: function() {\n\t      return this.slice(1);\n\t    },\n\t\n\t    skip: function(amount) {\n\t      return this.slice(Math.max(0, amount));\n\t    },\n\t\n\t    skipLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, true));\n\t    },\n\t\n\t    skipUntil: function(predicate, context) {\n\t      return this.skipWhile(not(predicate), context);\n\t    },\n\t\n\t    sortBy: function(mapper, comparator) {\n\t      return reify(this, sortFactory(this, comparator, mapper));\n\t    },\n\t\n\t    take: function(amount) {\n\t      return this.slice(0, Math.max(0, amount));\n\t    },\n\t\n\t    takeLast: function(amount) {\n\t      return reify(this, this.toSeq().reverse().take(amount).reverse());\n\t    },\n\t\n\t    takeWhile: function(predicate, context) {\n\t      return reify(this, takeWhileFactory(this, predicate, context));\n\t    },\n\t\n\t    takeUntil: function(predicate, context) {\n\t      return this.takeWhile(not(predicate), context);\n\t    },\n\t\n\t    valueSeq: function() {\n\t      return this.toIndexedSeq();\n\t    },\n\t\n\t\n\t    // ### Hashable Object\n\t\n\t    hashCode: function() {\n\t      return this.__hash || (this.__hash = hashIterable(this));\n\t    }\n\t\n\t\n\t    // ### Internal\n\t\n\t    // abstract __iterate(fn, reverse)\n\t\n\t    // abstract __iterator(type, reverse)\n\t  });\n\t\n\t  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n\t  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n\t  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n\t  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\t\n\t  var IterablePrototype = Iterable.prototype;\n\t  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n\t  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n\t  IterablePrototype.__toJS = IterablePrototype.toArray;\n\t  IterablePrototype.__toStringMapper = quoteString;\n\t  IterablePrototype.inspect =\n\t  IterablePrototype.toSource = function() { return this.toString(); };\n\t  IterablePrototype.chain = IterablePrototype.flatMap;\n\t  IterablePrototype.contains = IterablePrototype.includes;\n\t\n\t  mixin(KeyedIterable, {\n\t\n\t    // ### More sequential methods\n\t\n\t    flip: function() {\n\t      return reify(this, flipFactory(this));\n\t    },\n\t\n\t    mapEntries: function(mapper, context) {var this$0 = this;\n\t      var iterations = 0;\n\t      return reify(this,\n\t        this.toSeq().map(\n\t          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n\t        ).fromEntrySeq()\n\t      );\n\t    },\n\t\n\t    mapKeys: function(mapper, context) {var this$0 = this;\n\t      return reify(this,\n\t        this.toSeq().flip().map(\n\t          function(k, v)  {return mapper.call(context, k, v, this$0)}\n\t        ).flip()\n\t      );\n\t    }\n\t\n\t  });\n\t\n\t  var KeyedIterablePrototype = KeyedIterable.prototype;\n\t  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n\t  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n\t  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n\t  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\t\n\t\n\t\n\t  mixin(IndexedIterable, {\n\t\n\t    // ### Conversion to other types\n\t\n\t    toKeyedSeq: function() {\n\t      return new ToKeyedSequence(this, false);\n\t    },\n\t\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    filter: function(predicate, context) {\n\t      return reify(this, filterFactory(this, predicate, context, false));\n\t    },\n\t\n\t    findIndex: function(predicate, context) {\n\t      var entry = this.findEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    indexOf: function(searchValue) {\n\t      var key = this.keyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    lastIndexOf: function(searchValue) {\n\t      var key = this.lastKeyOf(searchValue);\n\t      return key === undefined ? -1 : key;\n\t    },\n\t\n\t    reverse: function() {\n\t      return reify(this, reverseFactory(this, false));\n\t    },\n\t\n\t    slice: function(begin, end) {\n\t      return reify(this, sliceFactory(this, begin, end, false));\n\t    },\n\t\n\t    splice: function(index, removeNum /*, ...values*/) {\n\t      var numArgs = arguments.length;\n\t      removeNum = Math.max(removeNum | 0, 0);\n\t      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n\t        return this;\n\t      }\n\t      // If index is negative, it should resolve relative to the size of the\n\t      // collection. However size may be expensive to compute if not cached, so\n\t      // only call count() if the number is in fact negative.\n\t      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n\t      var spliced = this.slice(0, index);\n\t      return reify(\n\t        this,\n\t        numArgs === 1 ?\n\t          spliced :\n\t          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n\t      );\n\t    },\n\t\n\t\n\t    // ### More collection methods\n\t\n\t    findLastIndex: function(predicate, context) {\n\t      var entry = this.findLastEntry(predicate, context);\n\t      return entry ? entry[0] : -1;\n\t    },\n\t\n\t    first: function() {\n\t      return this.get(0);\n\t    },\n\t\n\t    flatten: function(depth) {\n\t      return reify(this, flattenFactory(this, depth, false));\n\t    },\n\t\n\t    get: function(index, notSetValue) {\n\t      index = wrapIndex(this, index);\n\t      return (index < 0 || (this.size === Infinity ||\n\t          (this.size !== undefined && index > this.size))) ?\n\t        notSetValue :\n\t        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n\t    },\n\t\n\t    has: function(index) {\n\t      index = wrapIndex(this, index);\n\t      return index >= 0 && (this.size !== undefined ?\n\t        this.size === Infinity || index < this.size :\n\t        this.indexOf(index) !== -1\n\t      );\n\t    },\n\t\n\t    interpose: function(separator) {\n\t      return reify(this, interposeFactory(this, separator));\n\t    },\n\t\n\t    interleave: function(/*...iterables*/) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n\t      var interleaved = zipped.flatten(true);\n\t      if (zipped.size) {\n\t        interleaved.size = zipped.size * iterables.length;\n\t      }\n\t      return reify(this, interleaved);\n\t    },\n\t\n\t    keySeq: function() {\n\t      return Range(0, this.size);\n\t    },\n\t\n\t    last: function() {\n\t      return this.get(-1);\n\t    },\n\t\n\t    skipWhile: function(predicate, context) {\n\t      return reify(this, skipWhileFactory(this, predicate, context, false));\n\t    },\n\t\n\t    zip: function(/*, ...iterables */) {\n\t      var iterables = [this].concat(arrCopy(arguments));\n\t      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n\t    },\n\t\n\t    zipWith: function(zipper/*, ...iterables */) {\n\t      var iterables = arrCopy(arguments);\n\t      iterables[0] = this;\n\t      return reify(this, zipWithFactory(this, zipper, iterables));\n\t    }\n\t\n\t  });\n\t\n\t  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n\t  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\t\n\t\n\t\n\t  mixin(SetIterable, {\n\t\n\t    // ### ES6 Collection methods (ES6 Array and Map)\n\t\n\t    get: function(value, notSetValue) {\n\t      return this.has(value) ? value : notSetValue;\n\t    },\n\t\n\t    includes: function(value) {\n\t      return this.has(value);\n\t    },\n\t\n\t\n\t    // ### More sequential methods\n\t\n\t    keySeq: function() {\n\t      return this.valueSeq();\n\t    }\n\t\n\t  });\n\t\n\t  SetIterable.prototype.has = IterablePrototype.includes;\n\t  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\t\n\t\n\t  // Mixin subclasses\n\t\n\t  mixin(KeyedSeq, KeyedIterable.prototype);\n\t  mixin(IndexedSeq, IndexedIterable.prototype);\n\t  mixin(SetSeq, SetIterable.prototype);\n\t\n\t  mixin(KeyedCollection, KeyedIterable.prototype);\n\t  mixin(IndexedCollection, IndexedIterable.prototype);\n\t  mixin(SetCollection, SetIterable.prototype);\n\t\n\t\n\t  // #pragma Helper functions\n\t\n\t  function keyMapper(v, k) {\n\t    return k;\n\t  }\n\t\n\t  function entryMapper(v, k) {\n\t    return [k, v];\n\t  }\n\t\n\t  function not(predicate) {\n\t    return function() {\n\t      return !predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function neg(predicate) {\n\t    return function() {\n\t      return -predicate.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  function quoteString(value) {\n\t    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n\t  }\n\t\n\t  function defaultZipper() {\n\t    return arrCopy(arguments);\n\t  }\n\t\n\t  function defaultNegComparator(a, b) {\n\t    return a < b ? 1 : a > b ? -1 : 0;\n\t  }\n\t\n\t  function hashIterable(iterable) {\n\t    if (iterable.size === Infinity) {\n\t      return 0;\n\t    }\n\t    var ordered = isOrdered(iterable);\n\t    var keyed = isKeyed(iterable);\n\t    var h = ordered ? 1 : 0;\n\t    var size = iterable.__iterate(\n\t      keyed ?\n\t        ordered ?\n\t          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n\t          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n\t        ordered ?\n\t          function(v ) { h = 31 * h + hash(v) | 0; } :\n\t          function(v ) { h = h + hash(v) | 0; }\n\t    );\n\t    return murmurHashOfSize(size, h);\n\t  }\n\t\n\t  function murmurHashOfSize(size, h) {\n\t    h = imul(h, 0xCC9E2D51);\n\t    h = imul(h << 15 | h >>> -15, 0x1B873593);\n\t    h = imul(h << 13 | h >>> -13, 5);\n\t    h = (h + 0xE6546B64 | 0) ^ size;\n\t    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n\t    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n\t    h = smi(h ^ h >>> 16);\n\t    return h;\n\t  }\n\t\n\t  function hashMerge(a, b) {\n\t    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n\t  }\n\t\n\t  var Immutable = {\n\t\n\t    Iterable: Iterable,\n\t\n\t    Seq: Seq,\n\t    Collection: Collection,\n\t    Map: Map,\n\t    OrderedMap: OrderedMap,\n\t    List: List,\n\t    Stack: Stack,\n\t    Set: Set,\n\t    OrderedSet: OrderedSet,\n\t\n\t    Record: Record,\n\t    Range: Range,\n\t    Repeat: Repeat,\n\t\n\t    is: is,\n\t    fromJS: fromJS\n\t\n\t  };\n\t\n\t  return Immutable;\n\t\n\t}));\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// marbles.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 402d2fbbca21ddd28356","import * as util from './util';\nimport * as logic from './logic';\nimport { List } from 'immutable';\n// core premise: route is a linked list which obeys the rules specified in the\n// initial configuration\n\n// with that in mind, what should the api be?\n\n/*\nconstructor :: SegmentConfig -> Options -> Router\nactivate :: SegmentId -> Data -> Null\ndeactivate :: SegmentId -> Null\nsubscribe({\n  'home': {\n    activated: f,\n    deactivated: f\n  }\n})\nupdateRoute :: String\nstart()\nstop()\n*/\n\n/*\nconfig = {\n  segmentId: {\n    fragment: string,\n    rule: Function(callback, segmentId, linkedList),\n    tokens: {\n      key: regex\n    }\n  }\n}\n*/\nconst TOKEN_REGEX = /{([^}]+)}/g;\nconst DIGIT_REGEX = /\\d+/;\n\nfunction rootSegment() {\n  return {\n    id: 'root',\n    fragment: '',\n    tokens: {},\n    tokenData: {},\n    rule: () => true\n  };\n}\n\nfunction listWithRoot() {\n  return List([rootSegment()]);\n}\n\nfunction setTokenData(segment, data) {\n  return util.assign({}, segment, {\n    tokenData: util.isObject(data) ? data : {}\n  });\n}\n\nfunction stripOuterBraces(dynamicToken) {\n  return dynamicToken.substr(1, dynamicToken.length - 2);\n}\n\nfunction arraySwap(i, j, array) {\n  const tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\n}\n\n// TODO: memoize\nfunction regexify(seg) {\n  const newSegment = seg.fragment.replace(TOKEN_REGEX, (token) => {\n    const tokenName = stripOuterBraces(token);\n    const regex = seg.tokens[tokenName];\n    if (!regex) {\n      throw new Error(`\n        The '${seg.id}' segment is missing a regex for its '${token}' dynamic token. \n\n        Please add a '${tokenName}' property with a RegExp value to that segment's 'tokens' config.\n\n        In general, every segment with dynamic tokens requires a \n        'token' config with a regex for every dynamic token in that segment.\n      `);\n    }\n    return regex.source;\n  });\n  return new RegExp(`${newSegment}`);\n}\n\nfunction segmentMatch(string, segment) {\n  return string.match(regexify(segment)) || [];\n}\n\nfunction extractData(string, segment) {\n  const tokens = segment.tokens;\n  let searchString = string;\n  const tokenKeys = (segment.fragment.match(TOKEN_REGEX) || []).map(stripOuterBraces);\n  const tokenData = tokenKeys.reduce((data, tokenName) => {\n    const matches = searchString.match(tokens[tokenName]);\n    const match = util.arrayHead(matches);\n    searchString = string.substr(matches.index + match.length);\n    data[tokenName] = match;\n    return data;\n  }, {});\n  return tokenData;\n}\n\nfunction matchingSegments(route, segments) {\n  return util.keys(segments).reduce((arr, key) => {\n    const seg = segments[key];\n    const matches = segmentMatch(route, segments[key]);\n    const segmentsWithData = matches.map((str) => {\n      return setTokenData(seg, extractData(str, seg));\n    });\n    return arr.concat(segmentsWithData);\n  }, []);\n}\n\n// TODO: memoize\nfunction routeToList(route, segments) {\n  if (!segments.root) {\n    return null;\n  }\n  const matchingSegs = matchingSegments(route, segments);\n  const matchCount = matchingSegs.length;\n  let leftWall = 0;\n  let newList = List();\n  let added = true;\n  while (leftWall < matchCount && added) {\n    added = false;\n    for (let i = leftWall; i < matchCount; i++) {\n      const node = matchingSegs[i];\n      const listWithNode = newList.push(node);\n      if (node.rule(node.id, listWithNode)) {\n        newList = listWithNode;\n        arraySwap(i, leftWall, matchingSegs);\n        added = true;\n        leftWall += 1;\n        break;\n      }\n    }\n  }\n  return newList;\n}\n\nfunction replaceTokens(string, data) {\n  return string.replace(TOKEN_REGEX, (match) => data[stripOuterBraces(match)]);\n}\n\n// TODO: memoize\nfunction listToRoute(list, leadingSlash, trailingSlash) {\n  const fragments = list.map((node) => {\n    return replaceTokens(node.fragment, node.tokenData);\n  }).filter((frag) => frag !== '');\n  const hash = fragments.join('/');\n  return hash ? `${leadingSlash ? '/' : ''}${hash}${trailingSlash ? '/' : ''}` : hash;\n}\n\nfunction chainData(list, upToNode) {\n  const data = util.emptyObject();\n  const stopIndex = list.lastIndexOf(upToNode);\n  return list.reduce((chainedData, node, index) => {\n    if (stopIndex !== -1 && index > stopIndex) {\n      return chainedData;\n    }\n    return util.assign(chainedData, node.tokenData);\n  }, data);\n}\n\nfunction listDiff(from, against, diffData) {\n  return from.reduce((newList, node) => {\n    const found = against.find(({ id }) => id === node.id);\n    if (!found || diffData && !util.equal(found.tokenData, node.tokenData)) {\n      return newList.push(node);\n    }\n    return newList;\n  }, List());\n}\n\nfunction handleActivations(newList, oldList, subscribers) {\n  const activated = listDiff(newList, oldList, true);\n  activated.forEach((listNode) => {\n    subscribers[listNode.id].activated.forEach((handler) => {\n      setTimeout(() => {\n        handler(chainData(newList, listNode));\n      }, 0);\n    });\n  });\n}\n\nfunction handleDeactivations(newList, oldList, subscribers) {\n  const deactivated = listDiff(oldList, newList, false);\n  deactivated.forEach((listNode) => {\n    subscribers[listNode.id].deactivated.forEach((handler) => {\n      setTimeout(() => handler(), 0);\n    });\n  });\n}\n\nfunction isValidSegment(seg) {\n  return util.isObject(seg)\n    && util.isString(seg.fragment)\n    && util.isFunction(seg.rule)\n    && (\n      typeof seg.tokens === 'undefined' ||\n      util.isObject(seg.tokens)\n    );\n}\n\nfunction isValidConfig(conf) {\n  return util.isObject(conf)\n    && util.keys(conf).reduce((b, segId) => isValidSegment(conf[segId]), true);\n}\n\nfunction assertOptionsOk(options) {\n  if (options && !util.isObject(options)) {\n    throw new Error('Invalid options. Please read the docs for details.');\n  }\n}\n\nfunction assertSegmentConfigOk(segmentConfig) {\n  if (!isValidConfig(segmentConfig)) {\n    throw new Error(\n      `\n        Invalid segment configuration.\n        Please read the docs for details on proper segment configuration.\n        `\n    );\n  }\n}\n\nfunction normalizeSegment(id, segment) {\n  return util.assign(\n    {\n      id,\n      tokens: {},\n      tokenData: {}\n    },\n    segment\n  );\n}\n\nfunction normalizeSegments(segmentConfig) {\n  return util.keys(segmentConfig).reduce((norm, id) => {\n    norm[id] = normalizeSegment(id, segmentConfig[id]);\n    return norm;\n  }, {});\n}\n\nfunction assertValidListenerObject(listener) {\n  if (\n    !util.isObject(listener) ||\n    (\n      (typeof listener.activated !== 'undefined' &&\n      !util.isFunction(listener.activated)) ||\n      (typeof listener.deactivated !== 'undefined' &&\n      !util.isFunction(listener.deactivated))\n    )\n  ) {\n    throw new Error(`\n      Invalid ListenerObject. ListenerObjects must conform to the following interface: \n      {\n        activated?: (data: Object): void,\n        deactivated?: (): void \n      }\n    `);\n  }\n}\n\nfunction assertValidSubscription(subscription) {\n  if (!util.isObject(subscription)) {\n    throw new Error(`\n      Invalid Subscription. Subscriptions must conform to the following interface:\n      {\n        [segmentId: string]: ListenerObject\n      }\n    `);\n  }\n  util.keys(subscription).forEach((k) => assertValidListenerObject(subscription[k]));\n}\n\nmodule.exports = class Marbles {\n  constructor(segmentConfig, options = {}, win = window) {\n    const defaultOptions = {\n      leadingSlash: true,\n      trailingSlash: true\n    };\n    const defaultSegments = {\n      root: rootSegment()\n    };\n\n    assertSegmentConfigOk(segmentConfig);\n    assertOptionsOk(options);\n    this.options = util.assign({}, defaultOptions, options);\n    this.segments = Object.freeze(\n      normalizeSegments(util.assign({}, defaultSegments, segmentConfig))\n    );\n    this.subscribers = Object.freeze(util.keys(this.segments).reduce((obj, key) => {\n      obj[key] = {\n        activated: [],\n        deactivated: []\n      };\n      return obj;\n    }, {}));\n    this.win = win;\n    this.list = listWithRoot();\n  }\n  static get logic() {\n    return logic;\n  }\n  static get Regex() {\n    return {\n      DIGITS: DIGIT_REGEX\n    };\n  }\n  static present(requiredSegmentId) {\n    return (segmentId, list) => {\n      return list.findIndex((node) => {\n        return node.id === requiredSegmentId;\n      }) !== -1;\n    };\n  }\n  static parent(parentId) {\n    return (segmentId, list) => {\n      const parentIndex = list.findLastIndex((node) => {\n        return node.id === parentId;\n      });\n      const nodeIndex = list.findLastIndex((node) => {\n        return node.id === segmentId;\n      });\n      return nodeIndex === parentIndex + 1;\n    };\n  }\n  start(win = this.win) {\n    this.processRoute(win.location.hash);\n    win.addEventListener('hashchange', () => {\n      this.processRoute(win.location.hash, true);\n    });\n  }\n  // read the given route and fire activate and deactivate accordingly\n  processRoute(hash = this.win.location.hash, replace) {\n    const route = hash.replace('#', '');\n    const list = routeToList(route, this.segments);\n    handleActivations(list, this.list, this.subscribers);\n    handleDeactivations(list, this.list, this.subscribers);\n    this.list = list;\n    const newRoute = listToRoute(\n      this.list,\n      this.options.leadingSlash,\n      this.options.trailingSlash\n    );\n    const newHash = `#${newRoute}`;\n    console.log('setting hash to ', newRoute);\n    if (replace) {\n      this.win.history.replaceState(util.emptyObject(), '', newHash);\n    } else {\n      this.win.location.hash = newHash;\n    }\n    return newRoute;\n  }\n  activate(segmentId, data) {\n    const list = this.list;\n    const seg = this.segments[segmentId];\n    const segNode = setTokenData(seg, data);\n\n    const newList = list.reduce((l, node) => {\n      const withNode = l.push(node);\n      const withSeg = withNode.push(segNode);\n      const ok = seg.rule(segmentId, withSeg);\n      return ok ? withSeg : withNode;\n    }, List());\n    const route = listToRoute(\n      newList,\n      this.options.leadingSlash,\n      this.options.trailingSlash\n    );\n    return this.processRoute(route);\n  }\n  deactivate(segmentId) {\n    const removalIndex = this.list.findLastIndex((node) => node.id === segmentId);\n    const newRoute = listToRoute(\n      this.list.delete(removalIndex),\n      this.options.leadingSlash,\n      this.options.trailingSlash\n    );\n    return this.processRoute(newRoute);\n  }\n  subscribe(subscription) {\n    assertValidSubscription(subscription);\n    const subs = this.subscribers;\n    util.keys(subscription).forEach((k) => {\n      const activators = subscription[k].activated || [];\n      const deactivators = subscription[k].deactivated || [];\n      subs[k].activated = subs[k].activated.concat(activators);\n      subs[k].deactivated = subs[k].deactivated.concat(deactivators);\n    });\n  }\n  unsubscribe(subscription) {\n    assertValidSubscription(subscription);\n    const subs = this.subscribers;\n    util.keys(subscription).forEach((k) => {\n      const activatorsToRm = subscription[k].activated || [];\n      const deactivatorsToRm = subscription[k].deactivated || [];\n      util.pull(activatorsToRm, subs[k].activated);\n      util.pull(deactivatorsToRm, subs[k].deactivated);\n    });\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/marbles.js","const deepEqual = require('deep-equal');\n\nfunction emptyObject() {\n  return Object.create(null);\n}\n\nfunction isObject(any) {\n  return typeof any === 'object' && any !== null && !(any instanceof Array);\n}\n\nfunction isArray(any) {\n  return any instanceof Array;\n}\n\nfunction isString(any) {\n  return typeof any === 'string';\n}\n\nfunction isFunction(any) {\n  return typeof any === 'function';\n}\n\nfunction keys(obj) {\n  return Object.keys(obj);\n}\n\nfunction assign(...args) {\n  return Object.assign.apply(Object, args);\n}\n\nfunction arrayHead(array) {\n  if (typeof array === 'undefined' || !(array instanceof Array)) {\n    return undefined;\n  }\n  return array[0];\n}\n\nfunction pull(values, array) {\n  return values.map((val) => {\n    let index = array.indexOf(val);\n    let results = [];\n    while (index !== -1) {\n      results = results.concat(array.splice(index, 1));\n      index = array.indexOf(val);\n    }\n    return results;\n  })\n    .reduce((returnArray, subArray) => returnArray.concat(subArray), [])\n    .reduce((returnArray, val) => {\n      if (returnArray.indexOf(val) !== -1) {\n        return returnArray;\n      }\n      return returnArray.concat(val instanceof Array ? [val] : val);\n    }, []);\n}\n\nfunction without(values, array) {\n  const newArray = array.slice();\n  pull(values, newArray);\n  return newArray;\n}\n\nfunction peek(arr) {\n  if (!arr || !(arr instanceof Array)) {\n    return null;\n  }\n  return arr[arr.length - 1] || null;\n}\n\nfunction noop() { }\n\nfunction batchAsyncActions(fns, callback) {\n  if (!isArray(fns)) {\n    throw new TypeError(\n      'batchAsyncResults() expects an array of functions as the first parameter.'\n    );\n  }\n  let resolvedCount = 0;\n  const results = [];\n  fns.forEach((fn) => {\n    fn((result) => {\n      resolvedCount += 1;\n      results.push(result);\n      if (resolvedCount === fns.length) {\n        callback(results);\n      }\n    });\n  });\n}\n\nexport {\n  deepEqual as equal,\n  emptyObject,\n  isArray,\n  isObject,\n  isFunction,\n  isString,\n  batchAsyncActions,\n  noop,\n  keys,\n  peek,\n  assign,\n  arrayHead,\n  pull,\n  without\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","import * as util from './util.js';\n\nfunction boolEval(anything, args) {\n  if (util.isFunction(anything)) {\n    return anything.apply(null, args);\n  } else {\n    return Boolean(anything);\n  }\n}\n\nfunction not(argument) {\n  return function strictNot(...extraArgs) {\n    return !boolEval(argument, extraArgs);\n  };\n}\n\nfunction or(...predicates) {\n  return function strictOr(...extraArgs) {\n    for (let i = 0; i < predicates.length; i++) {\n      if (boolEval(predicates[i], extraArgs)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nfunction and(...predicates) {\n  return function strictAnd(...extraArgs) {\n    for (let i = 0; i < predicates.length; i++) {\n      if (!boolEval(predicates[i], extraArgs)) {\n        return false;\n      }\n    }\n    return predicates.length > 0;\n  };\n}\n\nexport {\n  not,\n  or,\n  and\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/logic.js","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/index.js\n// module id = 3\n// module chunks = 0","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/lib/is_arguments.js\n// module id = 4\n// module chunks = 0","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/deep-equal/lib/keys.js\n// module id = 5\n// module chunks = 0","/**\n *  Copyright (c) 2014-2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.Immutable = factory());\n}(this, function () { 'use strict';var SLICE$0 = Array.prototype.slice;\n\n  function createClass(ctor, superClass) {\n    if (superClass) {\n      ctor.prototype = Object.create(superClass.prototype);\n    }\n    ctor.prototype.constructor = ctor;\n  }\n\n  function Iterable(value) {\n      return isIterable(value) ? value : Seq(value);\n    }\n\n\n  createClass(KeyedIterable, Iterable);\n    function KeyedIterable(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n\n  createClass(IndexedIterable, Iterable);\n    function IndexedIterable(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n\n  createClass(SetIterable, Iterable);\n    function SetIterable(value) {\n      return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n\n\n  function isIterable(maybeIterable) {\n    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);\n  }\n\n  function isKeyed(maybeKeyed) {\n    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);\n  }\n\n  function isIndexed(maybeIndexed) {\n    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  function isOrdered(maybeOrdered) {\n    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);\n  }\n\n  Iterable.isIterable = isIterable;\n  Iterable.isKeyed = isKeyed;\n  Iterable.isIndexed = isIndexed;\n  Iterable.isAssociative = isAssociative;\n  Iterable.isOrdered = isOrdered;\n\n  Iterable.Keyed = KeyedIterable;\n  Iterable.Indexed = IndexedIterable;\n  Iterable.Set = SetIterable;\n\n\n  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  var CHANGE_LENGTH = { value: false };\n  var DID_ALTER = { value: false };\n\n  function MakeRef(ref) {\n    ref.value = false;\n    return ref;\n  }\n\n  function SetRef(ref) {\n    ref && (ref.value = true);\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (begin === 0 || (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size));\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    return index === undefined ?\n      defaultIndex :\n      index < 0 ?\n        Math.max(0, size + index) :\n        size === undefined ?\n          index :\n          Math.min(size, index);\n  }\n\n  /* global Symbol */\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n\n  function Iterator(next) {\n      this.next = next;\n    }\n\n    Iterator.prototype.toString = function() {\n      return '[Iterator]';\n    };\n\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect =\n  Iterator.prototype.toSource = function () { return this.toString(); }\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult ? (iteratorResult.value = value) : (iteratorResult = {\n      value: value, done: false\n    });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn = iterable && (\n      (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n      iterable[FAUX_ITERATOR_SYMBOL]\n    );\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number';\n  }\n\n  createClass(Seq, Iterable);\n    function Seq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        isIterable(value) ? value.toSeq() : seqFromValue(value);\n    }\n\n    Seq.of = function(/*...values*/) {\n      return Seq(arguments);\n    };\n\n    Seq.prototype.toSeq = function() {\n      return this;\n    };\n\n    Seq.prototype.toString = function() {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function() {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, true);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, true);\n    };\n\n\n\n  createClass(KeyedSeq, Seq);\n    function KeyedSeq(value) {\n      return value === null || value === undefined ?\n        emptySequence().toKeyedSeq() :\n        isIterable(value) ?\n          (isKeyed(value) ? value.toSeq() : value.fromEntrySeq()) :\n          keyedSeqFromValue(value);\n    }\n\n    KeyedSeq.prototype.toKeyedSeq = function() {\n      return this;\n    };\n\n\n\n  createClass(IndexedSeq, Seq);\n    function IndexedSeq(value) {\n      return value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();\n    }\n\n    IndexedSeq.of = function(/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function() {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function() {\n      return this.__toString('Seq [', ']');\n    };\n\n    IndexedSeq.prototype.__iterate = function(fn, reverse) {\n      return seqIterate(this, fn, reverse, false);\n    };\n\n    IndexedSeq.prototype.__iterator = function(type, reverse) {\n      return seqIterator(this, type, reverse, false);\n    };\n\n\n\n  createClass(SetSeq, Seq);\n    function SetSeq(value) {\n      return (\n        value === null || value === undefined ? emptySequence() :\n        !isIterable(value) ? indexedSeqFromValue(value) :\n        isKeyed(value) ? value.entrySeq() : value\n      ).toSetSeq();\n    }\n\n    SetSeq.of = function(/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function() {\n      return this;\n    };\n\n\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\n\n  Seq.prototype[IS_SEQ_SENTINEL] = true;\n\n\n\n  createClass(ArraySeq, IndexedSeq);\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    ArraySeq.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function(fn, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ArraySeq.prototype.__iterator = function(type, reverse) {\n      var array = this._array;\n      var maxIndex = array.length - 1;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++])}\n      );\n    };\n\n\n\n  createClass(ObjectSeq, KeyedSeq);\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    ObjectSeq.prototype.get = function(key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function(key) {\n      return this._object.hasOwnProperty(key);\n    };\n\n    ObjectSeq.prototype.__iterate = function(fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        if (fn(object[key], key, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    ObjectSeq.prototype.__iterator = function(type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var maxIndex = keys.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var key = keys[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, key, object[key]);\n      });\n    };\n\n  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(IterableSeq, IndexedSeq);\n    function IterableSeq(iterable) {\n      this._iterable = iterable;\n      this.size = iterable.length || iterable.size;\n    }\n\n    IterableSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    IterableSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterable = this._iterable;\n      var iterator = getIterator(iterable);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n\n\n  createClass(IteratorSeq, IndexedSeq);\n    function IteratorSeq(iterator) {\n      this._iterator = iterator;\n      this._iteratorCache = [];\n    }\n\n    IteratorSeq.prototype.__iterateUncached = function(fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      while (iterations < cache.length) {\n        if (fn(cache[iterations], iterations++, this) === false) {\n          return iterations;\n        }\n      }\n      var step;\n      while (!(step = iterator.next()).done) {\n        var val = step.value;\n        cache[iterations] = val;\n        if (fn(val, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n\n    IteratorSeq.prototype.__iteratorUncached = function(type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = this._iterator;\n      var cache = this._iteratorCache;\n      var iterations = 0;\n      return new Iterator(function()  {\n        if (iterations >= cache.length) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          cache[iterations] = step.value;\n        }\n        return iteratorValue(type, iterations, cache[iterations++]);\n      });\n    };\n\n\n\n\n  // # pragma Helper functions\n\n  function isSeq(maybeSeq) {\n    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);\n  }\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq =\n      Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() :\n      isIterator(value) ? new IteratorSeq(value).fromEntrySeq() :\n      hasIterator(value) ? new IterableSeq(value).fromEntrySeq() :\n      typeof value === 'object' ? new ObjectSeq(value) :\n      undefined;\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of [k, v] entries, '+\n        'or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value) ||\n      (typeof value === 'object' && new ObjectSeq(value));\n    if (!seq) {\n      throw new TypeError(\n        'Expected Array or iterable object of values, or keyed object: ' + value\n      );\n    }\n    return seq;\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return (\n      isArrayLike(value) ? new ArraySeq(value) :\n      isIterator(value) ? new IteratorSeq(value) :\n      hasIterator(value) ? new IterableSeq(value) :\n      undefined\n    );\n  }\n\n  function seqIterate(seq, fn, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    }\n    return seq.__iterateUncached(fn, reverse);\n  }\n\n  function seqIterator(seq, type, reverse, useKeys) {\n    var cache = seq._cache;\n    if (cache) {\n      var maxIndex = cache.length - 1;\n      var ii = 0;\n      return new Iterator(function()  {\n        var entry = cache[reverse ? maxIndex - ii : ii];\n        return ii++ > maxIndex ?\n          iteratorDone() :\n          iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);\n      });\n    }\n    return seq.__iteratorUncached(type, reverse);\n  }\n\n  function fromJS(json, converter) {\n    return converter ?\n      fromJSWith(converter, json, '', {'': json}) :\n      fromJSDefault(json);\n  }\n\n  function fromJSWith(converter, json, key, parentJSON) {\n    if (Array.isArray(json)) {\n      return converter.call(parentJSON, key, IndexedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    if (isPlainObj(json)) {\n      return converter.call(parentJSON, key, KeyedSeq(json).map(function(v, k)  {return fromJSWith(converter, v, k, json)}));\n    }\n    return json;\n  }\n\n  function fromJSDefault(json) {\n    if (Array.isArray(json)) {\n      return IndexedSeq(json).map(fromJSDefault).toList();\n    }\n    if (isPlainObj(json)) {\n      return KeyedSeq(json).map(fromJSDefault).toMap();\n    }\n    return json;\n  }\n\n  function isPlainObj(value) {\n    return value && (value.constructor === Object || value.constructor === undefined);\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if the it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections implement `equals` and `hashCode`.\n   *\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (typeof valueA.valueOf === 'function' &&\n        typeof valueB.valueOf === 'function') {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    if (typeof valueA.equals === 'function' &&\n        typeof valueB.equals === 'function' &&\n        valueA.equals(valueB)) {\n      return true;\n    }\n    return false;\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isIterable(b) ||\n      a.size !== undefined && b.size !== undefined && a.size !== b.size ||\n      a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return b.every(function(v, k)  {\n        var entry = entries.next().value;\n        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n      }) && entries.next().done;\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function(v, k)  {\n      if (notAssociative ? !a.has(v) :\n          flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  createClass(Repeat, IndexedSeq);\n\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    Repeat.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function(index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function(searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function(begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size) ? this :\n        new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));\n    };\n\n    Repeat.prototype.reverse = function() {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function(searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function(fn, reverse) {\n      for (var ii = 0; ii < this.size; ii++) {\n        if (fn(this._value, ii, this) === false) {\n          return ii + 1;\n        }\n      }\n      return ii;\n    };\n\n    Repeat.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      var ii = 0;\n      return new Iterator(function() \n        {return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone()}\n      );\n    };\n\n    Repeat.prototype.equals = function(other) {\n      return other instanceof Repeat ?\n        is(this._value, other._value) :\n        deepEqual(other);\n    };\n\n\n  var EMPTY_REPEAT;\n\n  function invariant(condition, error) {\n    if (!condition) throw new Error(error);\n  }\n\n  createClass(Range, IndexedSeq);\n\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    Range.prototype.toString = function() {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return 'Range [ ' +\n        this._start + '...' + this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n      ' ]';\n    };\n\n    Range.prototype.get = function(index, notSetValue) {\n      return this.has(index) ?\n        this._start + wrapIndex(this, index) * this._step :\n        notSetValue;\n    };\n\n    Range.prototype.includes = function(searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex);\n    };\n\n    Range.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);\n    };\n\n    Range.prototype.indexOf = function(searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function(searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function(fn, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      for (var ii = 0; ii <= maxIndex; ii++) {\n        if (fn(value, ii, this) === false) {\n          return ii + 1;\n        }\n        value += reverse ? -step : step;\n      }\n      return ii;\n    };\n\n    Range.prototype.__iterator = function(type, reverse) {\n      var maxIndex = this.size - 1;\n      var step = this._step;\n      var value = reverse ? this._start + maxIndex * step : this._start;\n      var ii = 0;\n      return new Iterator(function()  {\n        var v = value;\n        value += reverse ? -step : step;\n        return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);\n      });\n    };\n\n    Range.prototype.equals = function(other) {\n      return other instanceof Range ?\n        this._start === other._start &&\n        this._end === other._end &&\n        this._step === other._step :\n        deepEqual(this, other);\n    };\n\n\n  var EMPTY_RANGE;\n\n  createClass(Collection, Iterable);\n    function Collection() {\n      throw TypeError('Abstract');\n    }\n\n\n  createClass(KeyedCollection, Collection);function KeyedCollection() {}\n\n  createClass(IndexedCollection, Collection);function IndexedCollection() {}\n\n  createClass(SetCollection, Collection);function SetCollection() {}\n\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ?\n    Math.imul :\n    function imul(a, b) {\n      a = a | 0; // int\n      b = b | 0; // int\n      var c = a & 0xffff;\n      var d = b & 0xffff;\n      // Shift by 0 fixes the sign on the high part.\n      return (c * d) + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0) | 0; // int\n    };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xBFFFFFFF);\n  }\n\n  function hash(o) {\n    if (o === false || o === null || o === undefined) {\n      return 0;\n    }\n    if (typeof o.valueOf === 'function') {\n      o = o.valueOf();\n      if (o === false || o === null || o === undefined) {\n        return 0;\n      }\n    }\n    if (o === true) {\n      return 1;\n    }\n    var type = typeof o;\n    if (type === 'number') {\n      if (o !== o || o === Infinity) {\n        return 0;\n      }\n      var h = o | 0;\n      if (h !== o) {\n        h ^= o * 0xFFFFFFFF;\n      }\n      while (o > 0xFFFFFFFF) {\n        o /= 0xFFFFFFFF;\n        h ^= o;\n      }\n      return smi(h);\n    }\n    if (type === 'string') {\n      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);\n    }\n    if (typeof o.hashCode === 'function') {\n      return o.hashCode();\n    }\n    if (type === 'object') {\n      return hashJSObj(o);\n    }\n    if (typeof o.toString === 'function') {\n      return hashString(o.toString());\n    }\n    throw new Error('Value type ' + type + ' cannot be hashed.');\n  }\n\n  function cachedHashString(string) {\n    var hash = stringHashCache[string];\n    if (hash === undefined) {\n      hash = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hash;\n    }\n    return hash;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hash = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hash = 31 * hash + string.charCodeAt(ii) | 0;\n    }\n    return smi(hash);\n  }\n\n  function hashJSObj(obj) {\n    var hash;\n    if (usingWeakMap) {\n      hash = weakMap.get(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = obj[UID_HASH_KEY];\n    if (hash !== undefined) {\n      return hash;\n    }\n\n    if (!canDefineProperty) {\n      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hash !== undefined) {\n        return hash;\n      }\n\n      hash = getIENodeHash(obj);\n      if (hash !== undefined) {\n        return hash;\n      }\n    }\n\n    hash = ++objHashUID;\n    if (objHashUID & 0x40000000) {\n      objHashUID = 0;\n    }\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hash);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        'enumerable': false,\n        'configurable': false,\n        'writable': false,\n        'value': hash\n      });\n    } else if (obj.propertyIsEnumerable !== undefined &&\n               obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function() {\n        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hash;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hash;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function() {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }());\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  createClass(Map, KeyedCollection);\n\n    // @pragma Construction\n\n    function Map(value) {\n      return value === null || value === undefined ? emptyMap() :\n        isMap(value) && !isOrdered(value) ? value :\n        emptyMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    Map.of = function() {var keyValues = SLICE$0.call(arguments, 0);\n      return emptyMap().withMutations(function(map ) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function() {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function(k, notSetValue) {\n      return this._root ?\n        this._root.get(0, undefined, k, notSetValue) :\n        notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function(k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.setIn = function(keyPath, v) {\n      return this.updateIn(keyPath, NOT_SET, function()  {return v});\n    };\n\n    Map.prototype.remove = function(k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteIn = function(keyPath) {\n      return this.updateIn(keyPath, function()  {return NOT_SET});\n    };\n\n    Map.prototype.update = function(k, notSetValue, updater) {\n      return arguments.length === 1 ?\n        k(this) :\n        this.updateIn([k], notSetValue, updater);\n    };\n\n    Map.prototype.updateIn = function(keyPath, notSetValue, updater) {\n      if (!updater) {\n        updater = notSetValue;\n        notSetValue = undefined;\n      }\n      var updatedValue = updateInDeepMap(\n        this,\n        forceIterator(keyPath),\n        notSetValue,\n        updater\n      );\n      return updatedValue === NOT_SET ? undefined : updatedValue;\n    };\n\n    Map.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.merge = function(/*...iters*/) {\n      return mergeIntoMapWith(this, undefined, arguments);\n    };\n\n    Map.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, merger, iters);\n    };\n\n    Map.prototype.mergeIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.merge === 'function' ?\n          m.merge.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoMapWith(this, deepMerger, arguments);\n    };\n\n    Map.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoMapWith(this, deepMergerWith(merger), iters);\n    };\n\n    Map.prototype.mergeDeepIn = function(keyPath) {var iters = SLICE$0.call(arguments, 1);\n      return this.updateIn(\n        keyPath,\n        emptyMap(),\n        function(m ) {return typeof m.mergeDeep === 'function' ?\n          m.mergeDeep.apply(m, iters) :\n          iters[iters.length - 1]}\n      );\n    };\n\n    Map.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.withMutations = function(fn) {\n      var mutable = this.asMutable();\n      fn(mutable);\n      return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n    };\n\n    Map.prototype.asMutable = function() {\n      return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n    };\n\n    Map.prototype.asImmutable = function() {\n      return this.__ensureOwner();\n    };\n\n    Map.prototype.wasAltered = function() {\n      return this.__altered;\n    };\n\n    Map.prototype.__iterator = function(type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      this._root && this._root.iterate(function(entry ) {\n        iterations++;\n        return fn(entry[1], entry[0], this$0);\n      }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n\n  function isMap(maybeMap) {\n    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);\n  }\n\n  Map.isMap = isMap;\n\n  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SENTINEL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeIn = MapPrototype.deleteIn;\n\n\n  // #pragma Trie Nodes\n\n\n\n    function ArrayMapNode(ownerID, entries) {\n      this.ownerID = ownerID;\n      this.entries = entries;\n    }\n\n    ArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    ArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && entries.length === 1) {\n        return; // undefined\n      }\n\n      if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n        return createNodes(ownerID, entries, key, value);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new ArrayMapNode(ownerID, newEntries);\n    };\n\n\n\n\n    function BitmapIndexedNode(ownerID, bitmap, nodes) {\n      this.ownerID = ownerID;\n      this.bitmap = bitmap;\n      this.nodes = nodes;\n    }\n\n    BitmapIndexedNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var bit = (1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK));\n      var bitmap = this.bitmap;\n      return (bitmap & bit) === 0 ? notSetValue :\n        this.nodes[popCount(bitmap & (bit - 1))].get(shift + SHIFT, keyHash, key, notSetValue);\n    };\n\n    BitmapIndexedNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var bit = 1 << keyHashFrag;\n      var bitmap = this.bitmap;\n      var exists = (bitmap & bit) !== 0;\n\n      if (!exists && value === NOT_SET) {\n        return this;\n      }\n\n      var idx = popCount(bitmap & (bit - 1));\n      var nodes = this.nodes;\n      var node = exists ? nodes[idx] : undefined;\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n\n      if (newNode === node) {\n        return this;\n      }\n\n      if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n        return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n      }\n\n      if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {\n        return nodes[idx ^ 1];\n      }\n\n      if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n        return newNode;\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;\n      var newNodes = exists ? newNode ?\n        setIn(nodes, idx, newNode, isEditable) :\n        spliceOut(nodes, idx, isEditable) :\n        spliceIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.bitmap = newBitmap;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n    };\n\n\n\n\n    function HashArrayMapNode(ownerID, count, nodes) {\n      this.ownerID = ownerID;\n      this.count = count;\n      this.nodes = nodes;\n    }\n\n    HashArrayMapNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var node = this.nodes[idx];\n      return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;\n    };\n\n    HashArrayMapNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n      var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n      var removed = value === NOT_SET;\n      var nodes = this.nodes;\n      var node = nodes[idx];\n\n      if (removed && !node) {\n        return this;\n      }\n\n      var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);\n      if (newNode === node) {\n        return this;\n      }\n\n      var newCount = this.count;\n      if (!node) {\n        newCount++;\n      } else if (!newNode) {\n        newCount--;\n        if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n          return packNodes(ownerID, nodes, newCount, idx);\n        }\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newNodes = setIn(nodes, idx, newNode, isEditable);\n\n      if (isEditable) {\n        this.count = newCount;\n        this.nodes = newNodes;\n        return this;\n      }\n\n      return new HashArrayMapNode(ownerID, newCount, newNodes);\n    };\n\n\n\n\n    function HashCollisionNode(ownerID, keyHash, entries) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entries = entries;\n    }\n\n    HashCollisionNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      var entries = this.entries;\n      for (var ii = 0, len = entries.length; ii < len; ii++) {\n        if (is(key, entries[ii][0])) {\n          return entries[ii][1];\n        }\n      }\n      return notSetValue;\n    };\n\n    HashCollisionNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      if (keyHash === undefined) {\n        keyHash = hash(key);\n      }\n\n      var removed = value === NOT_SET;\n\n      if (keyHash !== this.keyHash) {\n        if (removed) {\n          return this;\n        }\n        SetRef(didAlter);\n        SetRef(didChangeSize);\n        return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n      }\n\n      var entries = this.entries;\n      var idx = 0;\n      for (var len = entries.length; idx < len; idx++) {\n        if (is(key, entries[idx][0])) {\n          break;\n        }\n      }\n      var exists = idx < len;\n\n      if (exists ? entries[idx][1] === value : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n      (removed || !exists) && SetRef(didChangeSize);\n\n      if (removed && len === 2) {\n        return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n      }\n\n      var isEditable = ownerID && ownerID === this.ownerID;\n      var newEntries = isEditable ? entries : arrCopy(entries);\n\n      if (exists) {\n        if (removed) {\n          idx === len - 1 ? newEntries.pop() : (newEntries[idx] = newEntries.pop());\n        } else {\n          newEntries[idx] = [key, value];\n        }\n      } else {\n        newEntries.push([key, value]);\n      }\n\n      if (isEditable) {\n        this.entries = newEntries;\n        return this;\n      }\n\n      return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n    };\n\n\n\n\n    function ValueNode(ownerID, keyHash, entry) {\n      this.ownerID = ownerID;\n      this.keyHash = keyHash;\n      this.entry = entry;\n    }\n\n    ValueNode.prototype.get = function(shift, keyHash, key, notSetValue) {\n      return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n    };\n\n    ValueNode.prototype.update = function(ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n      var removed = value === NOT_SET;\n      var keyMatch = is(key, this.entry[0]);\n      if (keyMatch ? value === this.entry[1] : removed) {\n        return this;\n      }\n\n      SetRef(didAlter);\n\n      if (removed) {\n        SetRef(didChangeSize);\n        return; // undefined\n      }\n\n      if (keyMatch) {\n        if (ownerID && ownerID === this.ownerID) {\n          this.entry[1] = value;\n          return this;\n        }\n        return new ValueNode(ownerID, this.keyHash, [key, value]);\n      }\n\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n    };\n\n\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate =\n  HashCollisionNode.prototype.iterate = function (fn, reverse) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  }\n\n  BitmapIndexedNode.prototype.iterate =\n  HashArrayMapNode.prototype.iterate = function (fn, reverse) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  }\n\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  }\n\n  createClass(MapIterator, Iterator);\n\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    MapIterator.prototype.next = function() {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex;\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef(CHANGE_LENGTH);\n      var didAlter = MakeRef(DID_ALTER);\n      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);\n  }\n\n  function isLeafNode(node) {\n    return node.constructor === ValueNode || node.constructor === HashCollisionNode;\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes = idx1 === idx2 ?\n      [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] :\n      ((newNode = new ValueNode(ownerID, keyHash, entry)), idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function mergeIntoMapWith(map, merger, iterables) {\n    var iters = [];\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = KeyedIterable(value);\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    return mergeIntoCollectionWith(map, merger, iters);\n  }\n\n  function deepMerger(existing, value, key) {\n    return existing && existing.mergeDeep && isIterable(value) ?\n      existing.mergeDeep(value) :\n      is(existing, value) ? existing : value;\n  }\n\n  function deepMergerWith(merger) {\n    return function(existing, value, key)  {\n      if (existing && existing.mergeDeepWith && isIterable(value)) {\n        return existing.mergeDeepWith(merger, value);\n      }\n      var nextValue = merger(existing, value, key);\n      return is(existing, nextValue) ? existing : nextValue;\n    };\n  }\n\n  function mergeIntoCollectionWith(collection, merger, iters) {\n    iters = iters.filter(function(x ) {return x.size !== 0});\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function(collection ) {\n      var mergeIntoMap = merger ?\n        function(value, key)  {\n          collection.update(key, NOT_SET, function(existing )\n            {return existing === NOT_SET ? value : merger(existing, value, key)}\n          );\n        } :\n        function(value, key)  {\n          collection.set(key, value);\n        }\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoMap);\n      }\n    });\n  }\n\n  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {\n    var isNotSet = existing === NOT_SET;\n    var step = keyPathIter.next();\n    if (step.done) {\n      var existingValue = isNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    invariant(\n      isNotSet || (existing && existing.set),\n      'invalid keyPath'\n    );\n    var key = step.value;\n    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);\n    var nextUpdated = updateInDeepMap(\n      nextExisting,\n      keyPathIter,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting ? existing :\n      nextUpdated === NOT_SET ? existing.remove(key) :\n      (isNotSet ? emptyMap() : existing).set(key, nextUpdated);\n  }\n\n  function popCount(x) {\n    x = x - ((x >> 1) & 0x55555555);\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x = x + (x >> 8);\n    x = x + (x >> 16);\n    return x & 0x7f;\n  }\n\n  function setIn(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  createClass(List, IndexedCollection);\n\n    // @pragma Construction\n\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedIterable(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function(list ) {\n        list.setSize(size);\n        iter.forEach(function(v, i)  {return list.set(i, v)});\n      });\n    }\n\n    List.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function() {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function(index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function(index) {\n      return !this.has(index) ? this :\n        index === 0 ? this.shift() :\n        index === this.size - 1 ? this.pop() :\n        this.splice(index, 1);\n    };\n\n    List.prototype.insert = function(index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function(/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function(list ) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function() {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function(/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function(list ) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function() {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.merge = function(/*...iters*/) {\n      return mergeIntoListWith(this, undefined, arguments);\n    };\n\n    List.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, merger, iters);\n    };\n\n    List.prototype.mergeDeep = function(/*...iters*/) {\n      return mergeIntoListWith(this, deepMerger, arguments);\n    };\n\n    List.prototype.mergeDeepWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return mergeIntoListWith(this, deepMergerWith(merger), iters);\n    };\n\n    List.prototype.setSize = function(size) {\n      return setListBounds(this, 0, size);\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function(begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function(type, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function()  {\n        var value = values();\n        return value === DONE ?\n          iteratorDone() :\n          iteratorValue(type, index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function(fn, reverse) {\n      var index = 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        return this;\n      }\n      return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);\n    };\n\n\n  function isList(maybeList) {\n    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);\n  }\n\n  List.isList = isList;\n\n  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SENTINEL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.setIn = MapPrototype.setIn;\n  ListPrototype.deleteIn =\n  ListPrototype.removeIn = MapPrototype.removeIn;\n  ListPrototype.update = MapPrototype.update;\n  ListPrototype.updateIn = MapPrototype.updateIn;\n  ListPrototype.mergeIn = MapPrototype.mergeIn;\n  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  ListPrototype.withMutations = MapPrototype.withMutations;\n  ListPrototype.asMutable = MapPrototype.asMutable;\n  ListPrototype.asImmutable = MapPrototype.asImmutable;\n  ListPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n\n    function VNode(array, ownerID) {\n      this.array = array;\n      this.ownerID = ownerID;\n    }\n\n    // TODO: seems like these methods are very similar\n\n    VNode.prototype.removeBefore = function(ownerID, level, index) {\n      if (index === level ? 1 << level : 0 || this.array.length === 0) {\n        return this;\n      }\n      var originIndex = (index >>> level) & MASK;\n      if (originIndex >= this.array.length) {\n        return new VNode([], ownerID);\n      }\n      var removingFirst = originIndex === 0;\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[originIndex];\n        newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && removingFirst) {\n          return this;\n        }\n      }\n      if (removingFirst && !newChild) {\n        return this;\n      }\n      var editable = editableVNode(this, ownerID);\n      if (!removingFirst) {\n        for (var ii = 0; ii < originIndex; ii++) {\n          editable.array[ii] = undefined;\n        }\n      }\n      if (newChild) {\n        editable.array[originIndex] = newChild;\n      }\n      return editable;\n    };\n\n    VNode.prototype.removeAfter = function(ownerID, level, index) {\n      if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n        return this;\n      }\n      var sizeIndex = ((index - 1) >>> level) & MASK;\n      if (sizeIndex >= this.array.length) {\n        return this;\n      }\n\n      var newChild;\n      if (level > 0) {\n        var oldChild = this.array[sizeIndex];\n        newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n        if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n          return this;\n        }\n      }\n\n      var editable = editableVNode(this, ownerID);\n      editable.array.splice(sizeIndex + 1);\n      if (newChild) {\n        editable.array[sizeIndex] = newChild;\n      }\n      return editable;\n    };\n\n\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0 ?\n        iterateLeaf(node, offset) :\n        iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function()  {\n        do {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx], level - SHIFT, offset + (idx << level)\n          );\n        } while (true);\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function(list ) {\n        index < 0 ?\n          setListBounds(list, index).set(0, value) :\n          setListBounds(list, 0, index + 1).set(index, value)\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef(DID_ALTER);\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    SetRef(didAlter);\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      end = end | 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail = newTailOffset < oldTailOffset ?\n      listNodeFor(list, newCapacity - 1) :\n      newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;\n\n    // Merge Tail into tree.\n    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n    // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if (beginIndex !== (newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function mergeIntoListWith(list, merger, iterables) {\n    var iters = [];\n    var maxSize = 0;\n    for (var ii = 0; ii < iterables.length; ii++) {\n      var value = iterables[ii];\n      var iter = IndexedIterable(value);\n      if (iter.size > maxSize) {\n        maxSize = iter.size;\n      }\n      if (!isIterable(value)) {\n        iter = iter.map(function(v ) {return fromJS(v)});\n      }\n      iters.push(iter);\n    }\n    if (maxSize > list.size) {\n      list = list.setSize(maxSize);\n    }\n    return mergeIntoCollectionWith(list, merger, iters);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : (((size - 1) >>> SHIFT) << SHIFT);\n  }\n\n  createClass(OrderedMap, Map);\n\n    // @pragma Construction\n\n    function OrderedMap(value) {\n      return value === null || value === undefined ? emptyOrderedMap() :\n        isOrderedMap(value) ? value :\n        emptyOrderedMap().withMutations(function(map ) {\n          var iter = KeyedIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v, k)  {return map.set(k, v)});\n        });\n    }\n\n    OrderedMap.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function() {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function(k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function(k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function(k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.wasAltered = function() {\n      return this._map.wasAltered() || this._list.wasAltered();\n    };\n\n    OrderedMap.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._list.__iterate(\n        function(entry ) {return entry && fn(entry[1], entry[0], this$0)},\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function(type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) { // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function(entry, idx)  {return entry !== undefined && i !== idx});\n        newMap = newList.toKeyedSeq().map(function(entry ) {return entry[0]}).flip().toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else {\n      if (has) {\n        if (v === list.get(i)[1]) {\n          return omap;\n        }\n        newMap = map;\n        newList = list.set(i, [k, v]);\n      } else {\n        newMap = map.set(k, list.size);\n        newList = list.set(list.size, [k, v]);\n      }\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  createClass(ToKeyedSequence, KeyedSeq);\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    ToKeyedSequence.prototype.get = function(key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function(key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function() {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function() {var this$0 = this;\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function()  {return this$0._iter.toSeq().reverse()};\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function(mapper, context) {var this$0 = this;\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function()  {return this$0._iter.toSeq().map(mapper, context)};\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var ii;\n      return this._iter.__iterate(\n        this._useKeys ?\n          function(v, k)  {return fn(v, k, this$0)} :\n          ((ii = reverse ? resolveSize(this) : 0),\n            function(v ) {return fn(v, reverse ? --ii : ii++, this$0)}),\n        reverse\n      );\n    };\n\n    ToKeyedSequence.prototype.__iterator = function(type, reverse) {\n      if (this._useKeys) {\n        return this._iter.__iterator(type, reverse);\n      }\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var ii = reverse ? resolveSize(this) : 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, reverse ? --ii : ii++, step.value, step);\n      });\n    };\n\n  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n  createClass(ToIndexedSequence, IndexedSeq);\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToIndexedSequence.prototype.includes = function(value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      return this._iter.__iterate(function(v ) {return fn(v, iterations++, this$0)}, reverse);\n    };\n\n    ToIndexedSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, iterations++, step.value, step)\n      });\n    };\n\n\n\n  createClass(ToSetSequence, SetSeq);\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    ToSetSequence.prototype.has = function(key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(v ) {return fn(v, v, this$0)}, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        return step.done ? step :\n          iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n\n\n  createClass(FromEntriesSequence, KeyedSeq);\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    FromEntriesSequence.prototype.entrySeq = function() {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._iter.__iterate(function(entry ) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedIterable = isIterable(entry);\n          return fn(\n            indexedIterable ? entry.get(1) : entry[1],\n            indexedIterable ? entry.get(0) : entry[0],\n            this$0\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function(type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedIterable = isIterable(entry);\n            return iteratorValue(\n              type,\n              indexedIterable ? entry.get(0) : entry[0],\n              indexedIterable ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n\n  ToIndexedSequence.prototype.cacheResult =\n  ToKeyedSequence.prototype.cacheResult =\n  ToSetSequence.prototype.cacheResult =\n  FromEntriesSequence.prototype.cacheResult =\n    cacheResultThrough;\n\n\n  function flipFactory(iterable) {\n    var flipSequence = makeSequence(iterable);\n    flipSequence._iter = iterable;\n    flipSequence.size = iterable.size;\n    flipSequence.flip = function()  {return iterable};\n    flipSequence.reverse = function () {\n      var reversedSequence = iterable.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function()  {return iterable.reverse()};\n      return reversedSequence;\n    };\n    flipSequence.has = function(key ) {return iterable.includes(key)};\n    flipSequence.includes = function(key ) {return iterable.has(key)};\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(k, v, this$0) !== false}, reverse);\n    }\n    flipSequence.__iteratorUncached = function(type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = iterable.__iterator(type, reverse);\n        return new Iterator(function()  {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return iterable.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    }\n    return flipSequence;\n  }\n\n\n  function mapFactory(iterable, mapper, context) {\n    var mappedSequence = makeSequence(iterable);\n    mappedSequence.size = iterable.size;\n    mappedSequence.has = function(key ) {return iterable.has(key)};\n    mappedSequence.get = function(key, notSetValue)  {\n      var v = iterable.get(key, NOT_SET);\n      return v === NOT_SET ?\n        notSetValue :\n        mapper.call(context, v, key, iterable);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(\n        function(v, k, c)  {return fn(mapper.call(context, v, k, c), k, this$0) !== false},\n        reverse\n      );\n    }\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function()  {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, iterable),\n          step\n        );\n      });\n    }\n    return mappedSequence;\n  }\n\n\n  function reverseFactory(iterable, useKeys) {\n    var reversedSequence = makeSequence(iterable);\n    reversedSequence._iter = iterable;\n    reversedSequence.size = iterable.size;\n    reversedSequence.reverse = function()  {return iterable};\n    if (iterable.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(iterable);\n        flipSequence.reverse = function()  {return iterable.flip()};\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function(key, notSetValue) \n      {return iterable.get(useKeys ? key : -1 - key, notSetValue)};\n    reversedSequence.has = function(key )\n      {return iterable.has(useKeys ? key : -1 - key)};\n    reversedSequence.includes = function(value ) {return iterable.includes(value)};\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {var this$0 = this;\n      return iterable.__iterate(function(v, k)  {return fn(v, k, this$0)}, !reverse);\n    };\n    reversedSequence.__iterator =\n      function(type, reverse)  {return iterable.__iterator(type, !reverse)};\n    return reversedSequence;\n  }\n\n\n  function filterFactory(iterable, predicate, context, useKeys) {\n    var filterSequence = makeSequence(iterable);\n    if (useKeys) {\n      filterSequence.has = function(key ) {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);\n      };\n      filterSequence.get = function(key, notSetValue)  {\n        var v = iterable.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, iterable) ?\n          v : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, iterable)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    }\n    return filterSequence;\n  }\n\n\n  function countByFactory(iterable, grouper, context) {\n    var groups = Map().asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        0,\n        function(a ) {return a + 1}\n      );\n    });\n    return groups.asImmutable();\n  }\n\n\n  function groupByFactory(iterable, grouper, context) {\n    var isKeyedIter = isKeyed(iterable);\n    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();\n    iterable.__iterate(function(v, k)  {\n      groups.update(\n        grouper.call(context, v, k, iterable),\n        function(a ) {return (a = a || [], a.push(isKeyedIter ? [k, v] : v), a)}\n      );\n    });\n    var coerce = iterableClass(iterable);\n    return groups.map(function(arr ) {return reify(iterable, coerce(arr))});\n  }\n\n\n  function sliceFactory(iterable, begin, end, useKeys) {\n    var originalSize = iterable.size;\n\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin = begin | 0;\n    }\n    if (end !== undefined) {\n      if (end === Infinity) {\n        end = originalSize;\n      } else {\n        end = end | 0;\n      }\n    }\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return iterable;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this iterable's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(iterable);\n\n    // If iterable.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;\n\n    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize ?\n          iterable.get(index + resolvedBegin, notSetValue) :\n          notSetValue;\n      }\n    }\n\n    sliceSeq.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k)  {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0) !== false &&\n                 iterations !== sliceSize;\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function(type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES) {\n          return step;\n        } else if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        } else {\n          return iteratorValue(type, iterations - 1, step.value[1], step);\n        }\n      });\n    }\n\n    return sliceSeq;\n  }\n\n\n  function takeWhileFactory(iterable, predicate, context) {\n    var takeSequence = makeSequence(iterable);\n    takeSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c) \n        {return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0)}\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function()  {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$0)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n\n  function skipWhileFactory(iterable, predicate, context, useKeys) {\n    var skipSequence = makeSequence(iterable);\n    skipSequence.__iterateUncached = function (fn, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      iterable.__iterate(function(v, k, c)  {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$0);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function(type, reverse) {var this$0 = this;\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function()  {\n        var step, k, v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            } else if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            } else {\n              return iteratorValue(type, iterations++, step.value[1], step);\n            }\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$0));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step :\n          iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n\n  function concatFactory(iterable, values) {\n    var isKeyedIterable = isKeyed(iterable);\n    var iters = [iterable].concat(values).map(function(v ) {\n      if (!isIterable(v)) {\n        v = isKeyedIterable ?\n          keyedSeqFromValue(v) :\n          indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n      } else if (isKeyedIterable) {\n        v = KeyedIterable(v);\n      }\n      return v;\n    }).filter(function(v ) {return v.size !== 0});\n\n    if (iters.length === 0) {\n      return iterable;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (singleton === iterable ||\n          isKeyedIterable && isKeyed(singleton) ||\n          isIndexed(iterable) && isIndexed(singleton)) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedIterable) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(iterable)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(\n      function(sum, seq)  {\n        if (sum !== undefined) {\n          var size = seq.size;\n          if (size !== undefined) {\n            return sum + size;\n          }\n        }\n      },\n      0\n    );\n    return concatSeq;\n  }\n\n\n  function flattenFactory(iterable, depth, useKeys) {\n    var flatSequence = makeSequence(iterable);\n    flatSequence.__iterateUncached = function(fn, reverse) {\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {var this$0 = this;\n        iter.__iterate(function(v, k)  {\n          if ((!depth || currentDepth < depth) && isIterable(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {\n            stopped = true;\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(iterable, 0);\n      return iterations;\n    }\n    flatSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function()  {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isIterable(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    }\n    return flatSequence;\n  }\n\n\n  function flatMapFactory(iterable, mapper, context) {\n    var coerce = iterableClass(iterable);\n    return iterable.toSeq().map(\n      function(v, k)  {return coerce(mapper.call(context, v, k, iterable))}\n    ).flatten(true);\n  }\n\n\n  function interposeFactory(iterable, separator) {\n    var interposedSequence = makeSequence(iterable);\n    interposedSequence.size = iterable.size && iterable.size * 2 -1;\n    interposedSequence.__iterateUncached = function(fn, reverse) {var this$0 = this;\n      var iterations = 0;\n      iterable.__iterate(function(v, k) \n        {return (!iterations || fn(separator, iterations++, this$0) !== false) &&\n        fn(v, iterations++, this$0) !== false},\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function(type, reverse) {\n      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function()  {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2 ?\n          iteratorValue(type, iterations++, separator) :\n          iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n\n  function sortFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedIterable = isKeyed(iterable);\n    var index = 0;\n    var entries = iterable.toSeq().map(\n      function(v, k)  {return [k, v, index++, mapper ? mapper(v, k, iterable) : v]}\n    ).toArray();\n    entries.sort(function(a, b)  {return comparator(a[3], b[3]) || a[2] - b[2]}).forEach(\n      isKeyedIterable ?\n      function(v, i)  { entries[i].length = 2; } :\n      function(v, i)  { entries[i] = v[1]; }\n    );\n    return isKeyedIterable ? KeyedSeq(entries) :\n      isIndexed(iterable) ? IndexedSeq(entries) :\n      SetSeq(entries);\n  }\n\n\n  function maxFactory(iterable, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = iterable.toSeq()\n        .map(function(v, k)  {return [v, mapper(v, k, iterable)]})\n        .reduce(function(a, b)  {return maxCompare(comparator, a[1], b[1]) ? b : a});\n      return entry && entry[0];\n    } else {\n      return iterable.reduce(function(a, b)  {return maxCompare(comparator, a, b) ? b : a});\n    }\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) || comp > 0;\n  }\n\n\n  function zipWithFactory(keyIter, zipper, iters) {\n    var zipSequence = makeSequence(keyIter);\n    zipSequence.size = new ArraySeq(iters).map(function(i ) {return i.size}).min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function(fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function(type, reverse) {\n      var iterators = iters.map(function(i )\n        {return (i = Iterable(i), getIterator(reverse ? i.reverse() : i))}\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function()  {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function(i ) {return i.next()});\n          isDone = steps.some(function(s ) {return s.done});\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(null, steps.map(function(s ) {return s.value}))\n        );\n      });\n    };\n    return zipSequence\n  }\n\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function resolveSize(iter) {\n    assertNotInfinite(iter.size);\n    return ensureSize(iter);\n  }\n\n  function iterableClass(iterable) {\n    return isKeyed(iterable) ? KeyedIterable :\n      isIndexed(iterable) ? IndexedIterable :\n      SetIterable;\n  }\n\n  function makeSequence(iterable) {\n    return Object.create(\n      (\n        isKeyed(iterable) ? KeyedSeq :\n        isIndexed(iterable) ? IndexedSeq :\n        SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    } else {\n      return Seq.prototype.cacheResult.call(this);\n    }\n  }\n\n  function defaultComparator(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  function forceIterator(keyPath) {\n    var iter = getIterator(keyPath);\n    if (!iter) {\n      // Array might not be iterable in this environment, so we need a fallback\n      // to our wrapped type.\n      if (!isArrayLike(keyPath)) {\n        throw new TypeError('Expected iterable or array-like: ' + keyPath);\n      }\n      iter = getIterator(Iterable(keyPath));\n    }\n    return iter;\n  }\n\n  createClass(Record, KeyedCollection);\n\n    function Record(defaultValues, name) {\n      var hasInitialized;\n\n      var RecordType = function Record(values) {\n        if (values instanceof RecordType) {\n          return values;\n        }\n        if (!(this instanceof RecordType)) {\n          return new RecordType(values);\n        }\n        if (!hasInitialized) {\n          hasInitialized = true;\n          var keys = Object.keys(defaultValues);\n          setProps(RecordTypePrototype, keys);\n          RecordTypePrototype.size = keys.length;\n          RecordTypePrototype._name = name;\n          RecordTypePrototype._keys = keys;\n          RecordTypePrototype._defaultValues = defaultValues;\n        }\n        this._map = Map(values);\n      };\n\n      var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);\n      RecordTypePrototype.constructor = RecordType;\n\n      return RecordType;\n    }\n\n    Record.prototype.toString = function() {\n      return this.__toString(recordName(this) + ' {', '}');\n    };\n\n    // @pragma Access\n\n    Record.prototype.has = function(k) {\n      return this._defaultValues.hasOwnProperty(k);\n    };\n\n    Record.prototype.get = function(k, notSetValue) {\n      if (!this.has(k)) {\n        return notSetValue;\n      }\n      var defaultVal = this._defaultValues[k];\n      return this._map ? this._map.get(k, defaultVal) : defaultVal;\n    };\n\n    // @pragma Modification\n\n    Record.prototype.clear = function() {\n      if (this.__ownerID) {\n        this._map && this._map.clear();\n        return this;\n      }\n      var RecordType = this.constructor;\n      return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));\n    };\n\n    Record.prototype.set = function(k, v) {\n      if (!this.has(k)) {\n        throw new Error('Cannot set unknown key \"' + k + '\" on ' + recordName(this));\n      }\n      if (this._map && !this._map.has(k)) {\n        var defaultVal = this._defaultValues[k];\n        if (v === defaultVal) {\n          return this;\n        }\n      }\n      var newMap = this._map && this._map.set(k, v);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.remove = function(k) {\n      if (!this.has(k)) {\n        return this;\n      }\n      var newMap = this._map && this._map.remove(k);\n      if (this.__ownerID || newMap === this._map) {\n        return this;\n      }\n      return makeRecord(this, newMap);\n    };\n\n    Record.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Record.prototype.__iterator = function(type, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterator(type, reverse);\n    };\n\n    Record.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return KeyedIterable(this._defaultValues).map(function(_, k)  {return this$0.get(k)}).__iterate(fn, reverse);\n    };\n\n    Record.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map && this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return makeRecord(this, newMap, ownerID);\n    };\n\n\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn =\n  RecordPrototype.removeIn = MapPrototype.removeIn;\n  RecordPrototype.merge = MapPrototype.merge;\n  RecordPrototype.mergeWith = MapPrototype.mergeWith;\n  RecordPrototype.mergeIn = MapPrototype.mergeIn;\n  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;\n  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;\n  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;\n  RecordPrototype.setIn = MapPrototype.setIn;\n  RecordPrototype.update = MapPrototype.update;\n  RecordPrototype.updateIn = MapPrototype.updateIn;\n  RecordPrototype.withMutations = MapPrototype.withMutations;\n  RecordPrototype.asMutable = MapPrototype.asMutable;\n  RecordPrototype.asImmutable = MapPrototype.asImmutable;\n\n\n  function makeRecord(likeRecord, map, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._map = map;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record._name || record.constructor.name || 'Record';\n  }\n\n  function setProps(prototype, names) {\n    try {\n      names.forEach(setProp.bind(undefined, prototype));\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  function setProp(prototype, name) {\n    Object.defineProperty(prototype, name, {\n      get: function() {\n        return this.get(name);\n      },\n      set: function(value) {\n        invariant(this.__ownerID, 'Cannot set on an immutable record.');\n        this.set(name, value);\n      }\n    });\n  }\n\n  createClass(Set, SetCollection);\n\n    // @pragma Construction\n\n    function Set(value) {\n      return value === null || value === undefined ? emptySet() :\n        isSet(value) && !isOrdered(value) ? value :\n        emptySet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    Set.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    Set.prototype.toString = function() {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function(value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function(value) {\n      return updateSet(this, this._map.set(value, true));\n    };\n\n    Set.prototype.remove = function(value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function() {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.union = function() {var iters = SLICE$0.call(arguments, 0);\n      iters = iters.filter(function(x ) {return x.size !== 0});\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function(set ) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetIterable(iters[ii]).forEach(function(value ) {return set.add(value)});\n        }\n      });\n    };\n\n    Set.prototype.intersect = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (!iters.every(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.subtract = function() {var iters = SLICE$0.call(arguments, 0);\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function(iter ) {return SetIterable(iter)});\n      var originalSet = this;\n      return this.withMutations(function(set ) {\n        originalSet.forEach(function(value ) {\n          if (iters.some(function(iter ) {return iter.includes(value)})) {\n            set.remove(value);\n          }\n        });\n      });\n    };\n\n    Set.prototype.merge = function() {\n      return this.union.apply(this, arguments);\n    };\n\n    Set.prototype.mergeWith = function(merger) {var iters = SLICE$0.call(arguments, 1);\n      return this.union.apply(this, iters);\n    };\n\n    Set.prototype.sort = function(comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function(mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function() {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function(fn, reverse) {var this$0 = this;\n      return this._map.__iterate(function(_, k)  {return fn(k, k, this$0)}, reverse);\n    };\n\n    Set.prototype.__iterator = function(type, reverse) {\n      return this._map.map(function(_, k)  {return k}).__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n\n  function isSet(maybeSet) {\n    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);\n  }\n\n  Set.isSet = isSet;\n\n  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SENTINEL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.mergeDeep = SetPrototype.merge;\n  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;\n  SetPrototype.withMutations = MapPrototype.withMutations;\n  SetPrototype.asMutable = MapPrototype.asMutable;\n  SetPrototype.asImmutable = MapPrototype.asImmutable;\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map ? set :\n      newMap.size === 0 ? set.__empty() :\n      set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  createClass(OrderedSet, Set);\n\n    // @pragma Construction\n\n    function OrderedSet(value) {\n      return value === null || value === undefined ? emptyOrderedSet() :\n        isOrderedSet(value) ? value :\n        emptyOrderedSet().withMutations(function(set ) {\n          var iter = SetIterable(value);\n          assertNotInfinite(iter.size);\n          iter.forEach(function(v ) {return set.add(v)});\n        });\n    }\n\n    OrderedSet.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function(value) {\n      return this(KeyedIterable(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function() {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));\n  }\n\n  createClass(Stack, IndexedCollection);\n\n    // @pragma Construction\n\n    function Stack(value) {\n      return value === null || value === undefined ? emptyStack() :\n        isStack(value) ? value :\n        emptyStack().unshiftAll(value);\n    }\n\n    Stack.of = function(/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function() {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function(index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function() {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function(/*...values*/) {\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments[ii],\n          next: head\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function(iter) {\n      iter = IndexedIterable(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.reverse().forEach(function(value ) {\n        newSize++;\n        head = {\n          value: value,\n          next: head\n        };\n      });\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function() {\n      return this.slice(1);\n    };\n\n    Stack.prototype.unshift = function(/*...values*/) {\n      return this.push.apply(this, arguments);\n    };\n\n    Stack.prototype.unshiftAll = function(iter) {\n      return this.pushAll(iter);\n    };\n\n    Stack.prototype.shift = function() {\n      return this.pop.apply(this, arguments);\n    };\n\n    Stack.prototype.clear = function() {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function(begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function(ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function(fn, reverse) {\n      if (reverse) {\n        return this.reverse().__iterate(fn);\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function(type, reverse) {\n      if (reverse) {\n        return this.reverse().__iterator(type);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function()  {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n\n  function isStack(maybeStack) {\n    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);\n  }\n\n  Stack.isStack = isStack;\n\n  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SENTINEL] = true;\n  StackPrototype.withMutations = MapPrototype.withMutations;\n  StackPrototype.asMutable = MapPrototype.asMutable;\n  StackPrototype.asImmutable = MapPrototype.asImmutable;\n  StackPrototype.wasAltered = MapPrototype.wasAltered;\n\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function(key ) { ctor.prototype[key] = methods[key]; };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  Iterable.Iterator = Iterator;\n\n  mixin(Iterable, {\n\n    // ### Conversion to other types\n\n    toArray: function() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      this.valueSeq().__iterate(function(v, i)  { array[i] = v; });\n      return array;\n    },\n\n    toIndexedSeq: function() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJS === 'function' ? value.toJS() : value}\n      ).__toJS();\n    },\n\n    toJSON: function() {\n      return this.toSeq().map(\n        function(value ) {return value && typeof value.toJSON === 'function' ? value.toJSON() : value}\n      ).__toJS();\n    },\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: function() {\n      assertNotInfinite(this.size);\n      var object = {};\n      this.__iterate(function(v, k)  { object[k] = v; });\n      return object;\n    },\n\n    toOrderedMap: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function() {\n      return isIndexed(this) ? this.toIndexedSeq() :\n        isKeyed(this) ? this.toKeyedSeq() :\n        this.toSetSeq();\n    },\n\n    toStack: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n\n    // ### Common JavaScript methods and properties\n\n    toString: function() {\n      return '[Iterable]';\n    },\n\n    __toString: function(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function() {var values = SLICE$0.call(arguments, 0);\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function(searchValue) {\n      return this.some(function(value ) {return is(value, searchValue)});\n    },\n\n    entries: function() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function(v, k, c)  {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function(v ) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function(reducer, initialReduction, context) {\n      assertNotInfinite(this.size);\n      var reduction;\n      var useFirst;\n      if (arguments.length < 2) {\n        useFirst = true;\n      } else {\n        reduction = initialReduction;\n      }\n      this.__iterate(function(v, k, c)  {\n        if (useFirst) {\n          useFirst = false;\n          reduction = v;\n        } else {\n          reduction = reducer.call(context, reduction, v, k, c);\n        }\n      });\n      return reduction;\n    },\n\n    reduceRight: function(reducer, initialReduction, context) {\n      var reversed = this.toKeyedSeq().reverse();\n      return reversed.reduce.apply(reversed, arguments);\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n\n    // ### More sequential methods\n\n    butLast: function() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function()  {return true});\n    },\n\n    count: function(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function() {\n      var iterable = this;\n      if (iterable._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(iterable._cache);\n      }\n      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function()  {return iterable.toSeq()};\n      return entriesSequence;\n    },\n\n    filterNot: function(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function(v, k, c)  {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function() {\n      return this.find(returnTrue);\n    },\n\n    flatMap: function(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function(searchKey, notSetValue) {\n      return this.find(function(_, key)  {return is(key, searchKey)}, undefined, notSetValue);\n    },\n\n    getIn: function(searchKeyPath, notSetValue) {\n      var nested = this;\n      // Note: in an ES6 environment, we would prefer:\n      // for (var key of searchKeyPath) {\n      var iter = forceIterator(searchKeyPath);\n      var step;\n      while (!(step = iter.next()).done) {\n        var key = step.value;\n        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;\n        if (nested === NOT_SET) {\n          return notSetValue;\n        }\n      }\n      return nested;\n    },\n\n    groupBy: function(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: function(searchKeyPath) {\n      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;\n    },\n\n    isSubset: function(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);\n      return this.every(function(value ) {return iter.includes(value)});\n    },\n\n    isSuperset: function(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function(searchValue) {\n      return this.findKey(function(value ) {return is(value, searchValue)});\n    },\n\n    keySeq: function() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function() {\n      return this.toSeq().reverse().first();\n    },\n\n    lastKeyOf: function(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function(comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);\n    },\n\n    minBy: function(mapper, comparator) {\n      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);\n    },\n\n    rest: function() {\n      return this.slice(1);\n    },\n\n    skip: function(amount) {\n      return this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function(amount) {\n      return reify(this, this.toSeq().reverse().skip(amount).reverse());\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function(amount) {\n      return reify(this, this.toSeq().reverse().take(amount).reverse());\n    },\n\n    takeWhile: function(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    valueSeq: function() {\n      return this.toIndexedSeq();\n    },\n\n\n    // ### Hashable Object\n\n    hashCode: function() {\n      return this.__hash || (this.__hash = hashIterable(this));\n    }\n\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  // var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  // var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\n  // var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';\n  // var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\n\n  var IterablePrototype = Iterable.prototype;\n  IterablePrototype[IS_ITERABLE_SENTINEL] = true;\n  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;\n  IterablePrototype.__toJS = IterablePrototype.toArray;\n  IterablePrototype.__toStringMapper = quoteString;\n  IterablePrototype.inspect =\n  IterablePrototype.toSource = function() { return this.toString(); };\n  IterablePrototype.chain = IterablePrototype.flatMap;\n  IterablePrototype.contains = IterablePrototype.includes;\n\n  mixin(KeyedIterable, {\n\n    // ### More sequential methods\n\n    flip: function() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function(mapper, context) {var this$0 = this;\n      var iterations = 0;\n      return reify(this,\n        this.toSeq().map(\n          function(v, k)  {return mapper.call(context, [k, v], iterations++, this$0)}\n        ).fromEntrySeq()\n      );\n    },\n\n    mapKeys: function(mapper, context) {var this$0 = this;\n      return reify(this,\n        this.toSeq().flip().map(\n          function(k, v)  {return mapper.call(context, k, v, this$0)}\n        ).flip()\n      );\n    }\n\n  });\n\n  var KeyedIterablePrototype = KeyedIterable.prototype;\n  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;\n  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;\n  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;\n  KeyedIterablePrototype.__toStringMapper = function(v, k)  {return JSON.stringify(k) + ': ' + quoteString(v)};\n\n\n\n  mixin(IndexedIterable, {\n\n    // ### Conversion to other types\n\n    toKeyedSeq: function() {\n      return new ToKeyedSequence(this, false);\n    },\n\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum | 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1 ?\n          spliced :\n          spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n\n    // ### More collection methods\n\n    findLastIndex: function(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function() {\n      return this.get(0);\n    },\n\n    flatten: function(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return (index < 0 || (this.size === Infinity ||\n          (this.size !== undefined && index > this.size))) ?\n        notSetValue :\n        this.find(function(_, key)  {return key === index}, undefined, notSetValue);\n    },\n\n    has: function(index) {\n      index = wrapIndex(this, index);\n      return index >= 0 && (this.size !== undefined ?\n        this.size === Infinity || index < this.size :\n        this.indexOf(index) !== -1\n      );\n    },\n\n    interpose: function(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function(/*...iterables*/) {\n      var iterables = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * iterables.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function() {\n      return Range(0, this.size);\n    },\n\n    last: function() {\n      return this.get(-1);\n    },\n\n    skipWhile: function(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function(/*, ...iterables */) {\n      var iterables = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, iterables));\n    },\n\n    zipWith: function(zipper/*, ...iterables */) {\n      var iterables = arrCopy(arguments);\n      iterables[0] = this;\n      return reify(this, zipWithFactory(this, zipper, iterables));\n    }\n\n  });\n\n  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;\n  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;\n\n\n\n  mixin(SetIterable, {\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function(value) {\n      return this.has(value);\n    },\n\n\n    // ### More sequential methods\n\n    keySeq: function() {\n      return this.valueSeq();\n    }\n\n  });\n\n  SetIterable.prototype.has = IterablePrototype.includes;\n  SetIterable.prototype.contains = SetIterable.prototype.includes;\n\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedIterable.prototype);\n  mixin(IndexedSeq, IndexedIterable.prototype);\n  mixin(SetSeq, SetIterable.prototype);\n\n  mixin(KeyedCollection, KeyedIterable.prototype);\n  mixin(IndexedCollection, IndexedIterable.prototype);\n  mixin(SetCollection, SetIterable.prototype);\n\n\n  // #pragma Helper functions\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    }\n  }\n\n  function neg(predicate) {\n    return function() {\n      return -predicate.apply(this, arguments);\n    }\n  }\n\n  function quoteString(value) {\n    return typeof value === 'string' ? JSON.stringify(value) : String(value);\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashIterable(iterable) {\n    if (iterable.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(iterable);\n    var keyed = isKeyed(iterable);\n    var h = ordered ? 1 : 0;\n    var size = iterable.__iterate(\n      keyed ?\n        ordered ?\n          function(v, k)  { h = 31 * h + hashMerge(hash(v), hash(k)) | 0; } :\n          function(v, k)  { h = h + hashMerge(hash(v), hash(k)) | 0; } :\n        ordered ?\n          function(v ) { h = 31 * h + hash(v) | 0; } :\n          function(v ) { h = h + hash(v) | 0; }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xCC9E2D51);\n    h = imul(h << 15 | h >>> -15, 0x1B873593);\n    h = imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = smi(h ^ h >>> 16);\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n  }\n\n  var Immutable = {\n\n    Iterable: Iterable,\n\n    Seq: Seq,\n    Collection: Collection,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS\n\n  };\n\n  return Immutable;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/immutable/dist/immutable.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}